(function ($, window, undefined) {
    var icons = {
        camera: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" width="101px" height="101px" viewBox="-0.335 -0.255 101 101" enable-background="new -0.335 -0.255 101 101"    xml:space="preserve">  <defs>  </defs>  <path opacity="0.2" d="M50,2.5C23.809,2.5,2.5,23.808,2.5,50S23.808,97.499,50,97.499c26.191,0,47.5-21.308,47.5-47.499   C97.5,23.809,76.19,2.5,50,2.5z"/>  <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.57,22.429,49.999,50,49.999c27.57,0,50-22.429,50-49.999   C100,22.431,77.569,0,50,0z M77.71,61.245l-15.599-9.006v8.553H25.516V37.254h36.595v8.839l15.599-9.006V61.245z"/>  </svg>',
        cameraTransparent: '<svg class="camera-icon" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498"    xml:space="preserve">  <path fill="#FFFFFF" class="cameraPath" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M77.156,60.693l-15.521-8.961v8.51H25.223v-23.42   h36.412v8.795l15.521-8.961V60.693z"/>  </svg>',
        disabledCamera: '<svg  version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498"    xml:space="preserve">  <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M49.584,95.203   c-25.198,0-45.698-20.501-45.698-45.699s20.5-45.699,45.698-45.699c25.199,0,45.699,20.5,45.699,45.699S74.783,95.203,49.584,95.203   z"/>  <polygon fill="#FFFFFF" points="61.635,39.34 43.63,60.242 61.635,60.242 61.635,51.732 77.156,60.693 77.156,36.656 61.635,45.617    "/>  <polygon fill="#FFFFFF" points="25.223,36.822 25.223,60.242 34.391,60.242 54.564,36.822 "/>  <rect x="47.585" y="11.385" transform="matrix(0.7578 0.6525 -0.6525 0.7578 43.3117 -20.7363)" fill="#C12337" width="4" height="73.163"/>  </svg>',
        cameraRequest: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" viewBox="-0.89 -0.372 121 56" enable-background="new -0.89 -0.372 121 56" xml:space="preserve"> <defs> </defs> <polygon id="video_1_" fill="#C12236" points="83.749,54.247 83.749,34.676 119.447,55.286 119.447,0 83.749,20.611 83.749,0.381 0,0.381 0,54.247 "/> </svg>',
        moreOptions: '<svg class="camera-icon" version="1.1" x="0px" y="0px" viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498" xml:space="preserve" id="svg119" sodipodi:docname="camera_icon2.svg" inkscape:version="1.1.2 (b8e25be833, 2022-02-05)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs123" /><sodipodi:namedview id="namedview121" pagecolor="#ffffff" bordercolor="#666666" borderopacity="1.0" inkscape:pageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" showgrid="false" inkscape:zoom="2.0301915" inkscape:cx="3.2016683" inkscape:cy="75.116065" inkscape:window-width="1920" inkscape:window-height="1001" inkscape:window-x="-9" inkscape:window-y="-9" inkscape:window-maximized="1" inkscape:current-layer="svg119" /> <g id="g2038" transform="translate(0,-0.61459512)" style="fill:#ffffff"><path id="circle3410" style="fill:#ffffff;stroke-width:6.83351;stroke-linejoin:round;paint-order:fill markers stroke" d="m 57.556933,74.510017 a 7.972434,7.972434 0 0 1 -7.972434,7.972434 7.972434,7.972434 0 0 1 -7.972434,-7.972434 7.972434,7.972434 0 0 1 7.972434,-7.972434 7.972434,7.972434 0 0 1 7.972434,7.972434 z m 0,-24.391422 a 7.972434,7.972434 0 0 1 -7.972434,7.972434 7.972434,7.972434 0 0 1 -7.972434,-7.972434 7.972434,7.972434 0 0 1 7.972434,-7.972434 7.972434,7.972434 0 0 1 7.972434,7.972434 z m 0,-24.391422 a 7.972434,7.972434 0 0 1 -7.972434,7.972434 7.972434,7.972434 0 0 1 -7.972434,-7.972434 7.972434,7.972434 0 0 1 7.972434,-7.972434 7.972434,7.972434 0 0 1 7.972434,7.972434 z M 49.584,0.36959512 c -27.431,0 -49.749,22.31699988 -49.749,49.74899988 0,27.432 22.317,49.749 49.749,49.749 27.432,0 49.75,-22.317 49.75,-49.749 0,-27.431 -22.318,-49.74899988 -49.75,-49.74899988 z" /></g></svg>',
        microphone: '<svg version="1.1" id="Слой_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path opacity="0.2" d="M49.834,0.755c-27.018,0-49,21.981-49,49s21.98,48.999,49,48.999c27.018,0,49-21.98,49-48.999   C98.835,22.737,76.853,0.755,49.834,0.755z"/>  <path fill="#FFFFFF" d="M49.834-0.245c-27.569,0-50,22.43-50,50c0,27.57,22.429,49.999,50,49.999c27.57,0,50-22.429,50-49.999   C99.835,22.186,77.404-0.245,49.834-0.245z M41.269,32.48c0-4.678,3.794-8.473,8.474-8.473s8.473,3.793,8.473,8.473v19.961   c0,4.679-3.793,8.474-8.473,8.474s-8.474-3.794-8.474-8.474V32.48z M64.251,52.842c0,7.357-5.51,13.551-12.818,14.408v5.436h6.782   v3.381H41.27v-3.381h6.783V67.25c-7.308-0.857-12.817-7.051-12.818-14.408V42.46h3.379v10.176c0,6.146,4.983,11.129,11.129,11.129   c6.146,0,11.129-4.983,11.129-11.129V42.46h3.38V52.842z"/>  </svg>',
        microphoneTransparent: '<svg class="microphone-icon" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"    y="0px" viewBox="-0.165 -0.245 99.499 99.498"    enable-background="new -0.165 -0.245 99.499 99.498" xml:space="preserve">  <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M41.061,32.316c0-4.655,3.775-8.43,8.431-8.43   c4.657,0,8.43,3.774,8.43,8.43v19.861c0,4.655-3.773,8.431-8.43,8.431c-4.656,0-8.431-3.775-8.431-8.431V32.316z M63.928,52.576   c0,7.32-5.482,13.482-12.754,14.336v5.408h6.748v3.363h-16.86V72.32h6.749v-5.408c-7.271-0.854-12.753-7.016-12.754-14.336v-10.33   h3.362v10.125c0,6.115,4.958,11.073,11.073,11.073c6.116,0,11.073-4.958,11.073-11.073V42.246h3.363V52.576z"/>  </svg>',
        disabledMicrophone: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0.049 -0.245 99.499 99.498" enable-background="new 0.049 -0.245 99.499 99.498"    xml:space="preserve">  <path fill="#FFFFFF" d="M49.797,99.253c-27.431,0-49.749-22.317-49.749-49.749c0-27.431,22.317-49.749,49.749-49.749   c27.432,0,49.75,22.317,49.75,49.749C99.548,76.936,77.229,99.253,49.797,99.253z M49.797,3.805   c-25.198,0-45.698,20.5-45.698,45.699s20.5,45.699,45.698,45.699c25.2,0,45.7-20.501,45.7-45.699S74.997,3.805,49.797,3.805z"/>  <path fill="#FFFFFF" d="M49.798,60.607c4.657,0,8.43-3.775,8.43-8.431v-8.634L44.893,59.024   C46.276,60.017,47.966,60.607,49.798,60.607z"/>  <path fill="#FFFFFF" d="M58.229,32.316c0-4.656-3.773-8.43-8.43-8.43c-4.656,0-8.43,3.775-8.431,8.43v19.861   c0,0.068,0.009,0.135,0.01,0.202l16.851-19.563V32.316z"/>  <path fill="#FFFFFF" d="M48.117,66.912v5.408h-6.749v3.363h16.86V72.32h-6.748v-5.408c7.271-0.854,12.754-7.016,12.754-14.336   v-10.33H60.87v10.125c0,6.115-4.957,11.073-11.072,11.073c-2.537,0-4.867-0.862-6.733-2.297l-2.305,2.675   C42.813,65.475,45.331,66.585,48.117,66.912z"/>  <path fill="#FFFFFF" d="M38.725,52.371V42.246h-3.362v10.33c0,1.945,0.397,3.803,1.102,5.507l2.603-3.022   C38.852,54.198,38.725,53.301,38.725,52.371z"/>  <rect x="47.798" y="11.385" transform="matrix(0.7578 0.6525 -0.6525 0.7578 43.3634 -20.8757)" fill="#C12337" width="4" height="73.163"/>  </svg>',
        microphoneRequest: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="67px" height="120px" viewBox="-0.508 0 67 120" enable-background="new -0.508 0 67 120" xml:space="preserve"> <defs> </defs> <path fill="#C12236" d="M33.201,0L33.201,0C43.911,0,52.59,8.681,52.59,19.39v45.68c0,10.707-8.679,19.389-19.389,19.389l0,0 c-10.708,0-19.39-8.682-19.39-19.389V19.39C13.812,8.682,22.493,0,33.201,0z"/> <path fill="#C12236" d="M58.67,42.229v23.289c0,14.063-11.402,25.467-25.469,25.467l0,0c-14.065,0-25.467-11.402-25.467-25.467l0,0 V42.229H0v23.759c0.002,16.838,12.61,31.01,29.334,32.973V111.4H13.812v7.733h38.78V111.4H37.071V98.96 c16.726-1.963,29.333-16.135,29.333-32.974V42.229H58.67z"/> </svg>',
        broadcastIcon: '<svg version="1.1" id="Слой_1" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" sodipodi:docname="live_controls.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs5332" /><sodipodi:namedview id="namedview5330" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="4.13" inkscape:cx="25.786925" inkscape:cy="57.627119" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="Слой_1" /> <path d="m 49.834,0.755 c -27.018,0 -49,21.981 -49,49 0,27.019 21.98,48.999 49,48.999 27.018,0 49,-21.98 49,-48.999 10e-4,-27.018 -21.981,-49 -49,-49 z" id="path5325" style="display:inline;fill:#ffffff;fill-opacity:1" inkscape:label="path5325" /> <path id="path5327" style="display:inline;fill:#009900;fill-opacity:1" d="M 49.833985,-0.24414056 C 29.961494,-0.51707024 10.846836,12.428643 3.5353898,30.874613 -3.9535128,48.621333 0.18103675,70.465675 13.656255,84.23485 26.759913,98.339887 48.34947,103.52758 66.432231,96.922362 85.382298,90.471908 99.29856,71.726025 99.797245,51.685678 100.80835,32.216189 89.112873,12.96008 71.491929,4.694123 64.767472,1.4393628 57.303565,-0.25399325 49.833985,-0.24414056 Z M 49.152345,18.06836 c 5.356713,-0.148635 11.197873,1.929284 14.422069,6.321406 -1.270889,6.113602 -6.402739,-2.166034 -10.004286,-1.948224 -5.252898,-1.459697 -10.98386,0.410826 -14.802549,4.189318 -6.033589,0.240325 -0.07362,-6.467201 3.146466,-6.863392 2.272638,-1.027299 4.745159,-1.612658 7.2383,-1.699108 z m 0.628906,8.359375 c 3.604132,-1.153715 11.950685,5.223543 5.273438,6.162109 -3.243435,-3.525095 -8.080274,-2.105572 -11.421876,0.134766 -5.835524,-2.321006 3.597859,-7.016146 6.148438,-6.296875 z m 0.05469,7.896484 c 5.506084,0.798251 -0.500447,8.183301 -2.38086,2.96289 -0.420292,-1.467792 0.890976,-3.004586 2.38086,-2.96289 z m -29.369142,8.705079 c 19.578125,0 39.156251,0 58.734376,0 3.115058,0.82756 1.693244,4.455306 2.017579,6.82781 0,7.192163 0,14.384325 0,21.576487 -0.824546,3.11744 -4.453667,1.695245 -6.825858,2.019531 -17.975367,0 -35.950733,0 -53.926099,0 -3.115057,-0.827561 -1.693243,-4.455306 -2.017578,-6.82781 0,-7.192163 0,-14.384325 0,-21.576487 l 0.590937,-1.427213 1.426641,-0.592318 z m 2.021485,4.041015 c 0,7.447266 0,14.894532 0,22.341798 18.230468,0 36.460937,0 54.691405,0 0,-7.447266 0,-14.894532 0,-22.341798 -18.230468,0 -36.460937,0 -54.691405,0 z m 6.726562,2.44336 c 3.694915,1.239075 1.31116,6.59178 1.929692,9.725611 0.375651,1.32776 -0.991631,4.395577 1.210937,3.899436 3.181218,-1.380825 7.964894,2.642618 3.054015,3.851245 -3.058064,-0.04917 -9.168491,1.305878 -8.128233,-3.557634 0.09802,-4.303861 -0.258603,-8.667966 0.251957,-12.922464 0.339823,-0.589296 0.988236,-0.985016 1.681632,-0.996194 z m 12.38086,0.0098 c 3.776458,1.56531 1.384949,7.100387 2.036853,10.544311 -0.06225,1.961798 0.169314,3.955297 -0.09935,5.895143 -4.199347,3.606685 -4.05913,-3.345855 -3.804641,-6.233423 0.09188,-2.997799 -0.179777,-6.093193 0.138718,-9.030249 0.326999,-0.645073 0.946976,-1.214657 1.728416,-1.175782 z m 7.119141,0.0039 c 3.423796,0.859043 2.840718,7.403865 4.634298,8.7546 1.030292,-2.760347 2.837462,-12.325813 6.240702,-6.91085 C 58.206405,56.456813 56.57079,61.4925 54.669925,66.408232 50.039139,68.647011 50.4524,60.327903 48.7194,57.675478 48.521756,55.255806 44.709201,50.32393 48.714847,49.527373 Z m 18.416016,0.002 c 3.869357,-1.879423 7.570767,3.984178 2.074792,3.797324 -1.810089,-0.04731 -4.030947,-0.510697 -3.240808,2.039842 0.09501,1.876226 6.892646,0.596493 3.573682,4.483234 -2.277523,0.282471 -4.352289,-0.08693 -3.573682,2.821863 1.218702,1.463774 6.5719,-1.052135 6.242049,2.843224 -1.717327,2.304197 -10.727841,3.205318 -10.096713,-1.53576 0.0831,-4.512343 -0.327082,-9.095948 0.175018,-13.562959 1.069691,-1.485743 3.299722,-0.661366 4.845662,-0.886768 z" /></svg>',
        endCall: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" viewBox="-0.291 -0.433 230 230" enable-background="new -0.291 -0.433 230 230"    xml:space="preserve">  <defs>  </defs>  <path fill="#FFFFFF" d="M114.422,228.845C51.33,228.845,0,177.514,0,114.422C0,51.33,51.33,0,114.422,0   s114.423,51.33,114.423,114.422C228.845,177.514,177.515,228.845,114.422,228.845z M114.422,9.315   C56.466,9.315,9.315,56.466,9.315,114.422s47.151,105.107,105.107,105.107c57.957,0,105.107-47.151,105.107-105.107   S172.379,9.315,114.422,9.315z"/>  <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M48.375,111.046c-0.664,1.316-1.611,2.92-2.065,4.541   c-1.356,4.839-2.112,14.78,2.549,17.842c2.607,1.713,5.979,1.069,8.826,1.111c3.344,0.049,5.93,0.229,8.771,0.217   c4.818-0.021,13.588,1.619,16.644-2.956c3.33-4.986-0.959-9.42,2.013-14.331c2.396-3.958,9.311-5.427,13.066-6.184   c10.175-2.051,18.202-2.478,29.615-0.585c4.551,0.755,12.535,2.3,15.838,6.334c3.666,4.476-1.481,12.21,3.761,16.249   c2.694,2.077,6.099,1.577,9.13,1.575c3.183-0.003,5.826-0.139,8.682-0.122c5.307,0.032,13.455,2.128,16.858-2.832   c2.741-3.994,0.906-11.205,0.905-14.399c-0.158-1.169-0.457-2.3-0.898-3.393c-2.855-11.688-20.192-19.097-33.174-22.435   c-22.619-5.815-46.142-4.622-64.881-0.965c-1.395,0.218-2.752,0.578-4.071,1.079c-0.491-0.026-0.944,0.094-1.357,0.359   c-1.281,0.188-2.526,0.517-3.732,0.989c-8.698,3.484-17.809,5.413-24.858,15.118C49.383,108.49,48.274,110.399,48.375,111.046z"/> </svg>',
        dots: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <circle fill="#FFFFFF" cx="50.804" cy="16.167" r="10"/>  <circle fill="#FFFFFF" cx="50.804" cy="51.166" r="10"/>  <circle fill="#FFFFFF" cx="50.804" cy="86.166" r="10"/>  </svg>',
        screen: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0.074 0.053 99.499 99.498" enable-background="new 0.074 0.053 99.499 99.498"    xml:space="preserve">  <rect x="27.102" y="34.876" fill="#FFFFFF" width="45.375" height="24.868"/>  <path fill="#FFFFFF" d="M49.822,0.053c-27.432,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.433,0,49.75-22.317,49.75-49.749C99.572,22.371,77.255,0.053,49.822,0.053z M76.494,63.377H53.436v5.196h5.43v3.75H40.782v-3.75   h5.43v-5.196h-23.06V31.281h53.343V63.377z"/>  </svg>',
        user: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" width="101px" height="101px" viewBox="-0.751 -0.751 101 101" enable-background="new -0.751 -0.751 101 101"    xml:space="preserve">  <defs>  </defs>  <path opacity="0.2" d="M49.999,3.167C24.176,3.167,3.167,24.176,3.167,50s21.009,46.833,46.832,46.833   c25.825,0,46.834-21.009,46.834-46.833S75.824,3.167,49.999,3.167z"/>  <path fill="#FFFFFF" d="M49.999,0C22.43,0,0,22.43,0,50s22.43,50,49.999,50C77.57,100,100,77.57,100,50S77.57,0,49.999,0z    M50.085,27.151c6.697,0,12.123,5.859,12.123,13.087c0,7.226-5.427,13.085-12.123,13.085c-6.694,0-12.122-5.859-12.122-13.085   C37.963,33.011,43.392,27.151,50.085,27.151z M25.667,70.825c0.596-9.344,11.265-16.794,24.329-16.794   c13.066,0,23.738,7.449,24.337,16.794H25.667z"/>  </svg>',
        backArrow: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    width="35.317px" height="35.445px" viewBox="0 0 35.317 35.445" enable-background="new 0 0 35.317 35.445" xml:space="preserve">  <polyline fill="none" stroke="#000000" stroke-width="4" stroke-miterlimit="10" points="19.135,34.031 2.828,17.722 19.135,1.414    "/>  <line fill="none" stroke="#000000" stroke-width="4" stroke-miterlimit="10" x1="2.645" y1="17.722" x2="35.317" y2="17.722"/>  </svg>',
        enabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 99.999 99.999" enable-background="new 0 0 99.999 99.999" xml:space="preserve">  <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.571,22.429,50,50,50c27.569,0,50-22.429,50-50   C99.999,22.431,77.568,0,50,0z M45.261,67.689c0,0.148-0.188,0.191-0.261,0.326c-0.026,0.049-0.149,0.098-0.187,0.141   c-0.076,0.084-0.217,0.146-0.324,0.188c-0.053,0.018-0.131,0.029-0.188,0.033c-0.056,0.008-0.125,0.006-0.18-0.004   c-0.15-0.021-0.186-0.292-0.316-0.364l-10.094-7.804h-8.544c-0.06,0-0.121,0.224-0.179,0.21c-0.058-0.016-0.114,0.077-0.166,0.05   c-0.105-0.061-0.192-0.089-0.252-0.193c-0.03-0.053-0.162-0.079-0.178-0.137c-0.015-0.059-0.132-0.089-0.132-0.15V40.02   c0-0.06,0.117-0.121,0.132-0.178c0.016-0.058,0.094-0.114,0.123-0.166c0.03-0.052,0.095-0.1,0.137-0.143   c0.086-0.086,0.206-0.209,0.322-0.242c0.058-0.016,0.133-0.086,0.193-0.086h8.545l10.089-7.51c0.049-0.028,0.095-0.03,0.146-0.052   c0.141-0.059,0.184-0.031,0.333-0.035c0.055,0.012,0.11,0.032,0.165,0.045c0.05,0.025,0.104,0.048,0.151,0.079   c0.046,0.031,0.09,0.07,0.127,0.112c0.077,0.084,0.31,0.187,0.337,0.296c0.013,0.055,0.2,0.113,0.2,0.169V67.689z M53.839,60.984   c-0.25,0-0.502-0.095-0.695-0.283c-0.396-0.386-0.406-1.019-0.021-1.412c9.075-9.354,0.391-18.188,0.018-18.56   c-0.396-0.389-0.396-1.022-0.01-1.415c0.393-0.392,1.024-0.393,1.415-0.005c0.105,0.105,10.449,10.615,0.016,21.372   C54.361,60.883,54.102,60.984,53.839,60.984z M60.025,66.293c-0.25,0-0.502-0.094-0.693-0.281c-0.396-0.385-0.406-1.02-0.021-1.414   c14.265-14.703,0.603-28.596,0.015-29.181c-0.394-0.389-0.396-1.022-0.007-1.414c0.392-0.392,1.023-0.393,1.414-0.005   c0.158,0.157,15.638,15.888,0.015,31.991C60.548,66.189,60.289,66.293,60.025,66.293z M66.607,70.43   c-0.197,0.203-0.459,0.301-0.719,0.301c-0.252,0-0.502-0.094-0.697-0.279c-0.396-0.387-0.404-1.02-0.021-1.414   c18.603-19.174,0.781-37.296,0.015-38.06c-0.394-0.389-0.396-1.022-0.006-1.414c0.389-0.392,1.022-0.394,1.413-0.005   C66.794,29.759,86.568,49.853,66.607,70.43z"/>  </svg>  ',
        disabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 99.999 99.999" enable-background="new 0 0 99.999 99.999" xml:space="preserve">  <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.571,22.429,50,50,50c27.568,0,49.999-22.429,49.999-50   C99.999,22.431,77.568,0,50,0z M50,95.929C24.675,95.929,4.071,75.325,4.071,50C4.071,24.675,24.675,4.07,50,4.07   C75.324,4.07,95.927,24.674,95.927,50C95.927,75.326,75.324,95.929,50,95.929z"/>  <g>   <path fill="#FFFFFF" d="M43.8,68.242c0.13,0.072,0.16,0.109,0.31,0.131c0.055,0.01,0.113,0.012,0.169,0.004    c0.056-0.004,0.112-0.016,0.165-0.033c0.107-0.041,0.203-0.104,0.279-0.188c0.038-0.043,0.277-0.092,0.303-0.141    c0.072-0.135,0.287-0.178,0.287-0.326v-6.393l-4.271,4.722L43.8,68.242z"/>   <path fill="#FFFFFF" d="M45.314,32.309c0-0.056-0.213-0.113-0.227-0.168c-0.027-0.109-0.185-0.211-0.261-0.295    c-0.037-0.042-0.132-0.079-0.178-0.11c-0.047-0.031-0.126-0.05-0.177-0.075c-0.055-0.013-0.123-0.025-0.178-0.037    c-0.149,0.004-0.199-0.008-0.339,0.051c-0.051,0.022-0.1,0.291-0.149,0.319l-10.092,7.808h-8.545c-0.06,0-0.121-0.228-0.179-0.212    c-0.117,0.032-0.223-0.024-0.309,0.062c-0.042,0.043-0.079,0.032-0.109,0.084c-0.03,0.052-0.135,0.078-0.151,0.136    c-0.016,0.057-0.105,0.088-0.105,0.148v19.964c0,0.062,0.09,0.121,0.105,0.18c0.016,0.058,0.08,0.113,0.11,0.166    c0.06,0.104,0.167,0.191,0.273,0.252c0.052,0.027,0.118,0.116,0.176,0.132c0.058,0.014,0.129,0.088,0.189,0.088h8.544l1.704,1.059    l9.898-11.321V32.309z"/>   <path fill="#FFFFFF" d="M53.123,59.289c-0.385,0.394-0.375,1.026,0.021,1.412c0.193,0.188,0.445,0.283,0.695,0.283    c0.263,0,0.522-0.102,0.722-0.303c5.376-5.542,5.232-11.014,3.819-15.036l-1.497,1.738C57.72,50.709,57.34,54.942,53.123,59.289z"    />   <path fill="#FFFFFF" d="M54.545,39.31c-0.391-0.388-1.021-0.387-1.415,0.005c-0.387,0.393-0.387,1.026,0.01,1.415    c0.018,0.018,0.059,0.06,0.111,0.114l1.308-1.52C54.556,39.321,54.546,39.311,54.545,39.31z"/>   <path fill="#FFFFFF" d="M59.311,64.598c-0.385,0.395-0.375,1.029,0.021,1.414c0.191,0.188,0.443,0.281,0.693,0.281    c0.264,0,0.522-0.104,0.722-0.305c10.414-10.733,7.009-21.294,3.533-27.195l-1.324,1.538    C66.038,45.763,68.617,55.007,59.311,64.598z"/>   <path fill="#FFFFFF" d="M65.171,69.037c-0.384,0.395-0.375,1.027,0.021,1.414c0.195,0.186,0.445,0.279,0.697,0.279    c0.26,0,0.521-0.098,0.719-0.301c15.134-15.601,7.428-30.921,2.728-37.507l-1.299,1.509C72.5,40.69,79.215,54.562,65.171,69.037z"    />  </g>  <rect x="47.989" y="13.233" transform="matrix(0.7577 0.6526 -0.6526 0.7577 44.7397 -20.5144)" fill="#C12337" width="4.02" height="73.532"/>  </svg>',
        switchCameras: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <g>   <path fill="#FFFFFF" d="M50.037,43.904c-3.939,0-7.151,3.212-7.151,7.168c0,3.947,3.212,7.167,7.151,7.167    c3.947,0,7.152-3.22,7.152-7.167C57.189,47.116,53.984,43.904,50.037,43.904z M50.037,56.49c-2.988,0-5.402-2.431-5.402-5.417    c0-2.997,2.414-5.418,5.402-5.418c2.98,0,5.402,2.422,5.402,5.418C55.439,54.069,53.017,56.49,50.037,56.49z"/>   <path fill="#FFFFFF" d="M63.047,43.286c-0.596,0-1.084,0.487-1.084,1.091c0,0.604,0.488,1.091,1.084,1.091    c0.597,0,1.083-0.487,1.083-1.091C64.13,43.773,63.644,43.286,63.047,43.286z"/>   <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.571,22.429,50,50,50c27.569,0,50-22.429,50-50C100,22.431,77.569,0,50,0z     M25.111,51.626c0.934-0.933,2.432-0.933,3.366,0c0.934,0.936,0.926,2.446-0.007,3.382l-6.642,6.634    c-0.448,0.451-1.058,0.703-1.692,0.703c-0.633,0-1.242-0.252-1.689-0.703l-6.639-6.634c-0.933-0.936-0.933-2.446,0-3.382    c0.934-0.933,2.365-0.931,3.299,0l2.477,2.563V50c0-17.784,14.551-32.255,32.336-32.255c1.321,0,2.427,1.071,2.427,2.389    c0,1.32-1.017,2.39-2.337,2.39C34.86,22.524,22.583,34.85,22.583,50v4.189L25.111,51.626z M33.583,59.54V43.897    c0-1.44,1.517-3.086,2.956-3.086h5.341l2.703-2.58v-0.008c1-0.518,1.5-1.412,2.258-1.412h6.502c0.711,0,1.338,0.578,1.804,1.043    l0.015,0.158c0.007,0,0.022-0.172,0.022-0.172l3.128,2.971h5.224c1.433,0,3.048,1.646,3.048,3.086V59.54    c0,1.439-1.615,3.271-3.048,3.271H36.538C35.099,62.811,33.583,60.979,33.583,59.54z M86.506,49.071    c-0.614,0-1.063-0.235-1.529-0.698l-2.395-2.56V50c0,17.787-14.631,32.255-32.419,32.255c-1.32,0-2.47-1.067-2.47-2.39    c0-1.32,1.08-2.388,2.399-2.388c15.151,0,27.489-12.329,27.489-27.478v-4.187l-2.611,2.56c-0.934,0.931-2.473,0.931-3.403,0    c-0.938-0.934-0.951-2.447-0.014-3.381l6.63-6.636c0.935-0.935,2.442-0.935,3.375,0l6.635,6.636    c0.936,0.934,0.935,2.447-0.001,3.381C87.728,48.836,87.116,49.071,86.506,49.071z"/>  </g>  </svg>',
        changeView: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="2.292 0.765 100.001 100" enable-background="new 2.292 0.765 100.001 100"    xml:space="preserve">  <path fill="#FFFFFF" d="M52.291,0.765c-27.568,0-49.999,22.43-49.999,50c0,27.57,22.429,49.999,49.999,49.999   c27.57,0,50.002-22.429,50.002-49.999C102.293,23.196,79.861,0.765,52.291,0.765z M49.793,78.265H24.792v-25h5v20h20.001V78.265z    M49.793,28.265H29.792v20h-5v-25h25.001V28.265z M79.793,78.265h-25v-5h20v-20h5V78.265z M79.793,48.265h-5v-20h-20v-5h25V48.265z"   />  </svg>  ',
        switchOffCameras: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-2.176 -1.153 100 99.999" enable-background="new -2.176 -1.153 100 99.999"    xml:space="preserve">  <path fill="#8C8C8C" d="M47.823-1.153c-27.569,0-50,22.43-50,49.999c0,27.571,22.429,50,50,50c27.569,0,50.001-22.429,50.001-50   C97.824,21.277,75.393-1.153,47.823-1.153z M70.475,66.547l-4.949,4.949L47.824,53.795L30.122,71.496l-4.949-4.949l17.701-17.701   L25.173,31.145l4.949-4.95l17.702,17.702l17.702-17.702l4.949,4.95L52.773,48.846L70.475,66.547z"/>  </svg>  ',
        textChat: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" width="101px" height="101px" viewBox="-0.059 -0.896 101 101" enable-background="new -0.059 -0.896 101 101"    xml:space="preserve">  <defs>  </defs>  <path opacity="0.2" d="M50,5.667C25.556,5.667,5.667,25.555,5.667,50c0,24.444,19.887,44.332,44.333,44.332   c24.444,0,44.335-19.888,44.335-44.332C94.334,25.555,74.444,5.667,50,5.667z"/>  <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.569,22.429,49.999,50,49.999c27.569,0,50.002-22.43,50.002-49.999   C100.001,22.43,77.569,0,50,0z M78.159,62.579c0,3.964-3.247,7.211-7.21,7.211H59.516l-6.625,5.91c-1.624,1.496-4.157,1.496-5.781,0   l-6.626-5.91H29.051c-3.962,0-7.21-3.247-7.21-7.211V34.387c0-3.963,3.248-7.21,7.21-7.21h41.963c3.962,0,7.211,3.183,7.145,7.21   V62.579L78.159,62.579z"/>  <path fill="#FFFFFF" d="M37.755,44.261c-2.598,0-4.677,2.078-4.677,4.677s2.079,4.677,4.677,4.677s4.677-2.078,4.677-4.677   S40.354,44.261,37.755,44.261z"/>  <path fill="#FFFFFF" d="M50.812,44.261c-2.598,0-4.678,2.078-4.678,4.677s2.08,4.677,4.678,4.677s4.677-2.078,4.677-4.677   S53.41,44.261,50.812,44.261z"/>  <path fill="#FFFFFF" d="M63.869,44.261c-2.599,0-4.678,2.078-4.678,4.677s2.079,4.677,4.678,4.677c2.598,0,4.678-2.078,4.678-4.677   S66.466,44.261,63.869,44.261z"/>  </svg>',
        disconnectIcon: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" width="101px" height="101px" viewBox="-0.067 -0.378 101 101" enable-background="new -0.067 -0.378 101 101"    xml:space="preserve">  <defs>  </defs>  <path fill="#C12236" d="M50,0C22.431,0,0,22.43,0,50s22.429,49.999,50,49.999S100,77.57,100,50C100,22.431,77.57,0,50,0z"/>  <path fill="#FFFFFF" d="M47.346,33.809c-28.439,0.546-25.041,14.627-24.39,16.693c0.699,3.513,3.39,5.271,6.12,4.276l5.196-1.627   c2.8-1.021,4.576-4.83,3.965-8.509l-0.116-0.696c9.448-2.674,17.595-1.987,23.953-0.218l-0.052,0.297   c-0.608,3.679,1.166,7.489,3.968,8.511l5.194,2.164c2.349,0.857,4.666-0.793,5.714-3.43c0.014,0.012,0.021,0.021,0.021,0.021   s0.144-0.355,0.289-0.963c0.012-0.047,0.021-0.1,0.033-0.146c0.022-0.112,0.047-0.227,0.071-0.352   c0.015-0.07,0.031-0.137,0.045-0.209l-0.006-0.004C78.111,45.135,77.328,33.237,47.346,33.809z"/>  <path fill="#FFFFFF" d="M58.133,60.57l-5.492,2.169V50.023c0-0.242-0.196-0.439-0.438-0.439H47.8c-0.244,0-0.44,0.196-0.44,0.439   v12.714l-5.493-2.168c-0.183-0.074-0.395-0.013-0.514,0.143c-0.059,0.08-0.087,0.173-0.087,0.269c0,0.093,0.03,0.188,0.091,0.269   l8.295,10.787c0.083,0.11,0.213,0.174,0.35,0.174s0.267-0.064,0.349-0.174l8.296-10.787c0.121-0.162,0.121-0.377,0.001-0.535   C58.529,60.556,58.317,60.497,58.133,60.57z"/>  </svg>',
        freeViewModeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"  viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.43,0,50s22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.431,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M70.4,41.13v-6.21h-6.211v-6.208H23.39v30.157h6.208v6.209h6.209v6.209h40.8V41.13H70.4z M25.165,57.095   V30.486h37.253v4.434H29.599v22.175H25.165z M31.373,63.303v-4.435V36.694h32.816h4.438v4.436H35.808v22.173H31.373z M74.835,69.512   H37.582v-4.435V42.903H70.4h4.435V69.512z"/>  </svg> ',
        freeViewModeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.43,0,50s22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.431,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M70.4,41.13v-6.21h-6.211v-6.208H23.39v30.157h6.208v6.209h6.209v6.209h40.8V41.13H70.4z M25.165,57.095   V30.486h37.253v4.434H29.599v22.175H25.165z M31.373,63.303v-4.435V36.694h32.816h4.438v4.436H35.808v22.173H31.373z M74.835,69.512   H37.582v-4.435V42.903H70.4h4.435V69.512z"/>  </svg>',
        tiledViewModeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 99.998" enable-background="new 0 0 100 99.998" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.43,0,50c0,27.569,22.429,49.998,50,49.998c27.57,0,50-22.429,50-49.999   C100,22.431,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M47.901,49.1H28.116c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.785     c0.662,0,1.199,0.537,1.199,1.199V47.9C49.101,48.563,48.563,49.1,47.901,49.1z M29.315,46.701h17.387V29.314H29.315V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,49.1H52.1c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.783     c0.663,0,1.2,0.537,1.2,1.199V47.9C73.083,48.563,72.546,49.1,71.883,49.1z M53.298,46.701h17.388V29.314H53.298V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,73.082H52.1c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.783     c0.663,0,1.2,0.539,1.2,1.201v19.783C73.083,72.545,72.546,73.082,71.883,73.082z M53.298,70.685h17.388V53.297H53.298V70.685z"/>   </g>   <g>    <path fill="#FFFFFF" d="M47.901,73.082H28.116c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.785     c0.662,0,1.199,0.539,1.199,1.201v19.783C49.101,72.545,48.563,73.082,47.901,73.082z M29.315,70.685h17.387V53.297H29.315V70.685     z"/>   </g>  </g>  </svg>',
        tiledViewModeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 99.998" enable-background="new 0 0 100 99.998" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.43,0,50c0,27.569,22.429,49.998,50,49.998c27.57,0,50-22.429,50-49.999   C100,22.431,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M47.901,49.1H28.116c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.785     c0.662,0,1.199,0.537,1.199,1.199V47.9C49.101,48.563,48.563,49.1,47.901,49.1z M29.315,46.701h17.387V29.314H29.315V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,49.1H52.1c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.783     c0.663,0,1.2,0.537,1.2,1.199V47.9C73.083,48.563,72.546,49.1,71.883,49.1z M53.298,46.701h17.388V29.314H53.298V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,73.082H52.1c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.783     c0.663,0,1.2,0.539,1.2,1.201v19.783C73.083,72.545,72.546,73.082,71.883,73.082z M53.298,70.685h17.388V53.297H53.298V70.685z"/>   </g>   <g>    <path fill="#FFFFFF" d="M47.901,73.082H28.116c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.785     c0.662,0,1.199,0.539,1.199,1.201v19.783C49.101,72.545,48.563,73.082,47.901,73.082z M29.315,70.685h17.387V53.297H29.315V70.685     z"/>   </g>  </g>  </svg>',
        squaresViewModeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="101px" height="101px" viewBox="-0.5 -0.501 101 101" enable-background="new -0.5 -0.501 101 101" xml:space="preserve"> <defs> </defs> <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.43,0,50c0,27.569,22.429,49.998,50,49.998c27.57,0,50-22.429,50-49.999 C100,22.431,77.568,0,50,0z"/> <path fill="#FFFFFF" d="M71.883,61.976H52.1c-0.662,0-1.199,0.537-1.199,1.199v19.786c0,0.662,0.537,1.199,1.199,1.199h19.783 c0.663,0,1.2-0.537,1.2-1.201V63.175C73.083,62.513,72.546,61.976,71.883,61.976z M70.686,81.761H53.298V64.373h17.388V81.761z"/> <path fill="#FFFFFF" d="M47.901,61.976H28.116c-0.662,0-1.199,0.537-1.199,1.199v19.786c0,0.662,0.537,1.199,1.199,1.199h19.785 c0.662,0,1.2-0.537,1.199-1.201V63.175C49.1,62.513,48.563,61.976,47.901,61.976z M46.702,81.761H29.315V64.373h17.387V81.761z"/> <path fill="#FFFFFF" d="M47.901,37.999H28.116c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.785 c0.662,0,1.2-0.537,1.199-1.2V39.2C49.1,38.538,48.563,37.999,47.901,37.999z M46.702,57.786H29.315V40.398h17.387V57.786z"/> <path fill="#FFFFFF" d="M71.883,37.999H52.1c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.783 c0.663,0,1.2-0.537,1.2-1.2V39.2C73.083,38.538,72.546,37.999,71.883,37.999z M70.686,57.786H53.298V40.398h17.388V57.786z"/> <path fill="#FFFFFF" d="M47.901,13.957H28.116c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.785 c0.662,0,1.2-0.537,1.199-1.2V15.158C49.1,14.496,48.563,13.957,47.901,13.957z M46.702,33.744H29.315V16.356h17.387V33.744z"/> <path fill="#FFFFFF" d="M71.883,13.957H52.1c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.783 c0.663,0,1.2-0.537,1.2-1.2V15.158C73.083,14.496,72.546,13.957,71.883,13.957z M70.686,33.744H53.298V16.356h17.388V33.744z"/> <path fill="#FFFFFF" d="M71.883,85.957H52.1c-0.662,0-1.199,0.539-1.199,1.201v12.817c8.586-0.153,16.646-2.478,23.66-6.451 c-0.487,0.276-0.979,0.545-1.478,0.805v-7.171C73.083,86.496,72.546,85.957,71.883,85.957z M70.686,95.5 c-5.36,2.447-11.222,3.974-17.388,4.377V88.356h17.388V95.5z"/> <path fill="#FFFFFF" d="M46.688,0.122c-7.682,0.505-14.893,2.752-21.246,6.351c0.486-0.276,0.978-0.543,1.475-0.803v5.292 c0,0.662,0.537,1.199,1.199,1.199h19.785c0.662,0,1.2-0.537,1.199-1.201V0.023C49.4,0.018,49.698,0,50,0 c-1.109,0-2.207,0.049-3.298,0.121v9.64H29.315V4.498C34.671,2.053,40.527,0.527,46.688,0.122z"/> <path fill="#FFFFFF" d="M50.9,10.961c0,0.662,0.537,1.199,1.199,1.199h19.783c0.663,0,1.2-0.537,1.2-1.201v-5.29 c-0.787-0.411-1.587-0.801-2.397-1.171v5.263H53.298v-9.64C52.206,0.049,51.109,0,50,0c0.302,0,0.6,0.018,0.9,0.023V10.961z"/> <path fill="#FFFFFF" d="M29.321,95.504c6.049,2.76,12.737,4.346,19.779,4.472V87.158c0-0.662-0.537-1.201-1.199-1.201H28.116 c-0.662,0-1.199,0.539-1.199,1.201v7.171c-0.499-0.261-0.993-0.53-1.482-0.807c1.261,0.714,2.555,1.373,3.88,1.979v-7.145h17.387 v11.521C40.539,99.474,34.679,97.948,29.321,95.504z"/> </svg>',
        squaresViewModeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="101px" height="101px" viewBox="-0.5 -0.501 101 101" enable-background="new -0.5 -0.501 101 101" xml:space="preserve"> <defs> </defs> <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.43,0,50c0,27.569,22.429,49.998,50,49.998c27.57,0,50-22.429,50-49.999 C100,22.431,77.568,0,50,0z"/> <path fill="#FFFFFF" d="M71.883,61.976H52.1c-0.662,0-1.199,0.537-1.199,1.199v19.786c0,0.662,0.537,1.199,1.199,1.199h19.783 c0.663,0,1.2-0.537,1.2-1.201V63.175C73.083,62.513,72.546,61.976,71.883,61.976z M70.686,81.761H53.298V64.373h17.388V81.761z"/> <path fill="#FFFFFF" d="M47.901,61.976H28.116c-0.662,0-1.199,0.537-1.199,1.199v19.786c0,0.662,0.537,1.199,1.199,1.199h19.785 c0.662,0,1.2-0.537,1.199-1.201V63.175C49.1,62.513,48.563,61.976,47.901,61.976z M46.702,81.761H29.315V64.373h17.387V81.761z"/> <path fill="#FFFFFF" d="M47.901,37.999H28.116c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.785 c0.662,0,1.2-0.537,1.199-1.2V39.2C49.1,38.538,48.563,37.999,47.901,37.999z M46.702,57.786H29.315V40.398h17.387V57.786z"/> <path fill="#FFFFFF" d="M71.883,37.999H52.1c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.783 c0.663,0,1.2-0.537,1.2-1.2V39.2C73.083,38.538,72.546,37.999,71.883,37.999z M70.686,57.786H53.298V40.398h17.388V57.786z"/> <path fill="#FFFFFF" d="M47.901,13.957H28.116c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.785 c0.662,0,1.2-0.537,1.199-1.2V15.158C49.1,14.496,48.563,13.957,47.901,13.957z M46.702,33.744H29.315V16.356h17.387V33.744z"/> <path fill="#FFFFFF" d="M71.883,13.957H52.1c-0.662,0-1.199,0.539-1.199,1.201v19.783c0,0.663,0.537,1.2,1.199,1.2h19.783 c0.663,0,1.2-0.537,1.2-1.2V15.158C73.083,14.496,72.546,13.957,71.883,13.957z M70.686,33.744H53.298V16.356h17.388V33.744z"/> <path fill="#FFFFFF" d="M71.883,85.957H52.1c-0.662,0-1.199,0.539-1.199,1.201v12.817c8.586-0.153,16.646-2.478,23.66-6.451 c-0.487,0.276-0.979,0.545-1.478,0.805v-7.171C73.083,86.496,72.546,85.957,71.883,85.957z M70.686,95.5 c-5.36,2.447-11.222,3.974-17.388,4.377V88.356h17.388V95.5z"/> <path fill="#FFFFFF" d="M46.688,0.122c-7.682,0.505-14.893,2.752-21.246,6.351c0.486-0.276,0.978-0.543,1.475-0.803v5.292 c0,0.662,0.537,1.199,1.199,1.199h19.785c0.662,0,1.2-0.537,1.199-1.201V0.023C49.4,0.018,49.698,0,50,0 c-1.109,0-2.207,0.049-3.298,0.121v9.64H29.315V4.498C34.671,2.053,40.527,0.527,46.688,0.122z"/> <path fill="#FFFFFF" d="M50.9,10.961c0,0.662,0.537,1.199,1.199,1.199h19.783c0.663,0,1.2-0.537,1.2-1.201v-5.29 c-0.787-0.411-1.587-0.801-2.397-1.171v5.263H53.298v-9.64C52.206,0.049,51.109,0,50,0c0.302,0,0.6,0.018,0.9,0.023V10.961z"/> <path fill="#FFFFFF" d="M29.321,95.504c6.049,2.76,12.737,4.346,19.779,4.472V87.158c0-0.662-0.537-1.201-1.199-1.201H28.116 c-0.662,0-1.199,0.539-1.199,1.201v7.171c-0.499-0.261-0.993-0.53-1.482-0.807c1.261,0.714,2.555,1.373,3.88,1.979v-7.145h17.387 v11.521C40.539,99.474,34.679,97.948,29.321,95.504z"/> </svg>',
        loudestExceptMeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M46.013,40.045c4.317,0,7.818-3.5,7.818-7.819c-0.005-4.315-3.503-7.813-7.818-7.818   c-4.318,0-7.818,3.501-7.818,7.818C38.194,36.544,41.695,40.045,46.013,40.045z"/>  <g>   <path fill="#4AAA4E" d="M61,54.463v-4.871c0-3.671-2.686-6.709-6.352-6.938c-2.137,2.683-5.294,4.247-8.724,4.247    c-3.429,0-6.467-1.564-8.603-4.247C33.657,42.882,31,45.919,31,49.592V66h15.396l-0.888-2.303c-0.101-0.275-0.051-0.508,0.13-0.739    c0.181-0.232,0.469-0.319,0.763-0.291l3.488,0.382L61,54.463z"/>   <path fill="#4AAA4E" d="M50.844,64.646c-0.174,0.133-0.391,0.194-0.608,0.173l-2.638-0.26l2.586,7.176l1.863-1.884    c0.155-0.154,0.361-0.246,0.58-0.254l18.908-0.765l-5.64-15.659L50.844,64.646z"/>   <polygon fill="#4AAA4E" points="56.439,71.172 57.945,75.35 66.336,72.326 65.785,70.794  "/>   <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z     M46.013,22.681c5.271,0,9.546,4.273,9.546,9.545c0,5.272-4.274,9.546-9.546,9.546c-5.272,0-9.546-4.274-9.546-9.546    C36.473,26.958,40.743,22.688,46.013,22.681z M73.465,70.13c-0.154,0.229-0.408,0.371-0.683,0.382l-5.188,0.211l0.659,1.831    c0.162,0.448-0.071,0.943-0.521,1.105l-10.017,3.608c-0.215,0.077-0.452,0.066-0.66-0.031c-0.208-0.097-0.368-0.272-0.445-0.488    l-1.982-5.504l-1.593,0.065l-2.589,2.611c-0.209,0.211-0.512,0.3-0.802,0.233s-0.525-0.289-0.624-0.57L47.02,68H29.806    c-0.226,0-0.419-0.068-0.581-0.227C29.064,67.613,29,67.41,29,67.184V49.592c0-4.784,3.857-8.661,8.642-8.66    c0.274-0.003,0.521,0.125,0.684,0.345c1.803,2.446,4.655,3.89,7.694,3.889s5.893-1.445,7.696-3.891    c0.164-0.22,0.39-0.348,0.663-0.343c4.782,0,8.621,3.879,8.621,8.66v3.554l2.744-2.06c0.223-0.167,0.526-0.219,0.794-0.142    c0.263,0.077,0.481,0.277,0.574,0.535l6.444,17.877C73.649,69.615,73.617,69.903,73.465,70.13z M74.719,63.705    c-0.13,0.281-0.401,0.469-0.71,0.495c-0.309,0.025-0.606-0.115-0.783-0.371c-0.176-0.257-0.2-0.585-0.065-0.864    c0.523-1.1,0.585-2.364,0.169-3.509c-0.44-1.224-1.354-2.22-2.534-2.766c-0.433-0.202-0.617-0.717-0.414-1.149    c0.203-0.432,0.717-0.615,1.148-0.413c1.598,0.739,2.832,2.088,3.426,3.746C75.526,60.451,75.442,62.19,74.719,63.705z     M78.168,64.801c-0.202,0.431-0.718,0.617-1.15,0.413c-0.431-0.202-0.615-0.717-0.413-1.149c0.877-1.878,0.955-4.033,0.213-5.971    c-0.719-1.96-2.18-3.557-4.067-4.446c-0.284-0.131-0.473-0.4-0.501-0.71s0.114-0.609,0.37-0.787    c0.255-0.176,0.586-0.201,0.865-0.066c2.297,1.082,4.077,3.022,4.95,5.408C79.34,59.864,79.244,62.502,78.168,64.801z"/>  </g>  </svg>',
        loudestExceptMeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M46.013,40.045c4.317,0,7.818-3.5,7.818-7.819c-0.005-4.315-3.503-7.813-7.818-7.818   c-4.318,0-7.818,3.501-7.818,7.818C38.194,36.544,41.695,40.045,46.013,40.045z"/>  <g>   <path fill="#8C8C8C" d="M61,54.463v-4.871c0-3.671-2.686-6.709-6.352-6.938c-2.137,2.683-5.294,4.247-8.725,4.247    c-3.429,0-6.467-1.564-8.603-4.247C33.657,42.882,31,45.919,31,49.592V66h15.396l-0.888-2.303c-0.101-0.275-0.051-0.508,0.13-0.739    c0.181-0.231,0.469-0.319,0.763-0.291l3.488,0.382L61,54.463z"/>   <path fill="#8C8C8C" d="M50.844,64.646c-0.174,0.133-0.391,0.193-0.608,0.172l-2.638-0.26l2.586,7.176l1.863-1.883    c0.155-0.154,0.361-0.246,0.58-0.254l18.908-0.766l-5.641-15.659L50.844,64.646z"/>   <polygon fill="#8C8C8C" points="56.439,71.172 57.945,75.35 66.336,72.326 65.785,70.794  "/>   <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z     M46.013,22.681c5.271,0,9.545,4.273,9.545,9.545s-4.273,9.546-9.545,9.546s-9.546-4.274-9.546-9.546    C36.473,26.958,40.743,22.688,46.013,22.681z M73.465,70.13c-0.154,0.229-0.408,0.371-0.683,0.382l-5.188,0.211l0.659,1.832    c0.162,0.447-0.071,0.942-0.521,1.104l-10.018,3.608c-0.215,0.076-0.451,0.065-0.66-0.031c-0.207-0.098-0.367-0.272-0.445-0.488    l-1.981-5.504l-1.593,0.064l-2.589,2.611c-0.209,0.211-0.512,0.301-0.802,0.232c-0.29-0.066-0.525-0.288-0.624-0.569l-2-5.583    H29.806c-0.226,0-0.419-0.068-0.581-0.227C29.064,67.613,29,67.41,29,67.184V49.592c0-4.784,3.857-8.661,8.642-8.66    c0.274-0.003,0.521,0.125,0.684,0.345c1.803,2.446,4.655,3.89,7.694,3.889s5.893-1.445,7.696-3.891    c0.164-0.22,0.39-0.348,0.663-0.343c4.782,0,8.621,3.879,8.621,8.66v3.555l2.744-2.061c0.223-0.167,0.525-0.219,0.794-0.143    c0.263,0.078,0.481,0.277,0.573,0.535l6.445,17.877C73.648,69.615,73.617,69.902,73.465,70.13z M74.719,63.705    c-0.13,0.281-0.4,0.469-0.71,0.495c-0.309,0.024-0.606-0.115-0.782-0.371c-0.177-0.257-0.201-0.585-0.065-0.864    c0.522-1.1,0.585-2.363,0.169-3.509c-0.439-1.224-1.354-2.22-2.534-2.767c-0.433-0.201-0.616-0.717-0.414-1.148    c0.203-0.432,0.718-0.615,1.147-0.413c1.599,0.739,2.832,2.088,3.427,3.746C75.525,60.451,75.441,62.189,74.719,63.705z     M78.168,64.801c-0.202,0.432-0.718,0.617-1.15,0.413c-0.431-0.202-0.615-0.717-0.412-1.149c0.877-1.877,0.955-4.032,0.213-5.971    c-0.719-1.96-2.18-3.557-4.067-4.445c-0.284-0.131-0.474-0.4-0.501-0.711c-0.027-0.31,0.113-0.608,0.37-0.787    c0.255-0.176,0.586-0.2,0.864-0.065c2.298,1.082,4.078,3.022,4.951,5.408C79.34,59.864,79.244,62.502,78.168,64.801z"/>  </g>  </svg>',
        maximizeLoudestOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <g>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0,0.759,0,1.466,0,2.206c0.736,0,1.44,0,2.172,0    c0-0.746,0-1.464,0-2.206C69.553,52.013,68.86,52.013,68.106,52.013z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0,0.756,0,1.46,0,2.191c0.737,0,1.442,0,2.167,0    c0-0.746,0-1.464,0-2.191C69.546,43.063,68.854,43.063,68.108,43.063z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0,0.763,0,1.465,0,2.171c0.742,0,1.447,0,2.165,0    c0-0.735,0-1.439,0-2.171C69.556,47.56,68.851,47.56,68.12,47.56z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M38.971,54.247c0,0,0,1.017,0,1.485    c-0.001,1.94-0.003,3.882-0.003,5.822c0,1.295,0.347,1.638,1.653,1.635c0.173,0,0.347,0,0.595,0c0-0.217,0-0.402,0-0.589    c0.002-1.625-0.009-3.251,0.011-4.877c0.011-0.93,0.768-1.474,1.539-1.139c0.448,0.195,0.675,0.566,0.678,1.036    c0.012,2.22,0.019,4.44-0.002,6.661c-0.007,0.707-0.457,1.112-1.181,1.133c-0.716,0.021-1.434,0.026-2.15,0    c-1.998-0.068-3.357-1.459-3.37-3.464c-0.016-2.36-0.004-4.721-0.004-7.081c0-0.188,0-0.376,0-0.628    c-1.301,0.052-2.527-0.028-3.492-0.992c-0.957-0.957-1.042-2.163-0.985-3.488c-0.355,0-0.679,0.009-1.003-0.002    c-0.727-0.025-1.218-0.473-1.228-1.103c-0.009-0.626,0.482-1.09,1.202-1.121c0.312-0.013,0.624-0.002,0.986-0.002    c0.026-0.487,0.027-0.936,0.078-1.378c0.213-1.887,1.545-3.089,3.453-3.104c1.958-0.016,3.916,0.002,5.874-0.016    c0.283-0.002,0.59-0.076,0.844-0.202c3.769-1.87,7.537-3.74,11.29-5.641c1.166-0.59,2.364-0.927,3.675-0.867    c0.575,0.026,1.154-0.008,1.73,0.013c1.151,0.044,2.08,0.823,2.146,1.968c0.091,1.55,0.05,3.109,0.063,4.664    c0.004,0.381,0,0.763,0,1.187c1.535,0.085,2.763,0.698,3.643,1.922c0.564,0.789,0.835,1.682,0.807,2.659    c-0.067,2.354-1.503,3.799-4.45,4.43c0,0.682,0,1.376,0,2.071c0,1.084,0.01,2.168-0.004,3.252    c-0.018,1.542-0.914,2.448-2.448,2.465c-1.063,0.012-2.137,0.065-3.189-0.051c-0.578-0.064-1.136-0.411-1.679-0.68    c-3.751-1.866-7.499-3.739-11.239-5.627c-0.499-0.253-0.993-0.384-1.552-0.36C40.524,54.24,38.971,54.247,38.971,54.247z     M59.08,38.572c-1.33,0.029-2.648-0.199-3.884,0.417c-3.812,1.902-7.623,3.806-11.425,5.727c-0.152,0.077-0.304,0.33-0.306,0.503    c-0.02,2.272-0.009,4.546-0.019,6.818c-0.001,0.277,0.07,0.433,0.334,0.563c3.487,1.731,6.968,3.476,10.452,5.216    c0.113,0.057,0.244,0.084,0.415,0.142c0-0.24,0-0.413,0-0.587c0.002-4.982,0.002-9.966,0.005-14.949    c0-0.226-0.002-0.456,0.033-0.68c0.077-0.514,0.488-0.876,1.001-0.908c0.525-0.033,0.973,0.253,1.113,0.762    c0.068,0.248,0.078,0.517,0.078,0.776c0.006,5.229,0.004,10.456,0.004,15.684c0,0.204,0,0.407,0,0.615c0.773,0,1.48,0,2.199,0    C59.08,51.965,59.08,45.294,59.08,38.572z M41.151,45.345c-0.077-0.026-0.125-0.057-0.174-0.058    c-1.748-0.004-3.497-0.024-5.245,0.001c-0.825,0.012-1.218,0.463-1.224,1.313c-0.01,1.329-0.003,2.657,0.002,3.986    c0.004,1.012,0.385,1.4,1.386,1.405c1.451,0.005,2.902,0.001,4.353,0.001c0.291,0,0.583,0,0.901,0    C41.151,49.73,41.151,47.537,41.151,45.345z M61.394,50.833c1.271-0.031,2.218-1.014,2.195-2.234    c-0.023-1.203-1.011-2.181-2.195-2.143C61.394,47.9,61.394,49.345,61.394,50.833z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0.754,0,1.446,0,2.172,0c0,0.742,0,1.46,0,2.206    c-0.731,0-1.436,0-2.172,0C68.106,53.479,68.106,52.771,68.106,52.013z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0.746,0,1.438,0,2.167,0c0,0.728,0,1.446,0,2.191    c-0.725,0-1.43,0-2.167,0C68.108,44.523,68.108,43.818,68.108,43.063z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0.73,0,1.436,0,2.165,0c0,0.732,0,1.437,0,2.171    c-0.718,0-1.423,0-2.165,0C68.12,49.025,68.12,48.323,68.12,47.56z"/>   <path fill="#FFFFFF" d="M26.444,69.789c-0.091,0-0.184-0.012-0.277-0.035l-0.79-0.197c-0.805-0.201-1.595-0.945-1.878-1.769    c-0.256-0.744-0.35-2.642-0.35-3.735V33.115c0-2.022,1.646-3.668,3.667-3.668h40.061c0.629,0,1.138,0.51,1.138,1.139    c0,0.628-0.509,1.138-1.138,1.138H26.817c-0.767,0-1.391,0.624-1.391,1.392v30.938c0,1.507,0.147,2.752,0.227,2.997    c0.032,0.093,0.199,0.267,0.292,0.303l0.775,0.193c0.61,0.152,0.981,0.771,0.828,1.38C27.418,69.443,26.955,69.789,26.444,69.789z"    />   <path fill="#FFFFFF" d="M31.022,76.553c-0.122,0-0.242-0.019-0.354-0.059c-0.481-0.172-0.792-0.638-0.792-1.184v-6.789    c0-0.629,0.509-1.138,1.138-1.138c0.628,0,1.138,0.509,1.138,1.138v4.201c0.008-0.009,0.017-0.018,0.026-0.026l2.723-2.715    c1.087-1.085,1.833-1.849,1.933-1.961c0.121-0.145,0.587-0.637,1.224-0.637h35.125c0.768,0,1.392-0.624,1.392-1.392V33.115    c0-0.741-0.475-1.392-1.015-1.392h-2.15c-0.629,0-1.138-0.509-1.138-1.138c0-0.629,0.509-1.139,1.138-1.139h2.15    c1.814,0,3.29,1.646,3.29,3.668v32.877c0,2.022-1.645,3.667-3.667,3.667H38.417c-0.49,0.518-1.843,1.868-1.908,1.934l-2.723,2.716    c-0.924,0.922-1.724,1.727-1.837,1.849C31.72,76.403,31.365,76.553,31.022,76.553z"/>  </g>  </svg>',
        maximizeLoudestOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px"    height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <g id="Layer_1">   <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"    />   <g>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0,0.759,0,1.466,0,2.206c0.736,0,1.44,0,2.172,0     c0-0.746,0-1.464,0-2.206C69.553,52.013,68.86,52.013,68.106,52.013z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0,0.756,0,1.46,0,2.191c0.737,0,1.442,0,2.167,0     c0-0.746,0-1.464,0-2.191C69.546,43.063,68.854,43.063,68.108,43.063z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0,0.763,0,1.465,0,2.171c0.742,0,1.447,0,2.165,0     c0-0.735,0-1.439,0-2.171C69.556,47.56,68.851,47.56,68.12,47.56z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M38.971,54.247c0,0,0,1.017,0,1.485     c-0.001,1.94-0.003,3.882-0.003,5.822c0,1.295,0.347,1.638,1.653,1.635c0.173,0,0.347,0,0.595,0c0-0.217,0-0.402,0-0.589     c0.002-1.625-0.009-3.251,0.011-4.877c0.011-0.93,0.768-1.474,1.539-1.139c0.448,0.195,0.675,0.566,0.678,1.036     c0.012,2.22,0.019,4.44-0.002,6.661c-0.007,0.707-0.457,1.112-1.181,1.133c-0.716,0.021-1.434,0.026-2.15,0     c-1.998-0.068-3.357-1.459-3.37-3.464c-0.016-2.36-0.004-4.721-0.004-7.081c0-0.188,0-0.376,0-0.628     c-1.301,0.052-2.527-0.028-3.492-0.992c-0.957-0.957-1.042-2.163-0.985-3.488c-0.355,0-0.679,0.009-1.003-0.002     c-0.727-0.025-1.218-0.473-1.228-1.103c-0.009-0.626,0.482-1.09,1.202-1.121c0.312-0.013,0.624-0.002,0.986-0.002     c0.026-0.487,0.027-0.936,0.078-1.378c0.213-1.887,1.545-3.089,3.453-3.104c1.958-0.016,3.916,0.002,5.874-0.016     c0.283-0.002,0.59-0.076,0.844-0.202c3.769-1.87,7.537-3.74,11.29-5.641c1.166-0.59,2.364-0.927,3.675-0.867     c0.575,0.026,1.154-0.008,1.73,0.013c1.151,0.044,2.08,0.823,2.146,1.968c0.091,1.55,0.05,3.109,0.063,4.664     c0.004,0.381,0,0.763,0,1.187c1.535,0.085,2.763,0.698,3.643,1.922c0.564,0.789,0.835,1.682,0.807,2.659     c-0.067,2.354-1.503,3.799-4.45,4.43c0,0.682,0,1.376,0,2.071c0,1.084,0.01,2.168-0.004,3.252     c-0.018,1.542-0.914,2.448-2.448,2.465c-1.063,0.012-2.137,0.065-3.189-0.051c-0.578-0.064-1.136-0.411-1.679-0.68     c-3.751-1.866-7.499-3.739-11.239-5.627c-0.499-0.253-0.993-0.384-1.552-0.36C40.524,54.24,38.971,54.247,38.971,54.247z      M59.08,38.572c-1.33,0.029-2.648-0.199-3.884,0.417c-3.812,1.902-7.623,3.806-11.425,5.727c-0.152,0.077-0.304,0.33-0.306,0.503     c-0.02,2.272-0.009,4.546-0.019,6.818c-0.001,0.277,0.07,0.433,0.334,0.563c3.487,1.731,6.968,3.476,10.452,5.216     c0.113,0.057,0.244,0.084,0.415,0.142c0-0.24,0-0.413,0-0.587c0.002-4.982,0.002-9.966,0.005-14.949     c0-0.226-0.002-0.456,0.033-0.68c0.077-0.514,0.488-0.876,1.001-0.908c0.525-0.033,0.973,0.253,1.113,0.762     c0.068,0.248,0.078,0.517,0.078,0.776c0.006,5.229,0.004,10.456,0.004,15.684c0,0.204,0,0.407,0,0.615c0.773,0,1.48,0,2.199,0     C59.08,51.965,59.08,45.294,59.08,38.572z M41.151,45.345c-0.077-0.026-0.125-0.057-0.174-0.058     c-1.748-0.004-3.497-0.024-5.245,0.001c-0.825,0.012-1.218,0.463-1.224,1.313c-0.01,1.329-0.003,2.657,0.002,3.986     c0.004,1.012,0.385,1.4,1.386,1.405c1.451,0.005,2.902,0.001,4.353,0.001c0.291,0,0.583,0,0.901,0     C41.151,49.73,41.151,47.537,41.151,45.345z M61.394,50.833c1.271-0.031,2.218-1.014,2.195-2.234     c-0.023-1.203-1.011-2.181-2.195-2.143C61.394,47.9,61.394,49.345,61.394,50.833z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0.754,0,1.446,0,2.172,0c0,0.742,0,1.46,0,2.206     c-0.731,0-1.436,0-2.172,0C68.106,53.479,68.106,52.771,68.106,52.013z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0.746,0,1.438,0,2.167,0c0,0.728,0,1.446,0,2.191     c-0.725,0-1.43,0-2.167,0C68.108,44.523,68.108,43.818,68.108,43.063z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0.73,0,1.436,0,2.165,0c0,0.732,0,1.437,0,2.171     c-0.718,0-1.423,0-2.165,0C68.12,49.025,68.12,48.323,68.12,47.56z"/>    <path fill="#FFFFFF" d="M26.444,69.789c-0.091,0-0.184-0.012-0.277-0.035l-0.79-0.197c-0.805-0.201-1.595-0.945-1.878-1.769     c-0.256-0.744-0.35-2.642-0.35-3.735V33.115c0-2.022,1.646-3.668,3.667-3.668h40.061c0.629,0,1.138,0.51,1.138,1.139     c0,0.628-0.509,1.138-1.138,1.138H26.817c-0.767,0-1.391,0.624-1.391,1.392v30.938c0,1.507,0.147,2.752,0.227,2.997     c0.032,0.093,0.199,0.267,0.292,0.303l0.775,0.193c0.61,0.152,0.981,0.771,0.828,1.38C27.418,69.443,26.955,69.789,26.444,69.789z     "/>    <path fill="#FFFFFF" d="M31.022,76.553c-0.122,0-0.242-0.019-0.354-0.059c-0.481-0.172-0.792-0.638-0.792-1.184v-6.789     c0-0.629,0.509-1.138,1.138-1.138c0.628,0,1.138,0.509,1.138,1.138v4.201c0.008-0.009,0.017-0.018,0.026-0.026l2.723-2.715     c1.087-1.085,1.833-1.849,1.933-1.961c0.121-0.145,0.587-0.637,1.224-0.637h35.125c0.768,0,1.392-0.624,1.392-1.392V33.115     c0-0.741-0.475-1.392-1.015-1.392h-2.15c-0.629,0-1.138-0.509-1.138-1.138c0-0.629,0.509-1.139,1.138-1.139h2.15     c1.814,0,3.29,1.646,3.29,3.668v32.877c0,2.022-1.645,3.667-3.667,3.667H38.417c-0.49,0.518-1.843,1.868-1.908,1.934l-2.723,2.716     c-0.924,0.922-1.724,1.727-1.837,1.849C31.72,76.403,31.365,76.553,31.022,76.553z"/>   </g>  </g>  <g id="Layer_3">  </g>  </svg>',
        staticMaximizeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"     viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M73.238,74.392h-21.52c-0.663,0-1.2-0.537-1.2-1.2s0.537-1.2,1.2-1.2h20.319V30.007H29.97v20.111     c0,0.663-0.538,1.2-1.2,1.2s-1.2-0.537-1.2-1.2V28.807c0-0.663,0.538-1.2,1.2-1.2h44.468c0.663,0,1.2,0.538,1.2,1.2v44.384     C74.438,73.854,73.901,74.392,73.238,74.392z"/>   </g>   <g>    <path fill="#FFFFFF" d="M49.758,53.38c-0.307,0-0.614-0.117-0.849-0.352c-0.469-0.469-0.468-1.229,0-1.697l14.785-14.776     c0.47-0.469,1.229-0.468,1.697,0c0.469,0.469,0.469,1.229,0,1.697L50.606,53.028C50.372,53.263,50.065,53.38,49.758,53.38z"/>   </g>   <g>    <path fill="#FFFFFF" d="M65.046,48.662c-0.663,0-1.2-0.538-1.2-1.2v-9.359h-9.359c-0.663,0-1.2-0.538-1.2-1.2s0.537-1.2,1.2-1.2     h10.56c0.663,0,1.2,0.538,1.2,1.2v10.56C66.246,48.124,65.709,48.662,65.046,48.662z"/>   </g>   <g>    <path fill="#FFFFFF" d="M44.989,74.392H28.77c-0.663,0-1.2-0.537-1.2-1.2V56.982c0-0.663,0.538-1.2,1.2-1.2h16.219     c0.663,0,1.2,0.537,1.2,1.2v16.209C46.189,73.854,45.651,74.392,44.989,74.392z M29.97,71.991h13.818V58.183H29.97V71.991z"/>   </g>  </g>  </svg>',
        staticMaximizeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M73.238,74.392h-21.52c-0.663,0-1.2-0.537-1.2-1.2s0.537-1.2,1.2-1.2h20.319V30.007H29.97v20.111     c0,0.663-0.538,1.2-1.2,1.2s-1.2-0.537-1.2-1.2V28.807c0-0.663,0.538-1.2,1.2-1.2h44.468c0.663,0,1.2,0.538,1.2,1.2v44.384     C74.438,73.854,73.901,74.392,73.238,74.392z"/>   </g>   <g>    <path fill="#FFFFFF" d="M49.758,53.38c-0.307,0-0.614-0.117-0.849-0.352c-0.469-0.469-0.468-1.229,0-1.697l14.785-14.776     c0.47-0.469,1.229-0.468,1.697,0c0.469,0.469,0.469,1.229,0,1.697L50.606,53.028C50.372,53.263,50.065,53.38,49.758,53.38z"/>   </g>   <g>    <path fill="#FFFFFF" d="M65.046,48.662c-0.663,0-1.2-0.538-1.2-1.2v-9.359h-9.359c-0.663,0-1.2-0.538-1.2-1.2s0.537-1.2,1.2-1.2     h10.56c0.663,0,1.2,0.538,1.2,1.2v10.56C66.246,48.124,65.709,48.662,65.046,48.662z"/>   </g>   <g>    <path fill="#FFFFFF" d="M44.989,74.392H28.77c-0.663,0-1.2-0.537-1.2-1.2V56.982c0-0.663,0.538-1.2,1.2-1.2h16.219     c0.663,0,1.2,0.537,1.2,1.2v16.209C46.189,73.854,45.651,74.392,44.989,74.392z M29.97,71.991h13.818V58.183H29.97V71.991z"/>   </g>  </g>  </svg>',
        audioLayoutOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="101px" height="101px" viewBox="-0.5 -0.5 101 101" enable-background="new -0.5 -0.5 101 101" xml:space="preserve"> <defs> </defs> <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/> <path fill="#FFFFFF" d="M50.693,69.547c-7.508,0-14.418-5.713-14.418-13.875h-4.625c0,9.291,7.399,16.963,16.323,18.282v8.924h5.441 v-8.924c8.924-1.319,16.323-8.991,16.323-18.282h-4.625C65.112,63.834,58.215,69.547,50.693,69.547z"/> <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M50.179,13.122c-0.28-0.004-0.4,0.051-0.396,0.363 c0.013,1.53,0.011,3.062-0.002,4.591c-0.002,0.288,0.079,0.397,0.377,0.397c0.962,0.004,1.92,0.073,2.867,0.232 c6.193,1.042,11.082,4.152,14.601,9.351c2.316,3.423,3.482,7.237,3.563,11.374c0.006,0.351,0.105,0.462,0.458,0.45 c0.735-0.027,1.472-0.008,2.205-0.008c0.766,0,1.532-0.014,2.297,0.007c0.319,0.008,0.398-0.092,0.392-0.408 c-0.05-2.273-0.355-4.508-0.961-6.7C72.428,21.385,62.157,13.314,50.179,13.122z"/> <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M57.941,24.157c-2.41-1.303-5.018-1.946-7.765-1.986 c-0.216-0.004-0.401-0.035-0.398,0.305c0.017,1.515,0.012,3.031,0.002,4.547c-0.002,0.263,0.099,0.315,0.345,0.322 c0.932,0.023,1.852,0.147,2.756,0.382c5.408,1.407,9.226,6.142,9.44,11.73c0.013,0.333,0.092,0.437,0.43,0.425 c0.72-0.026,1.44-0.008,2.161-0.008c0,0,0,0,0-0.001c0.749,0,1.501-0.008,2.25,0.004c0.252,0.004,0.336-0.072,0.336-0.331 c0.001-0.648-0.038-1.293-0.135-1.93C66.448,31.576,63.322,27.063,57.941,24.157z"/> <path fill="#FFFFFF" d="M50.693,31.186c-4.504,0-8.162,3.645-8.162,8.162v16.324c0,4.504,3.657,8.162,8.162,8.162 c4.503,0,8.137-3.658,8.137-8.162l0.025-16.324C58.855,34.831,55.21,31.186,50.693,31.186z M50.701,43.537 c-2.048,0.002-3.663-1.599-3.669-3.637c-0.006-2.035,1.617-3.676,3.639-3.683c2.015-0.006,3.675,1.639,3.683,3.653 C54.364,41.894,52.729,43.534,50.701,43.537z"/> </svg>',
        audioLayoutOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="101px" height="101px" viewBox="-0.5 -0.5 101 101" enable-background="new -0.5 -0.5 101 101" xml:space="preserve"> <defs> </defs> <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/> <path fill="#FFFFFF" d="M50.693,69.547c-7.508,0-14.418-5.713-14.418-13.875h-4.625c0,9.291,7.399,16.963,16.323,18.282v8.924h5.441 v-8.924c8.924-1.319,16.323-8.991,16.323-18.282h-4.625C65.112,63.834,58.215,69.547,50.693,69.547z"/> <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M50.179,13.122c-0.28-0.004-0.4,0.051-0.396,0.363 c0.013,1.53,0.011,3.062-0.002,4.591c-0.002,0.288,0.079,0.397,0.377,0.397c0.962,0.004,1.92,0.073,2.867,0.232 c6.193,1.042,11.082,4.152,14.601,9.351c2.316,3.423,3.482,7.237,3.563,11.374c0.006,0.351,0.105,0.462,0.458,0.45 c0.735-0.027,1.472-0.008,2.205-0.008c0.766,0,1.532-0.014,2.297,0.007c0.319,0.008,0.398-0.092,0.392-0.408 c-0.05-2.273-0.355-4.508-0.961-6.7C72.428,21.385,62.157,13.314,50.179,13.122z"/> <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M57.941,24.157c-2.41-1.303-5.018-1.946-7.765-1.986 c-0.216-0.004-0.401-0.035-0.398,0.305c0.017,1.515,0.012,3.031,0.002,4.547c-0.002,0.263,0.099,0.315,0.345,0.322 c0.932,0.023,1.852,0.147,2.756,0.382c5.408,1.407,9.226,6.142,9.44,11.73c0.013,0.333,0.092,0.437,0.43,0.425 c0.72-0.026,1.44-0.008,2.161-0.008c0,0,0,0,0-0.001c0.749,0,1.501-0.008,2.25,0.004c0.252,0.004,0.336-0.072,0.336-0.331 c0.001-0.648-0.038-1.293-0.135-1.93C66.448,31.576,63.322,27.063,57.941,24.157z"/> <path fill="#FFFFFF" d="M50.693,31.186c-4.504,0-8.162,3.645-8.162,8.162v16.324c0,4.504,3.657,8.162,8.162,8.162 c4.503,0,8.137-3.658,8.137-8.162l0.025-16.324C58.855,34.831,55.21,31.186,50.693,31.186z M50.701,43.537 c-2.048,0.002-3.663-1.599-3.669-3.637c-0.006-2.035,1.617-3.676,3.639-3.683c2.015-0.006,3.675,1.639,3.683,3.653 C54.364,41.894,52.729,43.534,50.701,43.537z"/> </svg>',
        goFoolscreen: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" width="49px" height="49px" viewBox="-0.07 -0.107 49 49" enable-background="new -0.07 -0.107 49 49"    xml:space="preserve">  <defs>  </defs>  <path fill="#8C8C8C" stroke="#8C8C8C" stroke-width="2" stroke-miterlimit="10" d="M46.668,47.786H25.148   c-0.663,0-1.2-0.537-1.2-1.201c0-0.662,0.537-1.199,1.2-1.199h20.319V3.4H3.4v20.111c0,0.663-0.538,1.2-1.2,1.2S1,24.174,1,23.511   V2.2C1,1.537,1.538,1,2.2,1h44.468c0.662,0,1.199,0.538,1.199,1.2v44.384C47.868,47.247,47.331,47.786,46.668,47.786z"/>  <path fill="#8C8C8C" stroke="#8C8C8C" stroke-width="2" stroke-miterlimit="10" d="M23.188,26.773c-0.307,0-0.614-0.116-0.849-0.353   c-0.469-0.469-0.468-1.229,0-1.696L37.124,9.948c0.471-0.469,1.229-0.468,1.697,0c0.469,0.469,0.469,1.229,0,1.697L24.036,26.42   C23.802,26.657,23.495,26.773,23.188,26.773z"/>  <path fill="#8C8C8C" stroke="#8C8C8C" stroke-width="2" stroke-miterlimit="10" d="M38.476,22.055c-0.663,0-1.2-0.538-1.2-1.2   v-9.359h-9.359c-0.662,0-1.199-0.538-1.199-1.2c0-0.662,0.537-1.2,1.199-1.2h10.561c0.663,0,1.2,0.538,1.2,1.2v10.56   C39.676,21.517,39.139,22.055,38.476,22.055z"/>  <path fill="#8C8C8C" stroke="#8C8C8C" stroke-width="2" stroke-miterlimit="10" d="M18.419,47.786H2.2c-0.663,0-1.2-0.537-1.2-1.201   V30.375c0-0.664,0.538-1.2,1.2-1.2h16.219c0.663,0,1.2,0.536,1.2,1.2v16.209C19.619,47.247,19.081,47.786,18.419,47.786z    M3.4,45.384h13.818V31.577H3.4V45.384z"/>  </svg>',
        facebooklogo: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#1877F2" d="M50,0C22.3857422,0,0,22.3857422,0,50c0,25.6513672,19.3173828,46.7910156,44.1982422,49.6660156   c0-11.5039063,0-23.0068359,0-34.5107422c-4.2099609-0.03125-8.5439453,0.0625-12.6748047-0.046875   c0.03125-4.7861328-0.0625-9.6972656,0.0458984-14.4052734c4.2099609,0,8.4189453,0,12.6289063,0   c0.1933594-5.2246094-0.3769531-10.6503906,0.2802734-15.0605469c1.2792969-8.5859375,6.7324219-14.1972656,15.5751953-15.1542969   c4.7587891-0.5146484,9.7216797,0.1660156,14.171875,0.8427734c-0.03125,4.0683594,0.0615234,8.2626953-0.046875,12.2539063   c-2.7724609,0.0996094-5.40625-0.1748047-7.7646484,0.09375c-2.2597656,0.2558594-3.9492188,1.1113281-5.1445313,2.7119141   c-1.2519531,1.6767578-1.4501953,3.5166016-1.4501953,6.4082031c0,2.5195313,0,5.3271484,0,7.9042969   c4.5839844,0.03125,9.2919922-0.0625,13.7978516,0.046875c-0.734375,4.8164063-1.4101563,9.6894531-2.2451172,14.4052734   c-3.8505859,0-7.7011719,0-11.5527344,0c0,11.2939453,0,22.5869141,0,33.8808594C82.7314453,94.4726563,100,74.2529297,100,50   C100,22.3857422,77.6142578,0,50,0z"/>  <path fill="#FFFFFF" d="M71.3720703,65.1552734c0.8349609-4.7158203,1.5107422-9.5888672,2.2451172-14.4052734   c-4.5058594-0.109375-9.2138672-0.015625-13.7978516-0.046875c0-2.5771484,0-5.3847656,0-7.9042969   c0-2.8916016,0.1982422-4.7314453,1.4501953-6.4082031c1.1953125-1.6005859,2.8847656-2.4560547,5.1445313-2.7119141   c2.3583984-0.2685547,4.9921875,0.0058594,7.7646484-0.09375c0.1083984-3.9912109,0.015625-8.1855469,0.046875-12.2539063   c-4.4501953-0.6767578-9.4130859-1.3574219-14.171875-0.8427734c-8.8427734,0.9570313-14.2958984,6.5683594-15.5751953,15.1542969   c-0.6572266,4.4101563-0.0869141,9.8359375-0.2802734,15.0605469c-4.2099609,0-8.4189453,0-12.6289063,0   c-0.1083984,4.7080078-0.0146484,9.6191406-0.0458984,14.4052734c4.1308594,0.109375,8.4648438,0.015625,12.6748047,0.046875   c0,11.5039063,0,23.0068359,0,34.5107422C46.1015625,99.8867188,48.0371094,100,50,100   c3.3613281,0,6.6445313-0.3320313,9.8193359-0.9638672c0-11.2939453,0-22.5869141,0-33.8808594   C63.6708984,65.1552734,67.5214844,65.1552734,71.3720703,65.1552734z"/>  </svg> ',
        facebookLive: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" viewBox="-0.622 -0.182 162 63" enable-background="new -0.622 -0.182 162 63"    xml:space="preserve">  <defs>  </defs>  <path fill="#C12337" d="M148.646,61.641l7.711,0.001c2.387,0,4.322-1.279,4.324-2.857l0.004-55.919c0-1.578-1.936-2.857-4.322-2.858   h-7.711L77.966,0.001L70.253,0c-2.381,0-4.311,1.271-4.32,2.843L65.929,53.68l-0.004,5.102c0.006,1.574,1.938,2.853,4.322,2.853"/>  <path fill="#FFFFFF" d="M84.446,19.024h3.082v21.038h10.08v2.555H84.446V19.024z"/>  <path fill="#FFFFFF" d="M104.048,19.024v23.593h-3.082V19.024H104.048z"/>  <path fill="#FFFFFF" d="M114.548,42.617l-7.736-23.593h3.326l3.674,11.621c0.98,3.186,1.855,6.056,2.521,8.821h0.07   c0.664-2.73,1.609-5.705,2.695-8.786l3.99-11.656h3.254l-8.436,23.593H114.548z"/>  <path fill="#FFFFFF" d="M141.077,31.556h-9.135v8.507h10.221v2.555H128.86V19.024h12.777v2.556h-9.695v7.455h9.135V31.556z"/>  <path fill="#4272B9" d="M30.891,0.085C13.83,0.085,0,13.916,0,30.976c0,15.849,11.935,28.908,27.306,30.683   c0-7.105,0-14.213,0-21.321c-2.601-0.019-5.279,0.04-7.831-0.027c0.02-2.956-0.039-5.991,0.028-8.9c2.601,0,5.201,0,7.802,0   c0.12-3.228-0.233-6.58,0.173-9.305c0.79-5.305,4.159-8.771,9.622-9.363c2.94-0.318,6.007,0.103,8.756,0.521   c-0.019,2.514,0.038,5.105-0.029,7.571c-1.713,0.061-3.34-0.108-4.796,0.058c-1.396,0.158-2.441,0.687-3.18,1.676   c-0.772,1.036-0.896,2.172-0.896,3.959c0,1.557,0,3.291,0,4.883c2.833,0.019,5.742-0.039,8.525,0.029   c-0.454,2.976-0.87,5.986-1.387,8.898c-2.379,0-4.759,0-7.139,0c0,6.978,0,13.956,0,20.934   c14.156-2.818,24.825-15.312,24.825-30.295C61.781,13.916,47.951,0.085,30.891,0.085z"/>  <path fill="#FFFFFF" d="M44.095,40.338c0.517-2.912,0.933-5.923,1.387-8.898c-2.783-0.068-5.692-0.01-8.525-0.029   c0-1.592,0-3.327,0-4.883c0-1.787,0.124-2.923,0.896-3.959c0.738-0.989,1.783-1.518,3.18-1.676c1.456-0.166,3.083,0.003,4.796-0.058   c0.067-2.466,0.011-5.058,0.029-7.571c-2.749-0.417-5.815-0.838-8.756-0.521c-5.463,0.591-8.832,4.058-9.622,9.363   c-0.406,2.725-0.054,6.077-0.173,9.305c-2.601,0-5.201,0-7.802,0c-0.067,2.909-0.009,5.944-0.028,8.9   c2.552,0.067,5.229,0.009,7.831,0.027c0,7.108,0,14.216,0,21.321c1.176,0.137,2.372,0.208,3.584,0.208   c2.076,0,4.105-0.206,6.065-0.596c0-6.978,0-13.956,0-20.934C39.336,40.338,41.716,40.338,44.095,40.338z"/>  </svg>',
        liveStreaming: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="60px" height="40px" viewBox="-0.957 -0.986 60 40" enable-background="new -0.957 -0.986 60 40" xml:space="preserve"> <defs> </defs> <path fill="#C12337" d="M51.062,38.05l4.761,0.001c1.473,0,2.667-0.79,2.668-1.764l0.003-34.519c0-0.974-1.194-1.764-2.668-1.764 h-4.76L7.433,0L2.671,0C1.202,0,0.01,0.785,0.005,1.755l-0.002,31.38L0,36.286c0.003,0.971,1.196,1.761,2.668,1.761"/> <path fill="#FFFFFF" d="M11.432,11.743h1.902v12.986h6.223v1.578h-8.125V11.743z"/> <path fill="#FFFFFF" d="M23.533,11.743v14.564h-1.903V11.743H23.533z"/> <path fill="#FFFFFF" d="M30.014,26.307l-4.775-14.564h2.053l2.268,7.173c0.605,1.967,1.146,3.738,1.557,5.445h0.043 c0.41-1.686,0.994-3.521,1.664-5.423l2.463-7.195h2.009l-5.208,14.564H30.014z"/> <path fill="#FFFFFF" d="M46.39,19.479h-5.64v5.252h6.311v1.576h-8.213V11.743h7.888v1.578H40.75v4.602h5.64V19.479L46.39,19.479z"/> </svg>',
        rtmpLive: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="105px" height="105px" viewBox="-0.429 -0.991 105 105" enable-background="new -0.429 -0.991 105 105" xml:space="preserve"> <defs> </defs> <circle fill="none" stroke="#050505" stroke-width="4" stroke-miterlimit="10" cx="52" cy="52" r="50"/> <path stroke="#000000" stroke-width="0.5" stroke-miterlimit="10" d="M16.775,65.664V39.441h8.844c1.777,0,3.129,0.236,4.054,0.706 c0.925,0.472,1.665,1.304,2.217,2.496c0.553,1.192,0.831,2.511,0.831,3.954c0,1.858-0.459,3.428-1.375,4.703 c-0.917,1.275-2.332,2.088-4.245,2.434c0.697,0.441,1.229,0.877,1.591,1.304c0.772,0.933,1.502,2.094,2.191,3.487l3.47,7.139h-3.32 l-2.64-5.456c-0.77-1.573-1.406-2.778-1.904-3.612c-0.5-0.835-0.946-1.418-1.342-1.753c-0.394-0.334-0.795-0.568-1.204-0.697 c-0.299-0.085-0.789-0.125-1.47-0.125h-3.061v11.644H16.775z M19.415,51.014h5.673c1.207,0,2.15-0.164,2.831-0.492 c0.68-0.327,1.197-0.852,1.551-1.574c0.354-0.72,0.53-1.505,0.53-2.351c0-1.241-0.342-2.261-1.027-3.06 c-0.686-0.798-1.768-1.198-3.245-1.198h-6.313V51.014z"/> <path stroke="#000000" stroke-width="0.5" stroke-miterlimit="10" d="M41.428,65.664V42.536h-6.572v-3.095h15.81v3.095h-6.599 v23.127H41.428z"/> <path stroke="#000000" stroke-width="0.5" stroke-miterlimit="10" d="M53.294,65.664V39.441h3.972l4.722,18.566 c0.436,1.73,0.753,3.023,0.953,3.883c0.226-0.953,0.58-2.355,1.062-4.204l4.775-18.245h3.551v26.222h-2.543V43.716l-5.798,21.948 h-2.38l-5.769-22.323v22.323H53.294z"/> <path stroke="#000000" stroke-width="0.5" stroke-miterlimit="10" d="M76.587,65.664V39.441h7.524c1.323,0,2.336,0.084,3.034,0.25 c0.98,0.215,1.8,0.625,2.462,1.226s1.195,1.446,1.599,2.531c0.403,1.085,0.606,2.278,0.606,3.578c0,2.229-0.539,4.117-1.619,5.662 s-3.03,2.316-5.851,2.316h-5.117v10.66H76.587z M79.226,51.908h5.157c1.706,0,2.916-0.417,3.632-1.252 c0.717-0.834,1.074-2.009,1.074-3.523c0-1.097-0.209-2.036-0.632-2.817c-0.421-0.781-0.977-1.298-1.665-1.548 c-0.444-0.154-1.267-0.232-2.464-0.232h-5.103V51.908z"/></svg>',
        dragIconOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M66.508,39.37c-1.358,0-2.59,0.571-3.465,1.486l0.012-1.438c0.02-2.646-2.116-4.814-4.798-4.834   c-1.359,0-2.592,0.573-3.467,1.49l0.002-0.192c0.019-2.644-2.118-4.811-4.799-4.832c-1.359,0-2.59,0.572-3.466,1.487l0.089-11.674   c0.011-1.284-0.481-2.494-1.383-3.407c-0.899-0.911-2.099-1.418-3.417-1.428c-2.623,0-4.774,2.135-4.794,4.76l-0.261,34.258   l-4.639-2.011c-1.242-0.547-3.103-1.274-4.923-1.274c-1.11,0-2.106,0.265-2.972,0.793c-1.196,0.742-2.032,1.924-2.356,3.327   c-0.346,1.502-0.057,3.137,0.793,4.487l0.202,0.32l0.319,0.202c2.809,1.794,10.573,7.182,12.745,10.537   c3.75,5.805,9.523,8.656,17.651,8.718l0.227,0.001c0.001,0,0.002,0,0.003,0c16.4,0,17.334-13.387,17.354-16.07l0.151-19.873   C71.337,41.559,69.196,39.391,66.508,39.37z M38.697,58.021c0.136-0.089,0.219-0.239,0.22-0.402l0.281-36.814   c0.011-1.434,1.186-2.601,2.64-2.601c0.699,0.005,1.355,0.283,1.847,0.781c0.492,0.499,0.761,1.16,0.755,1.861l-0.201,26.45   c-0.005,0.835,0.671,1.52,1.518,1.525c0.836,0,1.521-0.674,1.528-1.503l0.086-11.492c0.011-1.434,1.188-2.6,2.641-2.6   c1.446,0.011,2.614,1.195,2.604,2.639l-0.087,11.491c-0.004,0.403,0.151,0.784,0.436,1.072c0.287,0.292,0.672,0.453,1.095,0.455   c0.833,0,1.514-0.675,1.518-1.503l0.063-8.017c0.01-1.436,1.185-2.603,2.638-2.603c0.702,0.005,1.359,0.282,1.85,0.78   c0.49,0.499,0.758,1.16,0.752,1.861l-0.077,10.096c-0.004,0.836,0.678,1.521,1.528,1.526c0.831,0,1.511-0.675,1.516-1.503   l0.042-5.372c0.011-1.435,1.186-2.602,2.642-2.602c1.451,0.012,2.624,1.197,2.613,2.642L68.99,64.059   c-0.018,2.323-0.833,13.913-15.182,13.912L53.6,77.97c-7.44-0.057-12.474-2.511-15.841-7.723   c-2.763-4.268-12.189-10.409-13.308-11.13c-0.501-0.844-0.668-1.84-0.459-2.748c0.192-0.834,0.683-1.532,1.38-1.965   c0.515-0.314,1.113-0.468,1.827-0.468c1.41,0,2.984,0.622,4.048,1.091l6.991,3.032C38.388,58.123,38.56,58.11,38.697,58.021z"/>  </svg> ',
        dragIconOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M66.508,39.37c-1.358,0-2.59,0.571-3.465,1.486l0.012-1.438c0.02-2.646-2.116-4.814-4.798-4.834   c-1.359,0-2.592,0.573-3.467,1.49l0.002-0.192c0.019-2.644-2.118-4.811-4.799-4.832c-1.359,0-2.59,0.572-3.466,1.487l0.089-11.674   c0.011-1.284-0.481-2.494-1.383-3.407c-0.899-0.911-2.099-1.418-3.417-1.428c-2.623,0-4.774,2.135-4.794,4.76l-0.261,34.258   l-4.639-2.011c-1.242-0.547-3.103-1.274-4.923-1.274c-1.11,0-2.106,0.265-2.972,0.793c-1.196,0.742-2.032,1.924-2.356,3.327   c-0.346,1.502-0.057,3.137,0.793,4.487l0.202,0.32l0.319,0.202c2.809,1.794,10.573,7.182,12.745,10.537   c3.75,5.805,9.523,8.656,17.651,8.718l0.227,0.001c0.001,0,0.002,0,0.003,0c16.4,0,17.334-13.387,17.354-16.07l0.151-19.873   C71.337,41.559,69.196,39.391,66.508,39.37z M38.697,58.021c0.136-0.089,0.219-0.239,0.22-0.402l0.281-36.814   c0.011-1.434,1.186-2.601,2.64-2.601c0.699,0.005,1.355,0.283,1.847,0.781c0.492,0.499,0.761,1.16,0.755,1.861l-0.201,26.45   c-0.005,0.835,0.671,1.52,1.518,1.525c0.836,0,1.521-0.674,1.528-1.503l0.086-11.492c0.011-1.434,1.188-2.6,2.641-2.6   c1.446,0.011,2.614,1.195,2.604,2.639l-0.087,11.491c-0.004,0.403,0.151,0.784,0.436,1.072c0.287,0.292,0.672,0.453,1.095,0.455   c0.833,0,1.514-0.675,1.518-1.503l0.063-8.017c0.01-1.436,1.185-2.603,2.638-2.603c0.702,0.005,1.359,0.282,1.85,0.78   c0.49,0.499,0.758,1.16,0.752,1.861l-0.077,10.096c-0.004,0.836,0.678,1.521,1.528,1.526c0.831,0,1.511-0.675,1.516-1.503   l0.042-5.372c0.011-1.435,1.186-2.602,2.642-2.602c1.451,0.012,2.624,1.197,2.613,2.642L68.99,64.059   c-0.018,2.323-0.833,13.913-15.182,13.912L53.6,77.97c-7.44-0.057-12.474-2.511-15.841-7.723   c-2.763-4.268-12.189-10.409-13.308-11.13c-0.501-0.844-0.668-1.84-0.459-2.748c0.192-0.834,0.683-1.532,1.38-1.965   c0.515-0.314,1.113-0.468,1.827-0.468c1.41,0,2.984,0.622,4.048,1.091l6.991,3.032C38.388,58.123,38.56,58.11,38.697,58.021z"/>  </svg> ',
        recordingIcon: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" width="101px" height="101px" viewBox="-0.5 -0.501 101 101" enable-background="new -0.5 -0.501 101 101"    xml:space="preserve">  <defs>  </defs>  <g>   <path fill="#8C8C8C" d="M50,4c25.365,0,46,20.636,46,46c0,25.363-20.636,45.998-46,45.998C24.635,95.998,4,75.363,4,50    C4,24.636,24.635,4,50,4 M50,0C22.431,0,0,22.43,0,50s22.429,49.998,50,49.998c27.57,0,50-22.428,50-49.998    C100,22.431,77.569,0,50,0L50,0z"/>  </g>  <circle fill="#8C8C8C" cx="50" cy="50" r="25.833"/>  </svg>',
        plusIcon: '<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="m467 211h-166v-166c0-24.853-20.147-45-45-45s-45 20.147-45 45v166h-166c-24.853 0-45 20.147-45 45s20.147 45 45 45h166v166c0 24.853 20.147 45 45 45s45-20.147 45-45v-166h166c24.853 0 45-20.147 45-45s-20.147-45-45-45z"/></g></svg>'
    }

    var ua = navigator.userAgent;
    var _isiOS = false;
    var _isAndroid = false;
    var _isiOSCordova = false;
    var _isAndroidCordova = false;
    if (ua.indexOf('iPad') != -1 || ua.indexOf('iPhone') != -1 || ua.indexOf('iPod') != -1) _isiOS = true;
    if (ua.indexOf('Android') != -1) _isAndroid = true;
    if (typeof cordova != 'undefined' && _isiOS) _isiOSCordova = true;
    if (typeof cordova != 'undefined' && _isAndroid) _isAndroidCordova = true;

    function log(){}
    if(Q.Streams.WebRTCdebugger) {
        log = Q.Streams.WebRTCdebugger.createLogMethod('controls.js')
    }

    function copyToClipboard(el) {
        if (Q.info.platform === 'ios') {
            var oldContentEditable = el.contentEditable,
                oldReadOnly = el.readOnly,
                range = document.createRange();

            el.contentEditable = true;
            el.readOnly = false;
            range.selectNodeContents(el);

            var s = window.getSelection();
            s.removeAllRanges();
            s.addRange(range);

            el.setSelectionRange(0, 999999); // A big number, to cover anything that could be inside the element.

            el.contentEditable = oldContentEditable;
            el.readOnly = oldReadOnly;

            document.execCommand('copy');
            return;
        }
        var tempEl = document.createElement('textarea');
        tempEl.value = el.value || el.innerText;
        tempEl.setAttribute('readonly', '');
        tempEl.style.position = 'absolute';
        tempEl.style.left = '-9999px';
        document.body.appendChild(tempEl);
        var selected =
            document.getSelection().rangeCount > 0
                ? document.getSelection().getRangeAt(0)
                : false;
        tempEl.select();
        document.execCommand('copy');
        document.body.removeChild(tempEl);
        if (selected) {
            document.getSelection().removeAllRanges();
            document.getSelection().addRange(selected);
        }
    };

    /**
     * Streams/webrtc/control tool.
     * Users can chat with each other via WebRTC using Twilio or raw streams
     * @module Streams
     * @class Streams webrtc
     * @constructor
     * @param {Object} options
     *  Hash of possible options
     */
    Q.Tool.define("Streams/webrtc/controls", function (options) {
        var tool = this;
        this.webrtcSignalingLib = null;
        this.webrtcRoomInstance = null;
        this.controlBar = null;
        this.participantsListTool = null;
        this.chatBox = null;
        this.audioTool = null;
        this.videoInputsTool = null;
        this.participantsListTool = null;

        $(this.element).addClass('Q_floatAboveDocument');
        if (!options.webrtcRoomInstance) {
            throw "Video room should be created";
        }
        log('Streams/webrtc/controls options', options)

        
        this.webrtcRoomInstance = options.webrtcRoomInstance();

        log('Streams/webrtc/controls webrtcRoomInstance', this.webrtcRoomInstance)
        this.webrtcSignalingLib = tool.webrtcRoomInstance.getWebrtcSignalingLib();

        log('webrtcRoomInstance', this.webrtcRoomInstance, this.webrtcSignalingLib)

        this.icons = icons;

        this.create();

        this.state.onCreate.handle.call(this);

    },

        {
            editable: false,
            onCreate: new Q.Event(),
            onUpdate: new Q.Event(),
            onRefresh: new Q.Event(),
            onChildToolsLoaded: new Q.Event(),
            dialogIsOpened: false,
            loudestMode: false,
            debug: {}
        },

        {
            create: function () {
                var tool = this;
                log('controls: create')

                tool.text = tool.webrtcRoomInstance.text();
                tool.hoverTimeout = { settingsPopup: null, audioSettingsPopup: null, participantsPopup: null };
                tool.childToolsLoadingProgress = {
                    'Streams/webrtc/video': false,
                    'Streams/webrtc/audio': false,
                    'Streams/webrtc/participants': false,
                };
                tool.controlBar = null;

                tool.createControlBar(function(controlBar) {
                    tool.updateControlBar();

                    if (tool.controlBar.parentNode == null) tool.element.appendChild(controlBar);
    
                    tool.textChat().init();
                    tool.createVideoSettingsPopup();
                    tool.createAudioSettingsPopup();
                    tool.createParticipantsPopup(function () {
                        var activeViewMode = tool.webrtcRoomInstance.screenRendering.getActiveViewMode();
                        if (activeViewMode == 'maximized' || activeViewMode == 'maximizedMobile') {
                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('allButMe');
                        }
                    });
                    tool.initLivestreamingEditor();
                    tool.initMediaLimits();
    
                   
                    tool.bindRTCEvents();
    
                });
               
                
                /*Q.req("Streams/webrtc", ["recording"], function (err, response) {

                    if (err) {
                        return Q.alert(err);
                    }
                    log('task response', response);

                    Q.Streams.get('NC', 'Streams/task/Qioietfls', function (err, stream) {
                        var msg = Q.firstErrorMessage(err, response && response.errors);
                        if (msg) {
                            return Q.alert(msg);
                        }
                        tool.taskStream = response.slots.recording;


                        stream.onMessage('Streams/task/progress', function (message) {
                            log('EVENT: progress:')

                            if (!Q.Streams.isStream(tool.taskStream)) {
                                return;
                            }

                            message = Streams.Message.construct(message);
                            var publisherId = Q.getObject(["publisherId"], message);
                            var streamName = Q.getObject(["streamName"], message);
                            var messageType = Q.getObject(["type"], message);

                            // filter by Streams/tasks stream name
                            if (streamName !== tool.taskStream.fields.name) {
                                return;
                            }

                            log('task meeesssage:', messageType)
                            switch (messageType) {
                                case "Streams/task/progress":
                                    break;
                                case "Streams/task/error":

                                    break;
                                case "Streams/task/complete":

                                    break;
                            }
                        })
                    });

                }, {
                    method: 'post',
                    fields: {
                        taskStreamName: 'Streams/task/Qioietfls',
                    }
                });*/

            },
            /*refresh method is used when room is switched to add event listeners to the new instance of webrtcSignalingLib*/
            refresh: function () {
                var tool = this;

                tool.updateControlBar();

                /*if (tool.participantsListTool) {
                    tool.participantsListTool.refresh()
                   
                }*/

                var activeViewMode = tool.webrtcRoomInstance.screenRendering.getActiveViewMode();
                if (activeViewMode == 'maximized' || activeViewMode == 'maximizedMobile') {
                    tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('allButMe');
                }
                tool.bindRTCEvents();
            },
            remove: function () {

            },
            updateChildToolLoadingProgress: function (toolName) {
                log('updateChildToolLoadingProgress', toolName)
                var tool = this;
                tool.childToolsLoadingProgress[toolName] = true;

                if(checkIfAllToolsLoaded()) {
                    this.state.onChildToolsLoaded.handle.call(this);
                }
                function checkIfAllToolsLoaded() {
                    for(let key in tool.childToolsLoadingProgress) {
                        if (tool.childToolsLoadingProgress.hasOwnProperty(key) && !tool.childToolsLoadingProgress[key]) {
                           return false; 
                        }
                    }
                    return true;
                }
            },
            show: function () {
                if (this.element != null) {
                    this.element.style.display = '';
                }
            },
            hide: function () {
                if (this.element != null) {
                    this.element.style.display = 'none';
                }
            },

            /**
             * Bind WebRTCconference events to update controls UI
             * @method bindRTCEvents
             */
            bindRTCEvents: function () {
                var tool = this;
                log('controls: bindRTCEvents');

                function setRealName(participant, callback) {
                    var userId = participant.identity != null ? participant.identity.split('\t')[0] : null;
                    if (userId != null) {

                        var firstName;
                        var lastName;
                        var fullName = '';
                        Q.Streams.get(userId, 'Streams/user/firstName', function (err, stream) {

                            if (!stream || stream.fields == null) {
                                if (callback != null) callback({ firstName: 'n/a', lastName: 'n/a' });
                                return;
                            }

                            firstName = stream.fields.content;
                            if (firstName != null) {
                                fullName += firstName;
                            }

                            try {
                                Q.Streams.get(userId, 'Streams/user/lastName', function (err, stream) {

                                    if (!stream || !stream.fields) {
                                        if (callback != null) callback({ firstName: firstName, lastName: '' });
                                        return;
                                    }

                                    lastName = stream.fields.content;

                                    if (lastName != null) {
                                        fullName += ' ' + lastName;
                                    }

                                    participant.username = fullName;

                                    if (callback != null) callback({ firstName: firstName, lastName: lastName });
                                });

                            } catch (e) {
                                participant.username = fullName;
                                if (callback != null) callback({ firstName: firstName, lastName: lastName });
                            }

                        });
                    }
                }

                function removeActiveLivestreamingClass() {
                    let webcastIsActive = tool.livestreamingEditorTool.broadcastClient != null && tool.livestreamingEditorTool.broadcastClient.socket() != null && tool.livestreamingEditorTool.broadcastClient.socket().connected;
                    log('removeActiveLivestreamingClass 0', tool.livestreamingEditorTool.broadcastClient)
                    if(tool.livestreamingEditorTool.broadcastClient) {
                        log('removeActiveLivestreamingClass 1', tool.livestreamingEditorTool.broadcastClient.socket())

                        if(tool.livestreamingEditorTool.broadcastClient.socket()) {
                            log('removeActiveLivestreamingClass 2', tool.livestreamingEditorTool.broadcastClient.socket().connected)

                            
                        }
                    }
                    if (!tool.livestreamingEditorTool.livestreamingRtmpSenderTool.rtmpSender.isStreaming() && !webcastIsActive) {
                        tool.broadcastBtn.classList.remove('isRecording');
                    }
                }

                tool.webrtcSignalingLib.event.on('joined', function (participant) {
                    if (participant.sid == 'recording') return;

                    var participantsCount = tool.webrtcSignalingLib.roomParticipants().length;
                    log('controls: local participantConnected; participants num:', participantsCount)
                    tool.usersCounter.innerHTML = participantsCount;

                });
                tool.webrtcSignalingLib.event.on('participantConnected', function (participant) {
                    log('controls: participantConnected')                   

                    var participants = tool.webrtcSignalingLib.roomParticipants();
                    for (var i in participants) {
                        if (participants[i].soundMeter.visualizations.participantsPopup != null) participants[i].soundMeter.visualizations.participantsPopup.reset();
                    }

                    var participantsCount = tool.webrtcSignalingLib.roomParticipants().length;
                    log('controls: participantConnected; participants num:', participantsCount)
                    tool.usersCounter.innerHTML = participantsCount;

                });
                tool.webrtcSignalingLib.event.on('participantDisconnected', function (participant) {
                    var participantsCount = tool.webrtcSignalingLib.roomParticipants().length;
                    log('controls: participantDisconnected; participants num:', participantsCount)

                    tool.usersCounter.innerHTML = participantsCount;
                });
                tool.webrtcSignalingLib.event.on('participantRemoved', function (participant) {
                    var participantsCount = tool.webrtcSignalingLib.roomParticipants().length;
                    tool.usersCounter.innerHTML = participantsCount;
                });
                tool.webrtcSignalingLib.event.on('screenAdded', function (e) {

                });
                tool.webrtcSignalingLib.event.on('screenRemoved', function (e) {

                });
                tool.webrtcSignalingLib.event.on('trackAdded', function (e) {
                    tool.updateControlBar();
                });
                tool.webrtcSignalingLib.event.on('cameraEnabled', function () {
                    tool.updateControlBar();
                });
                tool.webrtcSignalingLib.event.on('cameraDisabled', function () {
                    tool.updateControlBar();
                });
                tool.webrtcSignalingLib.event.on('cameraToggled', function () {
                    tool.updateControlBar();
                });
                tool.webrtcSignalingLib.event.on('micEnabled', function () {
                    tool.updateControlBar();
                    if (tool.microphoneBtn.classList.contains('Q_working')) tool.microphoneBtn.classList.remove('Q_working');
                });
                tool.webrtcSignalingLib.event.on('micDisabled', function () {
                    tool.updateControlBar();
                });
                tool.webrtcSignalingLib.event.on('micIsBeingEnabled', function () {
                    tool.microphoneBtn.classList.add('Q_working')
                    setTimeout(function () {
                        if (tool.microphoneBtn.classList.contains('Q_working')) tool.microphoneBtn.classList.remove('Q_working');
                    }, 10000);
                });
                tool.webrtcSignalingLib.event.on('deviceListUpdated', function () {
                  
                });
                tool.webrtcSignalingLib.event.on('currentAudioinputDeviceChanged', function () {

                });
                tool.webrtcSignalingLib.event.on('remoteScreensharingStarting', function (e) {

                });
                tool.webrtcSignalingLib.event.on('videoTrackLoaded', function (e) {
                    log('tool.livestreamingEditor', tool.livestreamingEditor)
                    if (tool.livestreamingEditor != null && tool.livestreamingEditor.scenesInterface) {
                        let activeScene = tool.livestreamingEditor.scenesInterface.getActive()
                        if(activeScene) activeScene.sourcesInterface.update();
                    }
                });
                tool.webrtcSignalingLib.event.on('audioTrackLoaded', function (e) {
                    log('tool.livestreamingEditor', tool.livestreamingEditor)
                    if (tool.livestreamingEditor != null && tool.livestreamingEditor.scenesInterface) {
                        let activeScene = tool.livestreamingEditor.scenesInterface.getActive()
                        if(activeScene) activeScene.sourcesInterface.update();
                    }
                });
                tool.webrtcSignalingLib.event.on('participantConnected', function (e) {
                    log('tool.livestreamingEditor', tool.livestreamingEditor)
                    if (tool.livestreamingEditor != null && tool.livestreamingEditor.scenesInterface) {
                        let activeScene = tool.livestreamingEditor.scenesInterface.getActive()
                        if(activeScene) activeScene.sourcesInterface.update();
                    }
                });
                tool.webrtcSignalingLib.event.on('participantDisconnected', function (e) {
                    log('tool.livestreamingEditor', tool.livestreamingEditor)
                    if (tool.livestreamingEditor != null && tool.livestreamingEditor.scenesInterface) {
                        let activeScene = tool.livestreamingEditor.scenesInterface.getActive()
                        if(activeScene) activeScene.sourcesInterface.update();
                    }
                });

                tool.webrtcSignalingLib.event.on('liveStreamingStarted', function (e) {
                    log('controls: liveStreamingStarted', e);

                    if (e.platform && e.platform == 'facebook') {
                        if (e.participant.isLocal) {
                            if (!tool.broadcastBtn.classList.contains('isRecording')) tool.broadcastBtn.classList.add('isRecording');
                            tool.webrtcRoomInstance.notice.show(Q.getObject("webrtc.notices.youBeganFbLive", tool.text));

                        } else {
                            if (!tool.usersBtn.classList.contains('isRecording')) tool.usersBtn.classList.add('isRecording');
                            tool.webrtcRoomInstance.notice.show(tool.text.webrtc.notices.sbBeganFbLive.interpolate({ userName: e.participant.username }));
                        }
                    } else {
                        if (e.participant.isLocal) {
                            if (!tool.broadcastBtn.classList.contains('isRecording')) tool.broadcastBtn.classList.add('isRecording');
                            tool.webrtcRoomInstance.notice.show(Q.getObject("webrtc.notices.youStartedLive", tool.text));

                        } else {
                            if (!tool.usersBtn.classList.contains('isRecording')) tool.usersBtn.classList.add('isRecording');
                            tool.webrtcRoomInstance.notice.show(tool.text.webrtc.notices.sbStartedLiveStreaming.interpolate({ userName: e.participant.username }));
                        }
                    }
                });
                tool.webrtcSignalingLib.event.on('liveStreamingEnded', function (e) {
                    log('controls: liveStreamingEnded', e);
                    if (document.querySelector('.Streams_webrtc_fblive_dialog_inner') != null) {
                        Q.Dialogs.pop();
                    }

                    
                    if (e.platform && e.platform == 'facebook') {
                        if (e.participant.isLocal) {
                            removeActiveLivestreamingClass();
                            tool.webrtcRoomInstance.notice.show(Q.getObject("webrtc.notices.youStoppedFbLive", tool.text));
                        } else {
                            tool.usersBtn.classList.remove('isRecording');
                            tool.webrtcRoomInstance.notice.show(tool.text.webrtc.notices.sbStoppedFbLive.interpolate({ userName: e.participant.username }));

                        }
                    } else {
                        if (e.participant.isLocal) {
                            removeActiveLivestreamingClass();
                            tool.webrtcRoomInstance.notice.show(Q.getObject("webrtc.notices.youStoppedLive", tool.text));
                        } else {
                            tool.usersBtn.classList.remove('isRecording');
                            tool.webrtcRoomInstance.notice.show(tool.text.webrtc.notices.sbStoppedLiveStreaming.interpolate({ userName: e.participant.username }));

                        }
                    }

                    tool.event().dispatch('liveStreamingEnded');
                });

                tool.webrtcSignalingLib.event.on('liveStreamingStopped', function () {
                    removeActiveLivestreamingClass();
                    tool.webrtcRoomInstance.notice.show(tool.text.webrtc.notices.liveStopped);
                });

                tool.webrtcSignalingLib.event.on('webcastStarted', function (e) {
                    log('controls: webcastStarted', e, tool.livestreamingEditorTool.broadcastClient);
                    
                    if (e && e.participant && e.participant.isLocal) {
                        if (!tool.broadcastBtn.classList.contains('isRecording')) tool.broadcastBtn.classList.add('isRecording');
                    } else {
                        if (tool.livestreamingEditorTool.broadcastClient != null) {
                            log('controls: webcastStarted: emit parallelWebcastStarted');
                            tool.webrtcSignalingLib.signalingDispatcher.sendDataTrackMessage('parallelWebcastExists', tool.livestreamingEditorTool.broadcastClient.getOptions().roomName, e.participant)
                            tool.livestreamingEditorTool.broadcastClient.socket().emit('parallelWebcastExists', e.data);
                        }
                    }
                });

                tool.webrtcSignalingLib.event.on('webcastEnded', function (e) {
                    if (e && e.participant && e.participant.isLocal) {
                        removeActiveLivestreamingClass();
                    } else {
                        if (tool.livestreamingEditorTool.broadcastClient != null) {
                            tool.livestreamingEditorTool.broadcastClient.socket().emit('parallelWebcastEnded');
                        }
                    }
                });

                tool.webrtcSignalingLib.event.on('parallelWebcastExists', function (e) {
                    log('controls: parallelWebcastExists', e);

                    if (tool.livestreamingEditorTool.broadcastClient != null) {
                        tool.livestreamingEditorTool.broadcastClient.socket().emit('parallelWebcastExists', e.data);
                    }

                });

                tool.webrtcSignalingLib.event.on('switchRoom', function (e) {
                    log('controls: switchRoom', e);
                    var options = tool.webrtcRoomInstance.getOptions();
                    if (tool.livestreamingEditorTool.broadcastClient != null && options.webcastSettings.disconnectOnRoomSwitch) {
                        tool.livestreamingEditorTool.broadcastClient.disconnect();
                    } else if (tool.livestreamingEditorTool.broadcastClient != null && !options.webcastSettings.disconnectOnRoomSwitch) {
                        tool.livestreamingEditorTool.broadcastClient.socket().emit('switchRoom', e.roomName);
                    }

                });

                tool.webrtcSignalingLib.event.on('videoRecordingStarted', function (participant) {
                    if (participant.isLocal) {
                        if (!tool.cameraBtn.classList.contains('isRecording')) tool.cameraBtn.classList.add('isRecording');
                        tool.webrtcRoomInstance.notice.show(Q.getObject("webrtc.notices.youBeganVideoRecording", tool.text));

                    } else {
                    }
                });
                tool.webrtcSignalingLib.event.on('videoRecordingStopped', function (participant) {

                    if (participant.isLocal) {
                        tool.cameraBtn.classList.remove('isRecording');
                        tool.webrtcRoomInstance.notice.show(Q.getObject("webrtc.notices.youStoppedVideoRecording", tool.text));
                    } else {
                    }

                });

                var roomStream = tool.webrtcRoomInstance.roomStream();

                Q.Streams.onMessageUnseen.add(function (stream, message) {

                    if (stream.fields.name != roomStream.fields.name || stream.fields.publisherId != roomStream.fields.publisherId) return;

                    if (tool.textChat.isHidden) {
                        var msgCounterBadge = tool.newMessagesCounter.parentNode;
                        if (msgCounterBadge.classList.contains('Streams_webrtc_hidden')) msgCounterBadge.classList.remove('Streams_webrtc_hidden');
                    }

                }, tool);

                tool.webrtcSignalingLib.event.on('screensharingStarted', function (e) {

                });
                tool.webrtcSignalingLib.event.on('remoteScreensharingFailed', function (e) {

                });

                tool.webrtcSignalingLib.event.on('beforeDisconnect', function (e) {
                    var roomIsSwitching = e.roomIsSwitching;
                    if(!roomIsSwitching) {
                        log('end live streamings')
                        if(!roomIsSwitching && tool.livestreamingEditorTool && tool.livestreamingEditorTool.livestreamingRtmpSenderTool && tool.livestreamingEditorTool.livestreamingRtmpSenderTool.rtmpSender.isStreaming()) {
                            tool.livestreamingEditorTool.livestreamingRtmpSenderTool.rtmpSender.endStreaming(null, true);
                        }            
                    }
                });

                tool.webrtcSignalingLib.event.on('beforeSwitchRoom', function (e) {
                    tool.webrtcSignalingLib = e.newWebrtcSignalingLibInstance;
                });

                tool.webrtcSignalingLib.event.on('dataChannelOpened', function (e) {
                    log('dataChannelOpened', e)
                    if(tool.livestreamingEditorTool && tool.livestreamingEditorTool.livestreamingRtmpSenderTool && tool.livestreamingEditorTool.livestreamingRtmpSenderTool.rtmpSender.isStreaming()) {
                        e.participant.dataTrack.send(JSON.stringify({type:"liveStreamingStarted"}));
                    }
                });


                tool.webrtcSignalingLib.event.on('canITurnCameraOn', function (e) {
                    if (e.answerValue !== true) return;
                    log('controls: canITurnCameraOn answer', e)

                    if (e.timeProvided != null) {
                        log('controls: canITurnCameraOn: e.timeProvided', e.timeProvided)
                        function cntDown() {
                            if (tool.giveCameraTimer) {
                                clearInterval(tool.giveCameraTimer);
                                tool.giveCameraTimer = null;
                                tool.cameraCountdown.style.display = '';
                            }

                            if (tool.cameraCountdown.classList.contains('Streams_webrtc_camera-countdown-green')) {
                                tool.cameraCountdown.classList.remove('Streams_webrtc_camera-countdown-green')
                            }
                            tool.cameraCountdown.style.display = 'flex'
                            let sec = Math.round(e.timeProvided / 1000);
                            tool.giveCameraTimer = setInterval(() => {
                                tool.cameraCountdown.innerHTML = sec--;
                                if (sec < 0) {
                                    tool.cameraCountdown.style.display = '';
                                    clearInterval(tool.giveCameraTimer);
                                    tool.giveCameraTimer = null;
                                }
                            }, 1000);

                        }

                        cntDown();
                    }
                });

                log('controls: events loaded');
                //someone or me requested a camera slot
                tool.webrtcSignalingLib.event.on('cameraRequested', function (e) {
                    tool.limits.onCameraRequestedHandler(e);
                });

                tool.webrtcSignalingLib.event.on('forceTurnCameraOff', function (e) {
                    tool.webrtcSignalingLib.localMediaControls.disableVideo();
                    if (tool.webrtcSignalingLib.screenSharing.isActive()) {
                        tool.videoInputsTool.stopScreenSharingButton().handler();
                    }
                });
                tool.webrtcSignalingLib.event.on('cancelForceTurnCameraOffTimer', function (e) {
                    if (tool.giveCameraTimer) {
                        clearInterval(tool.giveCameraTimer);
                        tool.giveCameraTimer = null;
                        tool.cameraCountdown.style.display = '';
                    }
                });

                tool.webrtcSignalingLib.event.on('someonesCameraEnabled', function (e) {
                    if (e.fromSid == tool.webrtcSignalingLib.localParticipant().sid.replace('/webrtc#', '')) {
                        if (tool.giveCameraTimer && tool.cameraCountdown.classList.contains('Streams_webrtc_camera-countdown-green')) {
                            clearInterval(tool.giveCameraTimer);
                            tool.giveCameraTimer = null;
                            tool.cameraCountdown.style.display = '';
                        }
                    }

                    //hide indicator in participant's screen
                    if (e.participant.screens.length != 0) {
                        for (let s in e.participant.screens) {
                            let screen = e.participant.screens[s];
                            if (screen.videoScreen.nameTextEl) {
                                let cameraIndicator = screen.videoScreen.nameTextEl.querySelector('.Streams_webrtc_camera_req_icon');
                                if (cameraIndicator) {
                                    cameraIndicator.parentElement.removeChild(cameraIndicator);
                                }
                            }
                        }
                    }

                    tool.limits.removeCameraRequestFromQueue(e.participant);
                });


                tool.webrtcSignalingLib.event.on('canITurnMicOn', function (e) {
                    if (e.answerValue !== true) return;
                    log('controls: canITurnMicOn START', e)

                    if (e.timeProvided != null) {
                        log('controls: canITurnMicOn: e.timeProvided', e.timeProvided)
                        function cntDown() {
                            if (tool.giveMicTimer) {
                                clearInterval(tool.giveMicTimer);
                                tool.giveMicTimer = null;
                                tool.micCountdown.style.display = '';
                            }

                            if (tool.micCountdown.classList.contains('Streams_webrtc_mic-countdown-green')) {
                                tool.micCountdown.classList.remove('Streams_webrtc_mic-countdown-green')
                            }
                            tool.micCountdown.style.display = 'flex'
                            let sec = Math.round(e.timeProvided / 1000);
                            tool.giveMicTimer = setInterval(() => {
                                tool.micCountdown.innerHTML = sec--;
                                if (sec < 0) {
                                    tool.micCountdown.style.display = '';
                                    clearInterval(tool.giveMicTimer);
                                    tool.giveMicTimer = null;
                                }
                            }, 1000);

                        }

                        cntDown();
                    }
                });
                //someone or me requested a mic slot
                tool.webrtcSignalingLib.event.on('micRequested', function (e) {
                    tool.limits.onMicRequestedHandler(e);
                });

                tool.webrtcSignalingLib.event.on('forceTurnMicOff', function (e) {
                    tool.webrtcSignalingLib.localMediaControls.disableAudio();
                });
                tool.webrtcSignalingLib.event.on('cancelForceTurnMicOffTimer', function (e) {
                    if (tool.giveMicTimer) {
                        clearInterval(tool.giveMicTimer);
                        tool.giveMicTimer = null;
                        tool.micCountdown.style.display = '';
                    }
                });

                tool.webrtcSignalingLib.event.on('someonesMicEnabled', function (e) {
                    //hide timer near my mic icon
                    if (e.fromSid == tool.webrtcSignalingLib.localParticipant().sid.replace('/webrtc#', '')) {
                        if (tool.giveMicTimer && tool.micCountdown.classList.contains('Streams_webrtc_mic-countdown-green')) {
                            clearInterval(tool.giveMicTimer);
                            tool.giveMicTimer = null;
                            tool.micCountdown.style.display = '';
                        }
                    }

                    //hide indicator in participant's screen
                    if (e.participant.screens.length != 0) {
                        for (let s in e.participant.screens) {
                            let screen = e.participant.screens[s];
                            if (screen.videoScreen.nameTextEl) {
                                let micIndicator = screen.videoScreen.nameTextEl.querySelector('.Streams_webrtc_mic_req_icon');
                                if (micIndicator) {
                                    micIndicator.parentElement.removeChild(micIndicator);
                                }
                            }
                        }
                    }
                });

            },
            event: function () {
                var tool = this;

                if (tool.events == null) tool.events = {};

                var CustomEvent = function (eventName) {

                    this.eventName = eventName;
                    this.callbacks = [];

                    this.registerCallback = function (callback) {
                        this.callbacks.push(callback);
                    }

                    this.unregisterCallback = function (callback) {
                        const index = this.callbacks.indexOf(callback);
                        if (index > -1) {
                            this.callbacks.splice(index, 1);
                        }
                    }

                    this.fire = function (data) {
                        const callbacks = this.callbacks.slice(0);
                        callbacks.forEach((callback) => {
                            callback(data);
                        });
                    }
                }

                var dispatch = function (eventName, data) {
                    const event = tool.events[eventName];
                    if (event) {
                        event.fire(data);
                    }
                }

                var on = function (eventName, callback) {
                    let event = tool.events[eventName];
                    if (!event) {
                        event = new CustomEvent(eventName);
                        tool.events[eventName] = event;
                    }
                    event.registerCallback(callback);
                }

                var off = function (eventName, callback) {
                    const event = tool.events[eventName];
                    if (event && event.callbacks.indexOf(callback) > -1) {
                        event.unregisterCallback(callback);
                        if (event.callbacks.length === 0) {
                            delete tool.events[eventName];
                        }
                    }
                }

                var destroy = function () {
                    tool.events = {};
                }

                return {
                    dispatch: dispatch,
                    on: on,
                    off: off,
                    destroy: destroy
                }
            },
            showIosPermissionsInstructions: function (kind) {
                var instructionsPermissionDialog = document.createElement('DIV');
                instructionsPermissionDialog.className = 'Streams_webrtc_devices_dialog_inner';
                var dialogList = document.createElement('OL');
                dialogList.className = 'Streams_webrtc_instructions_dialog';
                dialogList.innerHTML = `<div>Permission for ` + kind + ` denied. To use it please follow these steps:</div><li>Go to your iOS Settings</li>
									<li>Open "Privacy"</li>
									<li>Find "` + kind + `" and open it</li>
									<li>Find "` + Q.Users.communityId + `" and enable</li>`;
                instructionsPermissionDialog.appendChild(dialogList);
                Q.Dialogs.push({
                    title: Q.text.Streams.webrtc.webInstructionsDialog.dialogTitle,
                    className: 'Streams_webrtc_devices_dialog',
                    content: instructionsPermissionDialog,
                    apply: true
                });
            },

            showAndroidPermissionsInstructions: function (kind) {
                var instructionsPermissionDialog = document.createElement('DIV');
                instructionsPermissionDialog.className = 'Streams_webrtc_devices_dialog_inner';
                var dialogList = document.createElement('OL');
                dialogList.className = 'Streams_webrtc_instructions_dialog';
                dialogList.innerHTML = `<div>Permission for ` + kind + ` denied. To use it please follow these steps:</div><li>Go to your Android Settings</li>
									<li>Open "Apps & notifications"</li>
									<li>Find "` + (Q.Users.communityId) + `" and open it</li>
									<li>Tap on Permissions</li>
									<li>Enable ` + kind + `</li>`;
                instructionsPermissionDialog.appendChild(dialogList);
                Q.Dialogs.push({
                    title: Q.text.Streams.webrtc.webInstructionsDialog.dialogTitle,
                    className: 'Streams_webrtc_devices_dialog',
                    content: instructionsPermissionDialog,
                    apply: true
                });
            },

            showBrowserPermissionsInstructions: function (kind) {
                var instructionsPermissionDialog = document.createElement('DIV');
                instructionsPermissionDialog.className = 'Streams_webrtc_devices_dialog_inner';
                var dialogList = document.createElement('OL');
                dialogList.className = 'Streams_webrtc_instructions_dialog';
                dialogList.innerHTML = `<div>Permission for ` + kind + ` denied. To use it please follow these steps:</div><li>Reload this page</li>
									<li>` + (Q.info.useTouchEvents ? 'Tap' : 'Click') + ` "Allow" when dialog will appear asking for access to your ` + kind + `</li>`;
                instructionsPermissionDialog.appendChild(dialogList);
                Q.Dialogs.push({
                    title: Q.text.Streams.webrtc.webInstructionsDialog.dialogTitle,
                    className: 'Streams_webrtc_devices_dialog',
                    content: instructionsPermissionDialog,
                    apply: true
                });
            },

            cameraButtonHandler: function () {
                var tool = this;
                if (!Q.info.useTouchEvents) return;

                if (_isAndroidCordova && !tool.cameraPermissionGranted) {
                    tool.webrtcSignalingLib.localMediaControls.requestAndroidMediaPermissions({ video: true }, function () {
                        tool.cameraPermissionGranted = true;
                        tool.cameraButtonHandler();
                    }, function () {
                        tool.showAndroidPermissionsInstructions('Camera');
                    });
                    return;
                }

                var enabledVideoTracks = tool.webrtcSignalingLib.localParticipant().tracks.filter(function (t) {
                    return t.kind == 'video' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                }).length;

                if (!tool.webrtcRoomInstance.getOptions().audioOnlyMode && tool.webrtcSignalingLib.localMediaControls.frontCameraDevice() == null && enabledVideoTracks == 0 && tool.webrtcSignalingLib.localParticipant().videoStream == null && !(typeof cordova != 'undefined' && window.device.platform === 'iOS')) {

                    if (tool.webrtcRoomInstance.getOptions().limits && (tool.webrtcRoomInstance.getOptions().limits.video || tool.webrtcRoomInstance.getOptions().limits.audio)) {
                        tool.webrtcSignalingLib.localMediaControls.canITurnCameraOn().then(function () {
                            tool.videoInputsTool.turnOnCamera();
                        });
                    } else {
                        tool.videoInputsTool.turnOnCamera();
                    }

                    return;
                }
                if (document.querySelector('.Streams_webrtc_dialog-box.Streams_webrtc_dialog-box-select-camera') == null) {
                    tool.showControlsDialog('select-camera').show();
                }
            },

            audioButtonHandler: function () {
                var tool = this;
                if (!Q.info.useTouchEvents) return;

                if (document.querySelector('.Streams_webrtc_dialog-box Streams_webrtc_dialog-box-select-audio') == null) {
                    tool.showControlsDialog('select-audio').show();
                }
            },

            /**
             * Create control bar element
             * @method createControlBar
             */
            createControlBar: function (callback) {
                var tool = this;
                var controlBar = document.createElement('DIV');
                controlBar.className = 'Streams_webrtc_conference-control';
                var controlBarCon = document.createElement('DIV');
                controlBarCon.className = 'Streams_webrtc_conference-control-inner';
                controlBar.appendChild(controlBarCon);

                var broadcastBtnCon = document.createElement('DIV');
                broadcastBtnCon.className = 'Streams_webrtc_broadcast-control';
                controlBarCon.appendChild(broadcastBtnCon);
                var broadcastBtn = document.createElement('DIV');
                broadcastBtn.className = 'Streams_webrtc_broadcast-control-btn';
                broadcastBtnCon.appendChild(broadcastBtn);
                var broadcastBtnIcon = document.createElement('DIV');
                broadcastBtnIcon.className = 'Streams_webrtc_broadcast-control-icon';
                broadcastBtnIcon.innerHTML = icons.broadcastIcon;
                broadcastBtnCon.appendChild(broadcastBtnIcon);

                var speakerBtn = document.createElement('DIV');
                speakerBtn.className = 'Streams_webrtc_speaker-control-btn';
                speakerBtn.innerHTML = icons.enabledSpeaker;
                if (typeof cordova != 'undefined' && Q.info.isMobile) controlBarCon.appendChild(speakerBtn);

                var microphoneBtnCon = document.createElement('DIV');
                microphoneBtnCon.className = 'Streams_webrtc_microphone-control';
                controlBarCon.appendChild(microphoneBtnCon);
                var microphoneBtn = document.createElement('DIV');
                microphoneBtn.className = 'Streams_webrtc_microphone-control-btn';
                microphoneBtnCon.appendChild(microphoneBtn);
                var microphoneBtnIcon = document.createElement('DIV');
                microphoneBtnIcon.className = 'Streams_webrtc_microphone-control-icon';
                microphoneBtn.innerHTML = icons.microphone;
                microphoneBtnCon.appendChild(microphoneBtnIcon);
                var micCountdownBadge = document.createElement('DIV');
                micCountdownBadge.className = 'Streams_webrtc_mic-countdown';
                microphoneBtnCon.appendChild(micCountdownBadge);

                var cameraBtnCon = document.createElement('DIV');
                cameraBtnCon.className = 'Streams_webrtc_camera-control';
                if(!tool.webrtcRoomInstance.getOptions().audioOnlyMode) controlBarCon.appendChild(cameraBtnCon);
                var cameraBtn = document.createElement('DIV');
                cameraBtn.className = 'Streams_webrtc_camera-control-btn';
                cameraBtnCon.appendChild(cameraBtn);
                var cameraBtnIcon = document.createElement('DIV');
                cameraBtnIcon.className = 'Streams_webrtc_camera-control-icon';
                cameraBtnIcon.innerHTML = icons.disabledCamera;
                cameraBtnCon.appendChild(cameraBtnIcon);
                var countdownBadge = document.createElement('DIV');
                countdownBadge.className = 'Streams_webrtc_camera-countdown';
                cameraBtnCon.appendChild(countdownBadge);

                var textChatBtnCon = document.createElement('DIV');
                textChatBtnCon.className = 'Streams_webrtc_text-chat-btn';
                controlBarCon.appendChild(textChatBtnCon);
                var textChatBtn = document.createElement('DIV');
                textChatBtn.className = 'Streams_webrtc_text-chat-btn-btn';
                textChatBtnCon.appendChild(textChatBtn);
                var textChatBtnIcon = document.createElement('DIV');
                textChatBtnIcon.className = 'Streams_webrtc_text-chat-icon';
                textChatBtnIcon.innerHTML = icons.textChat;
                textChatBtnCon.appendChild(textChatBtnIcon);
                var textChatCounterBadge = document.createElement('DIV');
                textChatCounterBadge.className = 'Streams_webrtc_text-chat-counter Streams_webrtc_hidden';
                textChatBtnCon.appendChild(textChatCounterBadge);
                var textChatCounterBadgeSpan = document.createElement('SPAN');
                textChatCounterBadge.appendChild(textChatCounterBadgeSpan);

                var usersBtnCon = document.createElement('DIV');
                usersBtnCon.className = 'Streams_webrtc_manage-users-btn';
                controlBarCon.appendChild(usersBtnCon);
                var usersBtn = document.createElement('DIV');
                usersBtn.className = 'Streams_webrtc_manage-users-btn-btn';
                usersBtnCon.appendChild(usersBtn);
                var usersBtnIcon = document.createElement('DIV');
                usersBtnIcon.className = 'Streams_webrtc_manage-users-btn-icon';
                usersBtnIcon.innerHTML = icons.user;
                usersBtnCon.appendChild(usersBtnIcon);
                var counterBadge = document.createElement('DIV');
                counterBadge.className = 'Streams_webrtc_users-counter';
                usersBtnCon.appendChild(counterBadge);
                var counterBadgeSpan = document.createElement('SPAN');
                var participantsCount = tool.webrtcSignalingLib.roomParticipants().length;
                counterBadgeSpan.innerHTML = participantsCount;
                counterBadge.appendChild(counterBadgeSpan);
                var mediaRequestsCountdownBadge = document.createElement('DIV');
                mediaRequestsCountdownBadge.className = 'Streams_webrtc_requests-countdown';
                usersBtnCon.appendChild(mediaRequestsCountdownBadge);

                if (!tool.webrtcRoomInstance.getOptions().disconnectBtnInParticipants) {
                    var disconnectBtnCon = document.createElement('DIV');
                    disconnectBtnCon.className = 'Streams_webrtc_manage-users-btn';
                    controlBarCon.appendChild(disconnectBtnCon);
                    var disconnectBtn = document.createElement('DIV');
                    disconnectBtn.className = 'Streams_webrtc_disconnect-btn';
                    disconnectBtnCon.appendChild(disconnectBtn);
                    var disconnectBtnIcon = document.createElement('DIV');
                    disconnectBtnIcon.className = 'Streams_webrtc_disconnect-btn-icon';
                    disconnectBtnIcon.innerHTML = icons.disconnectIcon;
                    disconnectBtn.appendChild(disconnectBtnIcon);
                }

                tool.controlBar = controlBar;
                tool.cameraBtn = cameraBtn;
                tool.cameraBtnIcon = cameraBtnIcon;
                tool.speakerBtn = speakerBtn;
                tool.microphoneBtn = microphoneBtn;
                tool.textChatBtn = textChatBtn;
                tool.broadcastBtn = broadcastBtn;
                tool.usersBtn = usersBtn;
                tool.usersBtnIcon = usersBtnIcon;
                tool.usersCounter = counterBadge;
                tool.mediaRequestsCountdown = mediaRequestsCountdownBadge;
                tool.cameraCountdown = countdownBadge;
                tool.micCountdown = micCountdownBadge;
                tool.newMessagesCounter = textChatCounterBadgeSpan;

                var roomStream = tool.webrtcRoomInstance.roomStream();

                Q.Streams.Message.Total.setUpElement(textChatCounterBadgeSpan, roomStream.fields.publisherId, roomStream.fields.name, 'Streams/chat/message', tool);


                cameraBtn.addEventListener('touchend', function () {
                    var resizeTool = Q.Tool.from(tool.element.firstChild, "Q/resize");
                    if (resizeTool && resizeTool.state.appliedRecently) return;
                    tool.cameraButtonHandler()
                })

                speakerBtn.addEventListener('mouseup', function () {
                    var resizeTool = Q.Tool.from(tool.element.firstChild, "Q/resize");
                    if (resizeTool && resizeTool.state.appliedRecently) return;
                    tool.toggleAudioOutputSpeaker();
                })
                microphoneBtn.addEventListener('mouseup', function () {
                    var resizeTool = Q.Tool.from(tool.element.firstChild, "Q/resize");
                    if (resizeTool && resizeTool.state.appliedRecently) return;
                    tool.audioButtonHandler()
                })
                broadcastBtn.addEventListener('mouseup', function () {
                    var resizeTool = Q.Tool.from(tool.element.firstChild, "Q/resize");
                    if (resizeTool && resizeTool.state.appliedRecently) return;
                    tool.livestreamingEditor.show();
                })

                if (disconnectBtn) {
                    disconnectBtn.addEventListener('mouseup', function () {
                        Q.Dialogs.pop();
                        tool.webrtcRoomInstance.stop();
                    })
                }

                if(callback) callback(controlBar);
                return controlBar;
            },

            textChat: function () {
                var tool = this;
                function createPopup() {
                    
                    var chatBox = document.createElement('DIV');
                    chatBox.className = 'Streams_webrtc_popup-chat-box  Streams_webrtc_popup-box';

                    if (!Q.info.useTouchEvents) {
                        tool.textChatBtn.parentNode.appendChild(chatBox);
                    } else {
                        
                    }

                    tool.chatBox = chatBox;

                    tool.textChat = {
                        qbixDialog: null,
                        chatBox: chatBox,
                        static: false,
                        isHidden: true,
                        show: function () {
                            this.qbixDialog = Q.Dialogs.push({
                                title: 'Chat',
                                content: this.chatBox
                            });

                            this.scrollToTheBottom();
                            if (this.chatTool != null) this.chatTool.seen(true);

                            this.isHidden = false;

                            tool.newMessagesCounter.innerHTML = '0';
                            var msgCounter = tool.newMessagesCounter.parentNode;

                            if (!msgCounter.classList.contains('Streams_webrtc_hidden')) msgCounter.classList.add('Streams_webrtc_hidden');
                        },
                        toggle: function () {
                            if (this.isHidden) {
                                this.show();
                            } else this.hide();
                        },
                        scrollToTheBottom: function () {
                            if (!Q.getObject(['textChat', 'chatTool', 'element'], tool)) return;
                            tool.textChat.chatTool.element.scrollTop = tool.textChat.chatTool.element.scrollHeight;
                        }
                    }

                }

                function init() {
                    createPopup();

                    var initChat = function () {
                        Q.activate(
                            tool.chatBox.appendChild(
                                Q.Tool.setUpElement(
                                    "div", // or pass an existing element
                                    "Streams/chat",
                                    {
                                        publisherId: tool.webrtcRoomInstance.getOptions().roomPublisherId,
                                        streamName: 'Streams/webrtc/' + tool.webrtcRoomInstance.getOptions().roomId.replace('Streams/webrtc/', '')
                                    }
                                )
                            ),
                            {},
                            function () {
                                tool.textChat.chatTool = this;
                                tool.textChat.chatTool.seen(true);

                            }
                        );
                    }

                    if (Q.info.useTouchEvents) {

                        tool.textChatBtn.addEventListener('click', function (e) {
                            var resizeTool = Q.Tool.from(tool.element.firstChild, "Q/resize");
                            if (resizeTool && resizeTool.state.appliedRecently) return;
                            if (tool.textChat.chatTool == null) initChat();
                            tool.textChat.show();
                        });

                    } else {
                        tool.textChatBtn.addEventListener('mouseenter', function (e) {
                            tool.hideAllPopups();
                            if (tool.textChat.chatTool == null) initChat();
                            if (tool.hoverTimeout.textChatPopup != null) {
                                clearTimeout(tool.hoverTimeout.textChatPopup);
                                tool.hoverTimeout.textChatPopup = null;
                            }
                            tool.textChatBtn.parentNode.classList.add('Streams_webrtc_hover');
                            tool.textChat.scrollToTheBottom();
                            tool.textChat.isHidden = false;

                            if (tool.textChat.chatTool != null) tool.textChat.chatTool.seen(true);
                            var msgCounterBadge = tool.newMessagesCounter.parentNode;
                            if (!msgCounterBadge.classList.contains('Streams_webrtc_hidden')) msgCounterBadge.classList.add('Streams_webrtc_hidden');

                        });

                        tool.textChatBtn.addEventListener('mouseleave', function (e) {
                            if (tool.textChat.static) {
                                return;
                            }
                            if (e.target == e.currentTarget || e.currentTarget.contains(e.eventTarget)) {
                                e.stopPropagation();
                                e.preventDefault();
                            }
                            tool.hoverTimeout.textChatPopup = setTimeout(function () {
                                tool.textChatBtn.parentNode.classList.remove('Streams_webrtc_hover');
                                if(tool.textChat.chatTool) {
                                    tool.textChat.chatTool.seen(false);
                                    tool.textChat.isHidden = true;
                                }
                            }, 400)
                        });


                        var makeStatic = function () {
                            if (tool.hoverTimeout.textChatPopup != null) {
                                clearTimeout(tool.hoverTimeout.textChatPopup);
                                tool.hoverTimeout.textChatPopup = null;
                            }
                            tool.textChatBtn.parentNode.classList.add('Streams_webrtc_hover');
                            tool.textChat.static = true;
                        }

                        var removeStatic = function (e) {
                            if (tool.chatBox.contains(e.target) || tool.chatBox == e.target) {
                                return;
                            }
                            tool.textChatBtn.parentNode.classList.remove('Streams_webrtc_hover');
                            tool.textChat.static = false;
                            if (tool.textChat.chatTool != null) tool.textChat.chatTool.seen(false);
                            tool.textChat.isHidden = true;
                        }

                        window.addEventListener('click', removeStatic);
                        tool.chatBox.addEventListener('mouseup', makeStatic);

                        tool.chatBox.addEventListener('mouseenter', function (e) {

                            if (tool.hoverTimeout.textChatPopup != null) {
                                clearTimeout(tool.hoverTimeout.textChatPopup);
                                tool.hoverTimeout.textChatPopup = null;
                            }
                        });
                        tool.chatBox.addEventListener('mouseleave', function (e) {
                            if (tool.textChat.static) {
                                return;
                            }
                            setTimeout(function () {
                                tool.textChatBtn.parentNode.classList.remove('Streams_webrtc_hover');
                                tool.textChat.chatTool.seen(false);
                                tool.textChat.isHidden = true;
                            }, 400)

                        });
                    }

                }

                return {
                    init: init
                }
            },

            /**
             * Turn on/off camera (all local video tracks)
             * @method toggleVideo
             */
            toggleVideo: function () {
                var tool = this;
                var videoInputDevices = tool.webrtcSignalingLib.localMediaControls.videoInputDevices();

                if (tool.webrtcSignalingLib.localMediaControls.cameraIsEnabled() && tool.webrtcSignalingLib.localMediaControls.currentCameraDevice() == videoInputDevices[videoInputDevices.length - 1]) {
                    tool.webrtcSignalingLib.localMediaControls.disableVideo();
                } else {
                    if (!tool.webrtcSignalingLib.localMediaControls.cameraIsEnabled()) {
                        tool.webrtcSignalingLib.localMediaControls.enableVideo();
                    }
                    tool.webrtcSignalingLib.localMediaControls.toggleCameras();

                }

                if (tool.participantsListTool) tool.participantsListTool.toggleLocalVideo();
                tool.updateControlBar();
            },

            /**
             * Turn on/off microphone (local audio tracks)
             * @method toggleAudio
             */
            toggleAudio: function () {
                var tool = this;
                if (_isAndroidCordova && !tool.microphonePermissionGranted) {
                    tool.webrtcSignalingLib.localMediaControls.requestAndroidMediaPermissions({ audio: true }, function () {
                        tool.microphonePermissionGranted = true;
                        tool.toggleAudio();
                    }, function () {
                        tool.showAndroidPermissionsInstructions('Microphone');
                    });
                    return;
                }
                var localParticipant = tool.webrtcSignalingLib.localParticipant();
                var enabledAudioTracks = localParticipant.tracks.filter(function (t) {
                    return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                }).length;

                if (tool.webrtcSignalingLib.localMediaControls.micIsEnabled() && (enabledAudioTracks != 0 || localParticipant.audioStream != null)) {
                    log('controls: toggleAudio: disable audio')
                    tool.webrtcSignalingLib.localMediaControls.disableAudio();
                } else {
                    log('controls: toggleAudio: enable audio')

                    tool.webrtcSignalingLib.localMediaControls.enableAudio(function (e) {
                        log('controls: toggleAudio: enable audio callback')

                        if (_isiOSCordova)
                            tool.showIosPermissionsInstructions('Microphone');
                        else if (e.name == 'NotAllowedError' || e.name == 'MediaStreamError') tool.showBrowserPermissionsInstructions('microphone');
                    });
                }

                if (tool.participantsListTool) tool.participantsListTool.toggleLocalAudio();
                tool.updateControlBar();
            },

            /**
             * Turn on/off microphone (local audio tracks)
             * @method toggleAudio
             */
            toggleAudioOutputSpeaker: function () {
                var tool = this;
                if (tool.webrtcSignalingLib.localMediaControls.audioOutputMode().getCurrent() == 'speaker') {
                    tool.webrtcSignalingLib.localMediaControls.audioOutputMode().set('earpiece');
                } else {
                    tool.webrtcSignalingLib.localMediaControls.audioOutputMode().set('speaker');
                }
                tool.updateControlBar();
            },

            /**
             * Turn on/off all participants' audio tracks
             * @method toggleAudioOfAll
             */
            toggleAudioOfAll: function () {
                var tool = this;
                if (tool.webrtcSignalingLib.localMediaControls.speakerIsEnabled()) {
                    tool.webrtcSignalingLib.localMediaControls.disableAudioOfAll();
                } else {
                    tool.webrtcSignalingLib.localMediaControls.enableAudioOfAll();
                }

                tool.updateControlBar();
            },

            /**
             * Switch to another cameras (front/back)
             * @method toggleCameras
             */
            toggleCameras: function () {
                this.tool.webrtcSignalingLib.localMediaControls.toggleCameras();
            },

            /**
             * Update control buttons (active/inactive)
             * @method updateControlBar
             */
            updateControlBar: function () {
                var tool = this;
                log('controls: updateControlBar')
                if (tool.controlBar == null) return;
                var localParticipant = tool.webrtcSignalingLib.localParticipant();
                var localMediaControls = tool.webrtcSignalingLib.localMediaControls;

                var enabledVideoTracks = localParticipant.tracks.filter(function (t) {
                    return t.kind == 'video' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                }).length;

                if (enabledVideoTracks == 0 && tool.webrtcSignalingLib.localParticipant().videoStream == null) {
                    log('controls: updateControlBar 1')

                    tool.cameraBtnIcon.innerHTML = icons.disabledCamera;
                } else if (!localMediaControls.cameraIsEnabled()) {
                    log('controls: updateControlBar 2')
                    tool.cameraBtnIcon.innerHTML = icons.disabledCamera;
                } else if (localMediaControls.cameraIsEnabled()) {
                    log('controls: updateControlBar 3')
                    tool.cameraBtnIcon.innerHTML = icons.camera;
                }

                /*if (!localMediaControls.cameraIsEnabled()) {
                    tool.speakerBtn.classList.remove('Streams_webrtc_hidden');
                    tool.speakerBtn.innerHTML = localMediaControls.speakerIsEnabled() ? icons.enabledSpeaker : icons.disabledSpeaker;
                } else {
                    tool.speakerBtn.classList.add('Streams_webrtc_hidden');
                }*/


                var enabledAudioTracks = localParticipant.tracks.filter(function (t) {
                    return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                }).length;
                log('controls: updateControlBar enabledAudioTracks', enabledAudioTracks, tool.webrtcSignalingLib.localParticipant().audioStream)
                log('controls: updateControlBar !localMediaControls.micIsEnabled()', !localMediaControls.micIsEnabled())

                if (enabledAudioTracks == 0 && tool.webrtcSignalingLib.localParticipant().audioStream == null) {
                    log('controls: updateControlBar audio 1');
                    tool.microphoneBtn.innerHTML = icons.disabledMicrophone;
                } else if (!localMediaControls.micIsEnabled()) {
                    log('controls: updateControlBar audio 2');
                    tool.microphoneBtn.innerHTML = icons.disabledMicrophone;
                } else if (localMediaControls.micIsEnabled()) {
                    log('controls: updateControlBar audio 3');
                    tool.microphoneBtn.innerHTML = icons.microphone;
                }

                if (tool.webrtcSignalingLib.localMediaControls.audioOutputMode().getCurrent() == 'speaker') {
                    tool.speakerBtn.innerHTML = icons.enabledSpeaker;
                } else {
                    tool.speakerBtn.innerHTML = icons.disabledSpeaker;
                }

            },

            /**
             * Update butons for toggling view mode in participants popup
             * @method updateControlBar
             */
            updateViewModeBtns: function () {
                var tool = this;
                if (!tool.toggleViewBtns) return;
                var buttonsArr = tool.toggleViewBtns;
                var activeViewMode = tool.webrtcRoomInstance.screenRendering.getActiveViewMode();

                if (!activeViewMode || tool.webrtcRoomInstance.screenRendering.getScreens().length == 0) return;
                var viewModeToApply;
                if (activeViewMode == 'minimized' || activeViewMode == 'maximized' || activeViewMode == 'maximizedMobile' || activeViewMode == 'minimizedMobile') {
                    if (tool.state.loudestMode == 'all') {
                        viewModeToApply = 'loudest';
                    } else if (tool.state.loudestMode == 'allButMe') {
                        viewModeToApply = 'loudestExceptMe';
                    } else {
                        viewModeToApply = 'fullScreen';
                    }
                } else if (activeViewMode == 'tiled' || activeViewMode == 'tiledMobile') {
                    viewModeToApply = 'tiledView';
                } else if (activeViewMode == 'squaresGrid') {
                    viewModeToApply = 'squaresView';
                } else if (activeViewMode == 'regular') {
                    viewModeToApply = 'floatingView';
                } else if (activeViewMode == 'manual') {
                    viewModeToApply = 'manual';
                } else if (activeViewMode == 'fullScreen' || activeViewMode == 'screenSharing') {
                    viewModeToApply = 'fullScreen';
                } else if (activeViewMode == 'audio') {
                    viewModeToApply = 'audio';
                }

                for (var b in buttonsArr) {
                    if (buttonsArr[b].viewMode == viewModeToApply) {
                        buttonsArr[b].icon.innerHTML = buttonsArr[b].onIcon;
                    } else buttonsArr[b].icon.innerHTML = buttonsArr[b].offIcon;
                }
            },
            showControlsDialog: function (dialogType) {
                var tool = this;
                var _dialogContetntEl, title;
                if(dialogType == 'select-camera') {
                    _dialogContetntEl = tool.settingsPopupEl;
                    title = 'Video Setttings';
                } else if (dialogType == 'select-audio') {
                    title = 'Audio Setttings';
                    _dialogContetntEl = tool.audioSettingsPopupEl;
                } else if (dialogType == 'text-chat') {
                    title = 'chat';
                    _dialogContetntEl = tool.audioSettingsPopupEl;
                }

                function show() {
                    let dialog = Q.Dialogs.push({
						title: title,
						content: _dialogContetntEl,
						className: 'Streams_webrtc_dialog-con-' + dialogType,
					});

                    log('showControlsDialog', dialog)
                }

                function hide() {
                 
                }

                return {
                    show: show,
                    hide: hide
                }
            },
            
            /**
             * Create settings popup that appears while pointer hovers camera button on desktop/in modal box on mobile
             * @method createVideoSettingsPopup
             */
            createVideoSettingsPopup: function (callback) {
                var tool = this;

                Q.activate(
                    Q.Tool.setUpElement(
                        'DIV',
                        "Streams/webrtc/video",
                        {
                            controlsTool: tool,
                            webrtcUserInterface: tool.state.webrtcRoomInstance
                        }
                    ),
                    {},
                    onVideoInputsListCreated
                );

                function onVideoInputsListCreated() {
                    tool.videoInputsTool = this;
                    tool.updateChildToolLoadingProgress('Streams/webrtc/video');

                    tool.videoSettingsPopup = (function () {
                        var _popUpResizeobserver;
    
                        function show() {
                            tool.cameraBtn.parentNode.classList.add('Streams_webrtc_hover');
                        }
    
                        function hide() {
                            if (Q.info.isMobile) {
                                tool.showControlsDialog('select-camera').hide();
                            } else {
                                tool.cameraBtn.parentNode.classList.remove('Streams_webrtc_hover');
                            }
    
                        }
    
                        function createPopup() {
                            var settingsPopup = document.createElement('DIV');
                            settingsPopup.className = 'Streams_webrtc_popup-settings Streams_webrtc_popup-box';
                            var settingsPopupInner = document.createElement('DIV');
                            settingsPopupInner.className = 'Streams_webrtc_popup-settings-inner';
                            if (!tool.webrtcRoomInstance.getOptions().audioOnlyMode) settingsPopupInner.appendChild(tool.videoInputsTool.videoinputListEl);
    
                            tool.settingsPopupEl = settingsPopup;
                            settingsPopup.appendChild(settingsPopupInner);
                            tool.cameraBtn.parentNode.appendChild(settingsPopup);
    
                            tool.videoInputsTool.loadCamerasList();
    
                            if (!Q.info.useTouchEvents) {
                                tool.cameraBtn.addEventListener('mouseenter', function (e) {
                                    tool.hideAllPopups();
                                    if (tool.hoverTimeout.settingsPopup != null) {
                                        clearTimeout(tool.hoverTimeout.settingsPopup);
                                        tool.hoverTimeout.settingsPopup = null;
                                    }
                                    show();
                                });
    
                                tool.cameraBtn.addEventListener('mouseleave', function (e) {
                                    if (e.target == e.currentTarget || e.currentTarget.contains(e.eventTarget)) {
                                        e.stopPropagation();
                                        e.preventDefault();
                                    }
                                    tool.hoverTimeout.settingsPopup = setTimeout(function () {
                                        hide();
                                    }, 600)
                                });
    
                                settingsPopup.addEventListener('mouseenter', function (e) {
    
                                    if (tool.hoverTimeout.settingsPopup != null) {
                                        clearTimeout(tool.hoverTimeout.settingsPopup);
                                        tool.hoverTimeout.settingsPopup = null;
                                    }
                                })
                                settingsPopup.addEventListener('mouseleave', function (e) {
                                    tool.hoverTimeout.settingsPopup = setTimeout(function () {
                                        hide();
                                    }, 600)
    
                                });
    
                                _popUpResizeobserver = new ResizeObserver(function (entries) {
    
                                    let popupRect = settingsPopup.getBoundingClientRect();
                                    let windowHeight = window.innerHeight;
    
                                    let maxHeight;
                                    if (popupRect.top < 0) {
                                        maxHeight = popupRect.bottom;
                                    } else if (popupRect.bottom > windowHeight) {
                                        maxHeight = popupRect.bottom - windowHeight - popupRect.top;
                                    }
    
                                    for (let entry of entries) {
                                        let height = entry.contentRect.height;
                                        if (height > maxHeight) {
                                            settingsPopupInner.style.maxHeight = maxHeight + 'px';
                                            settingsPopupInner.style.overflowY = 'auto';
                                        } else if (height < maxHeight && settingsPopupInner.style.maxHeight != '' && settingsPopupInner.style.maxHeight != null) {
                                            settingsPopupInner.style.maxHeight = '';
                                            settingsPopupInner.style.overflowY = '';
                                        }
                                    }
                                })
    
                                _popUpResizeobserver.observe(settingsPopup)
                            }
    
                        }
    
                        return {
                            createPopup: createPopup,
                            show: show,
                            hide: hide
                        }
                    }());
    
                    tool.videoSettingsPopup.createPopup();

                    if(callback) callback();
                }
            },

            /**
             * Create settings popup that appears while pointer hovers camera button on desktop/in modal box on mobile
             * @method createAudioSettingsPopup
             */
            createAudioSettingsPopup: function () {
                var tool = this;

                Q.activate(
                    Q.Tool.setUpElement(
                        'DIV',
                        "Streams/webrtc/audio",
                        {
                            controlsTool: tool,
                            webrtcSignalingLib: tool.webrtcSignalingLib,
                            webrtcUserInterface: tool.state.webrtcRoomInstance
                        }
                    ),
                    {},
                    onAudioToolCreated
                );

                function onAudioToolCreated() {
                    tool.audioTool = this;
                    tool.updateChildToolLoadingProgress('Streams/webrtc/audio');

                    tool.audioSettingsPopup = (function () {
                        var _popUpResizeobserver;
    
                        function createSettingsPopUp() {
                            var settingsPopup = document.createElement('DIV');
                            settingsPopup.className = 'Streams_webrtc_popup-settings Streams_webrtc_popup-box';
                            var settingsPopupInner = document.createElement('DIV');
                            settingsPopupInner.className = 'Streams_webrtc_popup-settings-inner';
                            settingsPopupInner.appendChild(tool.audioTool.audioOutputListEl);
                            settingsPopupInner.appendChild(tool.audioTool.audioinputListEl);
    
                            tool.audioSettingsPopupEl = settingsPopup;
                            settingsPopup.appendChild(settingsPopupInner);
                            tool.microphoneBtn.parentNode.appendChild(settingsPopup);
    
                            tool.audioTool.loadAudioOutputList();
                            tool.audioTool.loadAudioInputList();
    
                            tool.hoverTimeout = { settingsPopup: null, audioSettingsPopup: null, participantsPopup: null };
                            if (!Q.info.useTouchEvents) {
                                tool.microphoneBtn.addEventListener('mouseenter', function (e) {
                                    tool.hideAllPopups();
                                    if (tool.hoverTimeout.audioSettingsPopup != null) {
                                        clearTimeout(tool.hoverTimeout.audioSettingsPopup);
                                        tool.hoverTimeout.audioSettingsPopup = null;
                                    }
                                    tool.microphoneBtn.parentNode.classList.add('Streams_webrtc_hover');
                                });
    
                                tool.microphoneBtn.addEventListener('mouseleave', function (e) {
                                    if (e.target == e.currentTarget || e.currentTarget.contains(e.eventTarget)) {
                                        e.stopPropagation();
                                        e.preventDefault();
                                    }
                                    tool.hoverTimeout.audioSettingsPopup = setTimeout(function () {
                                        tool.microphoneBtn.parentNode.classList.remove('Streams_webrtc_hover');
                                    }, 600)
                                });
    
                                settingsPopup.addEventListener('mouseenter', function (e) {
    
                                    if (tool.hoverTimeout.audioSettingsPopup != null) {
                                        clearTimeout(tool.hoverTimeout.audioSettingsPopup);
                                        tool.hoverTimeout.audioSettingsPopup = null;
                                    }
                                })
                                settingsPopup.addEventListener('mouseleave', function (e) {
                                    setTimeout(function () {
                                        tool.microphoneBtn.parentNode.classList.remove('Streams_webrtc_hover');
                                    }, 600)
    
                                });
    
    
                                _popUpResizeobserver = new ResizeObserver(function (entries) {
    
                                    let popupRect = settingsPopup.getBoundingClientRect();
                                    let windowHeight = window.innerHeight;
                                    let maxHeight;
                                    if (popupRect.top < 0) {
                                        maxHeight = popupRect.bottom;
                                    } else if (popupRect.bottom > windowHeight) {
                                        maxHeight = popupRect.bottom - windowHeight - popupRect.top;
                                    }
                                    for (let entry of entries) {
                                        let height = entry.contentRect.height;
                                        if (height > maxHeight) {
                                            settingsPopupInner.style.maxHeight = maxHeight + 'px';
                                            settingsPopupInner.style.overflowY = 'auto';
                                        } else if (height < maxHeight && settingsPopupInner.style.maxHeight != '' && settingsPopupInner.style.maxHeight != null) {
                                            settingsPopupInner.style.maxHeight = '';
                                            settingsPopupInner.style.overflowY = '';
                                        }
                                    }
                                })
    
                                _popUpResizeobserver.observe(settingsPopup)
                            }
    
                        }
    
                        return {
                            createSettingsPopUp: createSettingsPopUp
                        }
                    }());
    
                    tool.audioSettingsPopup.createSettingsPopUp();
                }
            },

            /**
             * Create participants popup that appears while pointer hovers users button on desktop/in modal box on mobile
             * @method createParticipantsPopup
             */
             createParticipantsPopup: function (callback) {
                var tool = this;

                Q.activate(
                    Q.Tool.setUpElement(
                        'DIV',
                        "Streams/webrtc/participants",
                        {
                            controlsTool: tool,
                            webrtcSignalingLib: tool.webrtcSignalingLib,
                            webrtcUserInterface: tool.state.webrtcRoomInstance
                        }
                    ),
                    {},
                    onParticipantsListCreated
                );

                function onParticipantsListCreated() {
                    tool.participantsListTool = this;
                    tool.updateChildToolLoadingProgress('Streams/webrtc/participants');

                    tool.participantsPopup = (function () {
                        var _popUpResizeobserver;

                        /**
                         * Toggles screens view mode depending on selected option
                         * @method toggleViewMode
                         * @param {Object} e
                         */
                        function toggleViewMode(e, buttonsArr) {
                            var btn = e.currentTarget;
                            var viewModeToApply = btn.dataset.viewMode;
                            for (var b in buttonsArr) {
                                if (buttonsArr[b].viewMode == viewModeToApply) {
                                    buttonsArr[b].icon.innerHTML = buttonsArr[b].onIcon;
                                    if (buttonsArr[b].handler != null) buttonsArr[b].handler();
                                } else buttonsArr[b].icon.innerHTML = buttonsArr[b].offIcon;
                            }
                        }

                        /**
                         * Create participants list that is used in popup (on desktop) or modal box (on mobile)
                         * @method createPopup
                         */
                        function createPopup() {
                            var participantsPopupEl = document.createElement('DIV');
                            participantsPopupEl.className = 'Streams_webrtc_popup-participants-list Streams_webrtc_popup-box';

                            var topBtns = document.createElement('DIV');
                            topBtns.className = 'participants-list-btns';
                            if (tool.webrtcRoomInstance.getOptions().disconnectBtnInParticipants) {
                                var disconnectBtn = document.createElement('DIV');
                                disconnectBtn.className = 'Streams_webrtc_disconnect-btn';
                                disconnectBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.disconnect", tool.text);
                                disconnectBtn.innerHTML = icons.disconnectIcon;
                                topBtns.appendChild(disconnectBtn);
                            }

                            if (!tool.webrtcRoomInstance.getOptions().audioOnlyMode) {
                                if (!Q.info.isMobile) {
                                    var floatingViewModeBtn = document.createElement('DIV');
                                    floatingViewModeBtn.className = 'Streams_webrtc_floating-mode-btn';
                                    floatingViewModeBtn.dataset.viewMode = 'floatingView';
                                    floatingViewModeBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.floatingScreens", tool.text);
                                    var floatingViewModeBtnIcon = document.createElement('SPAN');
                                    floatingViewModeBtnIcon.innerHTML = icons.freeViewModeOff;
                                    floatingViewModeBtn.appendChild(floatingViewModeBtnIcon);
                                    topBtns.appendChild(floatingViewModeBtn);
                                }

                                var tiledViewModeBtn = document.createElement('DIV');
                                tiledViewModeBtn.className = 'Streams_webrtc_tiled-mode-btn';
                                tiledViewModeBtn.dataset.viewMode = 'tiledView';
                                tiledViewModeBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.tiledScreens", tool.text);
                                var tiledViewModeBtnIcon = document.createElement('SPAN');
                                tiledViewModeBtnIcon.innerHTML = icons.tiledViewModeOff;
                                tiledViewModeBtn.appendChild(tiledViewModeBtnIcon);
                                topBtns.appendChild(tiledViewModeBtn);

                                if (Q.info.isMobile) {
                                    var squaresViewModeBtn = document.createElement('DIV');
                                    squaresViewModeBtn.className = 'Streams_webrtc_tiled-mode-btn';
                                    squaresViewModeBtn.dataset.viewMode = 'squaresView';
                                    squaresViewModeBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.tiledScreens", tool.text);
                                    var squaresViewModeBtnIcon = document.createElement('SPAN');
                                    squaresViewModeBtnIcon.innerHTML = icons.squaresViewModeOff;
                                    squaresViewModeBtn.appendChild(squaresViewModeBtnIcon);
                                    topBtns.appendChild(squaresViewModeBtn);
                                }


                                var loudestExceptMeBtn = document.createElement('DIV');
                                loudestExceptMeBtn.className = 'Streams_webrtc_lem-mode-btn';
                                loudestExceptMeBtn.dataset.viewMode = 'loudestExceptMe';
                                loudestExceptMeBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.loudestExceptMe", tool.text);
                                var loudestExceptMeBtnIcon = document.createElement('SPAN');
                                loudestExceptMeBtnIcon.innerHTML = icons.loudestExceptMeOff;
                                loudestExceptMeBtn.appendChild(loudestExceptMeBtnIcon);
                                topBtns.appendChild(loudestExceptMeBtn);

                                var loudestBtn = document.createElement('DIV');
                                loudestBtn.className = 'Streams_webrtc_loudest-mode-btn';
                                loudestBtn.dataset.viewMode = 'loudest';
                                loudestBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.maximizeLoudest", tool.text);
                                var loudestBtnIcon = document.createElement('SPAN');
                                loudestBtnIcon.innerHTML = icons.maximizeLoudestOff;
                                loudestBtn.appendChild(loudestBtnIcon);
                                topBtns.appendChild(loudestBtn);

                                /*var maximizeStaticBtn = document.createElement('DIV');
                                maximizeStaticBtn.className = 'Streams_webrtc_loudest-mode-btn';
                                maximizeStaticBtn.dataset.viewMode = 'maximizeStatic';
                                maximizeStaticBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.staticMaximized", tool.text);
                                var maximizeStaticBtnIcon = document.createElement('SPAN');
                                maximizeStaticBtnIcon.innerHTML = icons.staticMaximizeOff;
                                maximizeStaticBtn.appendChild(maximizeStaticBtnIcon);
                                topBtns.appendChild(maximizeStaticBtn);*/

                                var fullScreenBtn = document.createElement('DIV');
                                fullScreenBtn.className = 'Streams_webrtc_fullScreen-mode-btn';
                                fullScreenBtn.dataset.viewMode = 'fullScreen';
                                fullScreenBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.fullScreen", tool.text);
                                var fullScreenBtnIcon = document.createElement('SPAN');
                                fullScreenBtnIcon.innerHTML = icons.staticMaximizeOff;
                                fullScreenBtn.appendChild(fullScreenBtnIcon);
                                topBtns.appendChild(fullScreenBtn);

                                var audioLayoutBtn = document.createElement('DIV');
                                audioLayoutBtn.className = 'Streams_webrtc_audio-mode-btn';
                                audioLayoutBtn.dataset.viewMode = 'audio';
                                audioLayoutBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.fullScreen", tool.text);
                                var audioLayoutBtnIcon = document.createElement('SPAN');
                                audioLayoutBtnIcon.innerHTML = icons.audioLayoutOff;
                                audioLayoutBtn.appendChild(audioLayoutBtnIcon);
                                topBtns.appendChild(audioLayoutBtn);

                                if (!Q.info.isMobile) {
                                    var manualLayoutBtn = document.createElement('DIV');
                                    manualLayoutBtn.className = 'Streams_webrtc_loudest-mode-btn';
                                    manualLayoutBtn.dataset.viewMode = 'manual';
                                    manualLayoutBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.manual", tool.text);
                                    var manualLayoutBtnIcon = document.createElement('SPAN');
                                    manualLayoutBtnIcon.innerHTML = icons.dragIconOff;
                                    manualLayoutBtn.appendChild(manualLayoutBtnIcon);
                                    topBtns.appendChild(manualLayoutBtn);
                                }


                                participantsPopupEl.appendChild(topBtns)

                                var buttonsArr = [
                                    {
                                        viewMode: 'tiledView',
                                        btn: tiledViewModeBtn,
                                        icon: tiledViewModeBtnIcon,
                                        onIcon: icons.tiledViewModeOn,
                                        offIcon: icons.tiledViewModeOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('disabled');
                                            if (Q.info.isMobile)
                                                tool.webrtcRoomInstance.screenRendering.renderTiledScreensGridMobile();
                                            else tool.webrtcRoomInstance.screenRendering.renderTiledScreensGridDesktop();
                                        }
                                    },
                                    {
                                        viewMode: 'loudestExceptMe',
                                        btn: loudestExceptMeBtn,
                                        icon: loudestExceptMeBtnIcon,
                                        onIcon: icons.loudestExceptMeOn,
                                        offIcon: icons.loudestExceptMeOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('allButMe');
                                        }
                                    },
                                    {
                                        viewMode: 'loudest',
                                        btn: loudestBtn,
                                        icon: loudestBtnIcon,
                                        onIcon: icons.maximizeLoudestOn,
                                        offIcon: icons.maximizeLoudestOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('all');
                                        }
                                    },
                                    {
                                        viewMode: 'fullScreen',
                                        btn: fullScreenBtn,
                                        icon: fullScreenBtnIcon,
                                        onIcon: icons.staticMaximizeOn,
                                        offIcon: icons.staticMaximizeOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('disabled');
                                            var maximize = function (screen) {
                                                if (Q.info.isMobile)
                                                    tool.webrtcRoomInstance.screenRendering.renderMaximizedScreensGridMobile(screen, 300);
                                                else tool.webrtcRoomInstance.screenRendering.renderFullScreenLayout(screen, 300);
                                            }
                                            var activeScreen = tool.webrtcRoomInstance.screenRendering.getActiveSreen();
                                            if (activeScreen != null) {
                                                maximize(activeScreen);
                                            } else {
                                                var screens = tool.webrtcRoomInstance.screenRendering.getScreens();
                                                maximize(screens[0]);
                                            }
                                        }
                                    },
                                    {
                                        viewMode: 'audio',
                                        btn: audioLayoutBtn,
                                        icon: audioLayoutBtnIcon,
                                        onIcon: icons.audioLayoutOn,
                                        offIcon: icons.audioLayoutOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('disabled');
                                            if (Q.info.isMobile) {
                                                tool.webrtcRoomInstance.screenRendering.renderAudioScreensGrid();
                                            } else {
                                                tool.webrtcRoomInstance.screenRendering.renderAudioScreensGrid();
                                            }
                                        }
                                    }
                                ];

                                if (!Q.info.isMobile) {
                                    buttonsArr.unshift({
                                        viewMode: 'floatingView',
                                        btn: floatingViewModeBtn,
                                        icon: floatingViewModeBtnIcon,
                                        onIcon: icons.freeViewModeOn,
                                        offIcon: icons.freeViewModeOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('disabled');
                                            tool.webrtcRoomInstance.screenRendering.renderDesktopScreensGrid();
                                        }
                                    })
                                    buttonsArr.push({
                                        viewMode: 'manual',
                                        btn: manualLayoutBtn,
                                        icon: manualLayoutBtnIcon,
                                        onIcon: icons.dragIconOn,
                                        offIcon: icons.dragIconOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('disabled');
                                            tool.webrtcRoomInstance.screenRendering.renderManualScreensGrid();

                                        }
                                    })
                                }
                                if (Q.info.isMobile) {
                                    buttonsArr.unshift({
                                        viewMode: 'squaresView',
                                        btn: squaresViewModeBtn,
                                        icon: squaresViewModeBtnIcon,
                                        onIcon: icons.squaresViewModeOn,
                                        offIcon: icons.squaresViewModeOff,
                                        handler: function () {
                                            tool.webrtcRoomInstance.screenRendering.toggleLoudestScreenMode('disabled');
                                            if (Q.info.isMobile)
                                                tool.webrtcRoomInstance.screenRendering.renderSquaresGridMobile();
                                            else tool.webrtcRoomInstance.screenRendering.renderSquaresGridMobile();
                                        }
                                    })

                                }

                                for (var b in buttonsArr) {
                                    buttonsArr[b].btn.addEventListener('mouseup', function (e) {
                                        toggleViewMode(e, buttonsArr);
                                    });
                                }

                                tool.toggleViewBtns = buttonsArr;
                            } else {
                                participantsPopupEl.appendChild(topBtns);
                            }

                            participantsPopupEl.appendChild(tool.participantsListTool.element)

                            if (!Q.info.useTouchEvents) {
                                tool.usersBtn.parentNode.appendChild(participantsPopupEl);
                            } else {
                                /*var container = tool.usersBtn.parentNode
                                container.insertBefore(participantsPopupEl, tool.usersBtn);*/
                            }
                            //tool.participantsList = tool.participantsList;


                            if (Q.info.useTouchEvents) {
                                tool.usersBtn.addEventListener('touchend', function (e) {
                                    //tool.usersBtn.parentNode.classList.toggle('Streams_webrtc_hover');
                                    var resizeTool = Q.Tool.from(tool.element.firstChild, "Q/resize");
                                    if (resizeTool && resizeTool.state.appliedRecently) return;
                                    Q.Dialogs.push({
                                        title: Q.getObject("webrtc.participantsPopup.dialogTitle", tool.text),
                                        className: 'Streams_webrtc_participants-list',
                                        content: participantsPopupEl,
                                        apply: true,
                                        onActivate: function (dialog) {
                                            $(disconnectBtn).plugin('Q/clickable', {
                                                press: { size: 1.2 },
                                                release: { size: 1.2 }
                                            }).on(Q.Pointer.fastclick, function () {
                                                Q.Dialogs.pop();
                                                tool.webrtcRoomInstance.stop();
                                            });
                                            setTimeout(function () {
                                                var participants = tool.webrtcSignalingLib.roomParticipants();
                                                for (var i in participants) {
                                                    if (participants[i].soundMeter.visualizations.participantsPopup != null) participants[i].soundMeter.visualizations.participantsPopup.reset();
                                                }
                                            }, 3000)
                                        }
                                    });
                                }, true);

                            } else {
                                tool.usersBtn.addEventListener('mouseenter', function (e) {
                                    tool.hideAllPopups();

                                    if (tool.hoverTimeout.participantsPopup != null) {
                                        clearTimeout(tool.hoverTimeout.participantsPopup);
                                        tool.hoverTimeout.participantsPopup = null;
                                    }

                                    var participants = tool.webrtcSignalingLib.roomParticipants();
                                    for (var i in participants) {
                                        if (participants[i].soundMeter.visualizations.participantsPopup != null) participants[i].soundMeter.visualizations.participantsPopup.reset();
                                    }

                                    tool.usersBtn.parentNode.classList.add('Streams_webrtc_hover');
                                });
                                tool.usersBtn.addEventListener('mouseleave', function (e) {
                                    if (e.target == e.currentTarget || e.currentTarget.contains(e.eventTarget)) {
                                        e.stopPropagation();
                                        e.preventDefault();
                                    }
                                    tool.hoverTimeout.participantsPopup = setTimeout(function () {
                                        tool.usersBtn.parentNode.classList.remove('Streams_webrtc_hover');
                                    }, 600)
                                });

                                participantsPopupEl.addEventListener('mouseenter', function (e) {

                                    if (tool.hoverTimeout.participantsPopup != null) {
                                        clearTimeout(tool.hoverTimeout.participantsPopup);
                                        tool.hoverTimeout.participantsPopup = null;
                                    }
                                })
                                participantsPopupEl.addEventListener('mouseleave', function (e) {
                                    tool.hoverTimeout.participantsPopup = setTimeout(function () {
                                        tool.usersBtn.parentNode.classList.remove('Streams_webrtc_hover');
                                    }, 600)

                                });

                                _popUpResizeobserver = new ResizeObserver(function (entries) {

                                    let popupRect = participantsPopupEl.getBoundingClientRect();
                                    let windowHeight = window.innerHeight;
                                    let maxHeight;
                                    if (popupRect.top < 0) {
                                        maxHeight = popupRect.bottom;
                                    } else if (popupRect.bottom > windowHeight) {
                                        maxHeight = popupRect.bottom - windowHeight - popupRect.top;
                                    }
                                    for (let entry of entries) {
                                        let height = entry.contentRect.height;
                                        if (height >= maxHeight) {
                                            participantsPopupEl.style.maxHeight = maxHeight + 'px';
                                        } else if (height < maxHeight && participantsPopupEl.style.maxHeight != '' && participantsPopupEl.style.maxHeight != null) {
                                            participantsPopupEl.style.maxHeight = '';
                                        }
                                    }
                                })

                                _popUpResizeobserver.observe(participantsPopupEl)

                                $(disconnectBtn).plugin('Q/clickable', {
                                    press: { size: 1.2 },
                                    release: { size: 1.2 }
                                }).on(Q.Pointer.fastclick, function () {
                                    tool.webrtcRoomInstance.stop();
                                    if (tool.livestreamingEditorTool.broadcastClient) tool.livestreamingEditorTool.broadcastClient.disconnect();
                                });
                            }
                        }

                        return {
                            createPopup: createPopup
                        }
                    }())
                    tool.participantsPopup.createPopup();

                    if(callback) callback();
                }
                    
                    
                
            },
            initMediaLimits: function () {
                var tool = this;
                tool.limits = {
                    cameraRequestsQueue: [],
                    micRequestsQueue: [],
                    timersManager: {
                        generalTimerNearParticipantsIscon: {
                            showMostLowTimer: function () {
                                let allMediaRequests = tool.limits.micRequestsQueue.concat(tool.limits.cameraRequestsQueue);

                                if (allMediaRequests.length == 0) {
                                    tool.mediaRequestsCountdown.style.display = ''
                                    tool.mediaRequestsCountdown.innerHTML = '';
                                    return;
                                }

                                let mostLowTimer = allMediaRequests.reduce(function (prev, curr) {
                                    return prev.mediaRequestsCountdown.currentSec < curr.mediaRequestsCountdown.currentSec ? prev : curr;
                                });

                                for (let m in allMediaRequests) {
                                    allMediaRequests[m].mediaRequestsCountdown.callback = null;
                                }

                                mostLowTimer.mediaRequestsCountdown.callback = function (currentTimerTime) {
                                    tool.mediaRequestsCountdown.style.display = 'flex'
                                    tool.mediaRequestsCountdown.innerHTML = currentTimerTime;
                                }
                            },
                            removeTimersThatAreUp: function () {
                                for (let i = tool.limits.cameraRequestsQueue.length - 1; i >= 0; i--) {
                                    if (tool.limits.cameraRequestsQueue[i].mediaRequestsCountdown.timer == null) {
                                        tool.limits.cameraRequestsQueue.splice(i, 1);
                                    }
                                }
                                for (let i = tool.limits.micRequestsQueue.length - 1; i >= 0; i--) {
                                    if (tool.limits.micRequestsQueue[i].mediaRequestsCountdown.timer == null) {
                                        tool.limits.micRequestsQueue.splice(i, 1);
                                    }
                                }
                                tool.limits.timersManager.generalTimerNearParticipantsIscon.showMostLowTimer();
                            },
                            showGeneralCountDown: function (e) {

                                e.mediaRequestsCountdown = {};
                                let sec = e.mediaRequestsCountdown.currentSec = Math.round(e.waitingTime / 1000);
                                e.mediaRequestsCountdown.timer = setInterval(() => {
                                    e.mediaRequestsCountdown.currentSec = sec--;
                                    if (e.mediaRequestsCountdown.callback != null) e.mediaRequestsCountdown.callback(e.mediaRequestsCountdown.currentSec);
                                    if (sec < 0) {
                                        clearInterval(e.mediaRequestsCountdown.timer);
                                        e.mediaRequestsCountdown.timer = null;
                                        tool.limits.timersManager.generalTimerNearParticipantsIscon.removeTimersThatAreUp();
                                    }
                                }, 1000);
    
                            }
                        },
                        timerNearCameraIcon: {
                            showRedCountdown: function(e){
                                if (tool.giveCameraTimer) {
                                    clearInterval(tool.giveCameraTimer);
                                    tool.giveCameraTimer = null;
                                    tool.cameraCountdown.style.display = '';
                                }

                                if (tool.cameraCountdown.classList.contains('Streams_webrtc_camera-countdown-green')) {
                                    tool.cameraCountdown.classList.remove('Streams_webrtc_camera-countdown-green')
                                }
                                tool.cameraCountdown.style.display = 'flex'
                                let sec = Math.round(e.waitingTime / 1000);
                                tool.giveCameraTimer = setInterval(() => {
                                    tool.cameraCountdown.innerHTML = sec--;
                                    if (sec < 0) {
                                        tool.cameraCountdown.style.display = '';
                                        clearInterval(tool.giveCameraTimer);
                                        tool.giveCameraTimer = null;
                                    }
                                }, 1000);
                            },
                            showGreenCountdown: function (e) {
                                if (tool.giveCameraTimer) {
                                    clearInterval(tool.giveCameraTimer);
                                    tool.giveCameraTimer = null;
                                    tool.cameraCountdown.style.display = '';
                                }


                                if (!tool.cameraCountdown.classList.contains('Streams_webrtc_camera-countdown-green')) {
                                    tool.cameraCountdown.classList.add('Streams_webrtc_camera-countdown-green')
                                }
                                tool.cameraCountdown.style.display = 'flex'
                                let sec = Math.round(e.waitingTime / 1000);
                                tool.giveCameraTimer = setInterval(() => {
                                    tool.cameraCountdown.innerHTML = sec--;
                                    if (sec < 0) {
                                        tool.cameraCountdown.style.display = '';
                                        clearInterval(tool.giveCameraTimer);
                                        tool.giveCameraTimer = null;
                                    }
                                }, 1000);
                            }
                        },
                        timerNearMicIcon: {
                            showRedCountdown: function (e) {
                                if (tool.giveMicTimer) {
                                    clearInterval(tool.giveMicTimer);
                                    tool.giveMicTimer = null;
                                    tool.micCountdown.style.display = '';
                                }

                                if (tool.micCountdown.classList.contains('Streams_webrtc_mic-countdown-green')) {
                                    tool.micCountdown.classList.remove('Streams_webrtc_mic-countdown-green')
                                }
                                tool.micCountdown.style.display = 'flex'
                                let sec = Math.round(e.waitingTime / 1000);
                                tool.giveMicTimer = setInterval(() => {
                                    tool.micCountdown.innerHTML = sec--;
                                    if (sec < 0) {
                                        tool.micCountdown.style.display = '';
                                        clearInterval(tool.giveMicTimer);
                                        tool.giveMicTimer = null;
                                    }
                                }, 1000);
                            },
                            showGreenCountdown: function (e) {
                                if (tool.giveMicTimer) {
                                    clearInterval(tool.giveMicTimer);
                                    tool.giveMicTimer = null;
                                    tool.micCountdown.style.display = '';
                                }


                                if (!tool.micCountdown.classList.contains('Streams_webrtc_mic-countdown-green')) {
                                    tool.micCountdown.classList.add('Streams_webrtc_mic-countdown-green')
                                }
                                tool.micCountdown.style.display = 'flex'
                                let sec = Math.round(e.waitingTime / 1000);
                                tool.giveMicTimer = setInterval(() => {
                                    tool.micCountdown.innerHTML = sec--;
                                    if (sec < 0) {
                                        tool.micCountdown.style.display = '';
                                        clearInterval(tool.giveMicTimer);
                                        tool.giveMicTimer = null;
                                    }
                                }, 1000);
                            }
                        },
                        participantsScreen: {
                            showTimerForVideoSlotRequest: function (e) {
                                var createCountDownTimer = function (screen) {
                                    if (screen.cameraRequestTimer) {
                                        clearInterval(screen.cameraRequestTimer);
                                        screen.cameraRequestTimer = null;
                                    }
    
                                    if (screen.cameraRequestTimerEl) screen.cameraRequestTimerEl.style.display = 'block'
                                    let sec = Math.round(e.waitingTime / 1000);
                                    screen.cameraRequestTimer = setInterval(() => {
                                        screen.cameraRequestTimerEl.innerHTML = sec--;
                                        if (sec < 0) {
                                            screen.cameraRequestTimerEl.style.display = '';
                                            clearInterval(screen.cameraRequestTimer);
                                            screen.cameraRequestTimer = null;
                                        }
                                    }, 1000);
    
                                }
    
                                for (let s in e.participant.screens) {
                                    let screen = e.participant.screens[s];
    
                                    let existingIndicatorIcon = screen.videoScreen.nameTextEl.querySelector('.Streams_webrtc_camera_req_icon');
    
                                    if (existingIndicatorIcon) {
                                        createCountDownTimer(screen);
                                        continue;
                                    }
    
                                    let indicatorCon = document.createElement('DIV');
                                    indicatorCon.className = 'Streams_webrtc_media_req_icon Streams_webrtc_camera_req_icon';
                                    indicatorCon.innerHTML = icons.cameraRequest;
                                    let indicatorTimer = document.createElement('DIV');
                                    indicatorTimer.className = 'Streams_webrtc_media_req_timer';
                                    screen.cameraRequestTimerEl = indicatorTimer;
                                    indicatorCon.appendChild(indicatorTimer);
                                    screen.videoScreen.nameTextEl.insertBefore(indicatorCon, screen.videoScreen.nameTextEl.firstChild);
    
                                    createCountDownTimer(screen);
                                }
                            },
                            showTimerForAudioSlotRequest: function (e) {
                                var createCountDownTimer = function (screen) {
                                    if (screen.micRequestTimer) {
                                        clearInterval(screen.micRequestTimer);
                                        screen.micRequestTimer = null;
                                    }
    
                                    if (screen.micRequestTimerEl) screen.micRequestTimerEl.style.display = 'block'
                                    let sec = Math.round(e.waitingTime / 1000);
                                    screen.micRequestTimer = setInterval(() => {
                                        screen.micRequestTimerEl.innerHTML = sec--;
                                        if (sec < 0) {
                                            screen.micRequestTimerEl.style.display = '';
                                            clearInterval(screen.micRequestTimer);
                                            screen.micRequestTimer = null;
                                        }
                                    }, 1000);
    
                                }
    
                                for (let s in e.participant.screens) {
                                    let screen = e.participant.screens[s];
    
                                    let existingIndicatorIcon = screen.videoScreen.nameTextEl.querySelector('.Streams_webrtc_mic_req_icon');
    
                                    if (existingIndicatorIcon) {
                                        createCountDownTimer(screen);
                                        continue;
                                    }
    
                                    let indicatorCon = document.createElement('DIV');
                                    indicatorCon.className = 'Streams_webrtc_media_req_icon Streams_webrtc_mic_req_icon';
                                    indicatorCon.innerHTML = icons.microphoneRequest;
                                    let indicatorTimer = document.createElement('DIV');
                                    indicatorTimer.className = 'Streams_webrtc_media_req_timer';
                                    screen.micRequestTimerEl = indicatorTimer;
                                    indicatorCon.appendChild(indicatorTimer);
                                    screen.videoScreen.nameTextEl.insertBefore(indicatorCon, screen.videoScreen.nameTextEl.firstChild);
    
                                    createCountDownTimer(screen);
                                }
                            }
                        },
                    },
                    addCameraRequestToQueue: function (e) {
                        tool.limits.cameraRequestsQueue.push(e);
                        tool.limits.timersManager.generalTimerNearParticipantsIscon.showMostLowTimer();
                    },
                    removeCameraRequestFromQueue: function (participant) {
                        for (let i = tool.limits.cameraRequestsQueue.length - 1; i >= 0; i--) {
                            if (tool.limits.cameraRequestsQueue[i].participant == participant) {
                                if (tool.limits.cameraRequestsQueue[i].mediaRequestsCountdown.timer) clearInterval(tool.limits.cameraRequestsQueue[i].mediaRequestsCountdown.timer);
                                tool.limits.cameraRequestsQueue[i].mediaRequestsCountdown.timer = null;
                                tool.limits.cameraRequestsQueue[i].mediaRequestsCountdown.callback = null;
                                tool.limits.cameraRequestsQueue.splice(i, 1);
                            }
                        }
                        tool.limits.timersManager.generalTimerNearParticipantsIscon.showMostLowTimer();
                    },
                    addMicRequesttoQueue: function (e) {
                        tool.limits.micRequestsQueue.push(e);
                        tool.limits.timersManager.generalTimerNearParticipantsIscon.showMostLowTimer();
                    },
                    removeMicRequestFromQueue: function (participant) {
                        for (let i = tool.limits.micRequestsQueue.length - 1; i >= 0; i--) {
                            if (tool.limits.micRequestsQueue[i].participant == participant) {
                                if (tool.limits.micRequestsQueue[i].mediaRequestsCountdown.timer) clearInterval(tool.limits.micRequestsQueue[i].mediaRequestsCountdown.timer);
                                tool.limits.micRequestsQueue[i].mediaRequestsCountdown.timer = null;
                                tool.limits.micRequestsQueue[i].mediaRequestsCountdown.callback = null;
                                tool.limits.micRequestsQueue.splice(i, 1);
                            }
                        }
                        tool.limits.timersManager.generalTimerNearParticipantsIscon.showMostLowTimer();
                    },
                    //this is dialog that is shown when user turns mic on. The dialog shows two options:
                    //turn on mic+show avatar; turn on mic+camera
                    selectMediaDialog: function (callback, onCloseCallback) {
                        tool.webrtcSignalingLib.localMediaControls.getRoomLimitsInfo().then(function (result) {
                            let dialogCon = document.createElement('DIV');
                            dialogCon.className = 'Streams_webrtc_request_speak_con'
                            let dialogInner = document.createElement('DIV');
                            dialogInner.className = 'Streams_webrtc_request_speak_inner';
                            dialogCon.appendChild(dialogInner);
                            let dialogMsg = document.createElement('DIV');
                            dialogMsg.className = 'Streams_webrtc_request_speak_msg';
                            dialogInner.appendChild(dialogMsg);
                            if (result.activeAudios != 0) {
                                let text = tool.text.webrtc.requestSpeakDialog;
                                if (text != null) {
                                    dialogMsg.innerHTML = text.msg.interpolate({ count: result.activeAudios, seconds: result.timeBeforeForceUserToDisconnect / 1000 + 's' });
                                } else {
                                    dialogMsg.innerHTML = 'There are currently ' + result.activeAudios + ' people speaking in the meeting. Do you want to replace one of them after allowing them ' + (result.timeBeforeForceUserToDisconnect / 1000) + 's seconds to finish speaking?';
                                }
                            }
                            let dialogButtons = document.createElement('DIV');
                            dialogInner.appendChild(dialogButtons);
                            dialogButtons.className = 'Streams_webrtc_request_speak_btns';
                            let audioAndVideoBtn = document.createElement('BUTTON');
                            dialogButtons.appendChild(audioAndVideoBtn);
                            audioAndVideoBtn.className = 'Q_button Streams_webrtc_request_speak_av';
                            audioAndVideoBtn.innerHTML = 'Audio and Video Together';
                            let audioOnlyBtn = document.createElement('BUTTON');
                            dialogButtons.appendChild(audioOnlyBtn);
                            audioOnlyBtn.className = 'Q_button Streams_webrtc_request_speak_ao';
                            audioOnlyBtn.innerHTML = 'Audio Only with Avatar';

                            audioAndVideoBtn.addEventListener('click', function () {
                                callback({ video: true, audio: true });
                                Q.Dialogs.pop();
                            })

                            audioOnlyBtn.addEventListener('click', function () {
                                if (callback) callback({ video: false, audio: true });
                                Q.Dialogs.pop();
                            })

                            Q.Dialogs.push({
                                title: Q.text.Streams.webrtc.requestSpeakDialog.dialogTitle,
                                className: 'Streams_webrtc_request_speak',
                                content: dialogCon,
                                apply: false,
                                onClose: onCloseCallback
                            });
                        });
                    },
                    onCameraRequestedHandler: function (e) {
                        log('controls: cameraRequested', e);
                        //show indicator near participant in participant popup
                        if(tool.participantsListTool) {
                            tool.participantsListTool.hideMediaRequestIndicator(e, 'camera');
                            tool.participantsListTool.showMediaRequestIndicator(e, 'camera');
                        }


                        //if I'm the use who should give my camera slot to another user, set countdown timer in red circle near my camera icon
                        if (e.forceDisconnectUser != null && e.forceDisconnectUser == tool.webrtcSignalingLib.localParticipant().sid) {
                            tool.limits.timersManager.timerNearCameraIcon.showRedCountdown(e);
                        } else if (e.fromSid == tool.webrtcSignalingLib.localParticipant().sid.replace('/webrtc#', '')) {
                            //if I'm a user who made request for camera slot, show countdown timer in green circle near my camera icon
                            tool.limits.timersManager.timerNearCameraIcon.showGreenCountdown(e);
                        }

                        //show countdown near users icon (participants window)
                        tool.limits.timersManager.generalTimerNearParticipantsIscon.showGeneralCountDown(e);
                        
                        //show indicator in participant's screen
                        if (e.participant && e.participant.screens.length != 0) {
                            tool.limits.timersManager.participantsScreen.showTimerForVideoSlotRequest(e);
                        }

                        tool.limits.addCameraRequestToQueue(e);
                    },
                    onMicRequestedHandler: function (e) {
                        if(tool.participantsListTool) {
                            tool.participantsListTool.hideMediaRequestIndicator(e, 'mic');
                            tool.participantsListTool.showMediaRequestIndicator(e, 'mic');
                        }

                        //set timeout near mic icon
                        if (e.forceDisconnectUser != null && e.forceDisconnectUser == tool.webrtcSignalingLib.localParticipant().sid) {
                            //if I am the user who will be forced to turn mic off, show red timer
                            tool.limits.timersManager.timerNearMicIcon.showRedCountdown(e);
                        } else if (e.fromSid == tool.webrtcSignalingLib.localParticipant().sid.replace('/webrtc#', '')) {
                            //if I am a use who is waiting on mic slot, show green timer
                            tool.limits.timersManager.timerNearMicIcon.showGreenCountdown(e);
                            if(e.togetherWithAvatarSlot) {
                                tool.limits.timersManager.timerNearCameraIcon.showGreenCountdown(e);  
                            }
                        }
                       
                        //show countdown near users icon (participants window)
                        tool.limits.timersManager.generalTimerNearParticipantsIscon.showGeneralCountDown(e);

                        //show indicator in participant's screen
                        if (e.participant && e.participant.screens.length != 0) {
                            tool.limits.timersManager.participantsScreen.showTimerForAudioSlotRequest(e);
                        }

                        tool.limits.addMicRequesttoQueue(e);
                    }
                }
                //tool.mediaRequestsCountdown = null;
                tool.giveCameraTimer = null;
                tool.giveMicTimer = null;
            },

            hideAllPopups: function () {
                var popups = document.querySelectorAll('.Streams_webrtc_conference-control-inner .Streams_webrtc_hover');
                popups.forEach(function (el) {
                    if (el.classList.contains('Streams_webrtc_hover')) {
                        el.classList.remove('Streams_webrtc_hover');
                    }
                })
            },

            initLivestreamingEditor: function () {
                var tool = this;
                var roomStream = tool.webrtcRoomInstance.roomStream();
                var videoBgLink;
                var imageBgLink;
                var watermarkImageLink;
                var watermarkVideoLink;
                var watermarkOpacity = 0.7;

                if (roomStream.fields.attributes != '') {
                    var decodedAttributes = JSON.parse(roomStream.fields.attributes);
                    var background = decodedAttributes.background;
                    if (background) {
                        if (background.video && background.video.src) {
                            videoBgLink = background.video.src;
                        }
                        if (background.image && background.image.src) {
                            imageBgLink = background.image.src;
                        }
                    }
                    var watermark = decodedAttributes.watermark;
                    if (watermark) {
                        if (watermark.video && watermark.video.src) {
                            watermarkVideoLink = watermark.video.src;
                        }
                        if (watermark.image && watermark.image.src) {
                            watermarkImageLink = watermark.image.src;
                        }
                        if (watermark.image && watermark.opacity) {
                            watermarkOpacity = watermark.opacity;
                        }
                    }
                }
                Q.activate(
                    Q.Tool.setUpElement(
                        "div", // or pass an existing element
                        "Streams/webrtc/livestreaming",
                        {
                            controlsTool: tool,
                            webrtcSignalingLib: tool.webrtcSignalingLib,
                            webrtcUserInterface: tool.state.webrtcRoomInstance,
                            managingScenes: (imageBgLink || videoBgLink || watermarkImageLink) ? false : true,
                            managingVisualSources: (imageBgLink || videoBgLink || watermarkImageLink) ? false : true,
                            managingAudioSources: true
                        }
                    ),
                    {},
                    function () {
                        log('Streams/webrtc/livestreaming', this)
                        tool.livestreamingEditorTool = this;
                        this.get().then(function(livestreamingEditor){
                            tool.livestreamingEditor = livestreamingEditor;

                            log('controls: Streams/webrtc/livestreaming', tool.livestreamingEditor)

                            if (imageBgLink) {
                                tool.livestreamingEditor.sourcesInterface.visualSources.addBackground(imageBgLink, { type: 'image' });
                            }

                            if (videoBgLink) {
                                tool.livestreamingEditor.sourcesInterface.visualSources.addBackground(videoBgLink, { type: 'video' });
                            }
                            if (watermarkImageLink) {
                                tool.livestreamingEditor.sourcesInterface.visualSources.addWatermark(watermarkImageLink, {
                                    type: 'image',
                                    position: 'right-bottom',
                                    opacity: watermarkOpacity
                                });
                            }
                        });
                        
                    }
                );
            },

            closeAllDialogs: function () {
                var tool = this;
                var elems = [].slice.call(document.getElementsByClassName('Streams_webrtc_dialog-con')).concat([].slice.call(document.getElementsByClassName('Streams_webrtc_dialog-bg')));
                for (var i = 0; i < elems.length; i++) {
                    elems[i].parentNode.removeChild(elems[i]);
                }
                tool.state.dialogIsOpened = false;
            },
            getIcons: function () {
                return icons;
            }
        }

    );

})(window.jQuery, window);