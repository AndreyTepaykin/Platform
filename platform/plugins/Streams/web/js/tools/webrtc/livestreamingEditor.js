(function ($, window, undefined) {
    var _streamingIcons = {
        addItem: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-5v5h-2v-5h-5v-2h5v-5h2v5h5v2z"/></svg>',
        removeItem: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 16.538l-4.592-4.548 4.546-4.587-1.416-1.403-4.545 4.589-4.588-4.543-1.405 1.405 4.593 4.552-4.547 4.592 1.405 1.405 4.555-4.596 4.591 4.55 1.403-1.416z"/></svg>',
        moveUp: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M11.574 3.712c.195-.323.662-.323.857 0l9.37 15.545c.2.333-.039.757-.429.757l-18.668-.006c-.385 0-.629-.422-.428-.758l9.298-15.538zm.429-2.483c-.76 0-1.521.37-1.966 1.111l-9.707 16.18c-.915 1.523.182 3.472 1.965 3.472h19.416c1.783 0 2.879-1.949 1.965-3.472l-9.707-16.18c-.446-.741-1.205-1.111-1.966-1.111z"/></svg>',
        moveDown: '<svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewBox="0 0 24 24"><path d="M12.431,19.509c-0.195,0.323-0.662,0.323-0.857,0L2.205,3.964c-0.2-0.333,0.039-0.757,0.429-0.757l18.668,0.006 c0.385,0,0.629,0.422,0.428,0.758L12.431,19.509z M12.002,21.992c0.76,0,1.521-0.37,1.966-1.111l9.707-16.179 c0.915-1.523-0.183-3.473-1.965-3.473H2.294c-1.783,0-2.879,1.949-1.965,3.473l9.707,16.179 C10.482,21.622,11.242,21.992,12.002,21.992z"/></svg>',
        visible: '<svg width="540.50592" height="437.31812" viewBox="0 0 540.50592 437.31812" version="1.1" id="svg1689" sodipodi:docname="live_visibility_icon.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"> <defs id="defs1693" /> <sodipodi:namedview id="namedview1691" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.5652103" inkscape:cx="212.43151" inkscape:cy="221.69545" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="svg1689" /> <path d="m 337.81621,227.8639 c 0,37.24987 -30.31337,67.56324 -67.56324,67.56324 -37.24987,0 -67.56324,-30.31337 -67.56324,-67.56324 0,-37.24987 30.31337,-67.56325 67.56324,-67.56325 37.24987,0 67.56324,30.31338 67.56324,67.56325 z m 202.68973,-10.11197 c 0,0 -95.75964,190.28062 -269.91515,190.28062 C 108.88943,408.03255 0,217.75193 0,217.75193 c 0,0 100.12872,-170.056681 270.59079,-170.056681 173.27719,0 269.91515,170.056681 269.91515,170.056681 z M 382.85838,227.8639 c 0,-62.09062 -50.51479,-112.60541 -112.60541,-112.60541 -62.09062,0 -112.60541,50.51479 -112.60541,112.60541 0,62.09062 50.51479,112.6054 112.60541,112.6054 62.09062,0 112.60541,-50.51478 112.60541,-112.6054 z" id="path1687" style="display:inline;stroke-width:22.521" /> </svg>',
        hidden: '<svg width="540.50592" height="437.31812" viewBox="0 0 540.50592 437.31812" version="1.1" id="svg1689" sodipodi:docname="live_visibility_icon.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"> <defs id="defs1693" /> <sodipodi:namedview id="namedview1691" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.5652103" inkscape:cx="212.43151" inkscape:cy="221.69545" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="svg1689" /> <path id="path1687" style="display:inline;stroke-width:22.521" d="m 152.84766,76.064453 57.74218,56.474607 c 17.3238,-10.88282 37.73905,-17.28125 59.66407,-17.28125 62.09055,0 112.60351,50.51491 112.60351,112.60547 0,21.03425 -5.90182,40.66978 -15.98242,57.5332 l 64.62695,63.20704 c 71.22229,-55.83125 109.00391,-130.85157 109.00391,-130.85157 0,0 -96.639,-170.056638 -269.91602,-170.056638 -44.15503,0 -83.54337,11.459721 -117.74218,28.369141 z m 252.58007,290.945317 -58.33789,-57.0586 c -20.14357,18.86683 -47.12473,30.51758 -76.83593,30.51758 -62.09056,0 -112.60547,-50.51491 -112.60547,-112.60547 0,-28.81612 10.97175,-55.05304 28.83984,-74.99023 L 124.32422,92.072266 C 44.402437,142.45896 0,217.75195 0,217.75195 c 0,0 108.88865,190.28125 270.58984,190.28125 52.15054,0 97.213,-17.11736 134.83789,-41.02343 z m -161.13281,-201.50586 88.8418,86.89257 c 2.98302,-7.61638 4.67969,-15.87327 4.67969,-24.5332 0,-37.24983 -30.31267,-67.5625 -67.5625,-67.5625 -9.19449,0 -17.96129,1.86091 -25.95899,5.20313 z m 70.58789,112.94726 -96.22265,-94.11133 c -9.94452,11.76869 -15.97071,26.94827 -15.97071,43.52344 0,37.24983 30.31462,67.56445 67.56446,67.56445 17.11136,0 32.71103,-6.44924 44.6289,-16.97656 z" sodipodi:nodetypes="ccsscccscccsscccscccsscccssc" /> <rect id="rect454" width="31.390423" height="610.87592" x="1.5284805" y="24.889511" ry="14.836177" transform="rotate(-45.635355)" /> </svg>',
        enabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="25px" height="24px" viewBox="0 0 25 24" enable-background="new 0 0 25 24" xml:space="preserve"> <path d="M9.981,19.759c0,0.068-0.088,0.089-0.122,0.151c-0.013,0.021-0.07,0.045-0.088,0.064c-0.035,0.039-0.102,0.067-0.15,0.088 c-0.025,0.01-0.063,0.015-0.088,0.016c-0.025,0.004-0.06,0.003-0.084-0.001c-0.069-0.011-0.086-0.136-0.147-0.17L4.59,16.266H0.603 c-0.028,0-0.056,0.104-0.084,0.1c-0.027-0.01-0.053,0.035-0.077,0.021c-0.05-0.026-0.089-0.04-0.118-0.09 c-0.014-0.024-0.076-0.037-0.083-0.063c-0.007-0.026-0.062-0.041-0.062-0.07V6.845c0-0.028,0.055-0.057,0.062-0.084 c0.007-0.027,0.044-0.053,0.058-0.078C0.312,6.66,0.343,6.638,0.363,6.617c0.04-0.04,0.096-0.098,0.15-0.113 c0.026-0.007,0.062-0.04,0.09-0.04h3.988l4.708-3.505c0.022-0.013,0.044-0.014,0.067-0.024c0.065-0.028,0.086-0.014,0.156-0.017 C9.549,2.924,9.574,2.934,9.599,2.94c0.023,0.011,0.048,0.022,0.07,0.037C9.69,2.992,9.711,3.01,9.729,3.029 c0.036,0.039,0.146,0.087,0.158,0.138C9.892,3.193,9.979,3.22,9.979,3.246v16.513H9.981z"/> <path d="M11.871,19.104c-0.117,0-0.234-0.043-0.324-0.129c-0.184-0.182-0.188-0.478-0.01-0.662 c6.658-6.859,0.281-13.344,0.008-13.617c-0.186-0.182-0.186-0.477-0.004-0.66c0.182-0.183,0.477-0.184,0.66-0.002 c0.074,0.074,7.297,7.416,0.006,14.932C12.117,19.059,11.994,19.104,11.871,19.104z"/> <path d="M14.943,21.036c-0.094,0.096-0.215,0.144-0.336,0.144c-0.117,0-0.234-0.046-0.324-0.132 c-0.186-0.181-0.189-0.478-0.012-0.659c8.684-8.95,0.362-17.407,0.01-17.764c-0.188-0.182-0.188-0.477-0.004-0.66 c0.182-0.184,0.477-0.184,0.658-0.003C15.031,2.056,24.258,11.433,14.943,21.036z"/> </svg>',
        disabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="25px" height="24px" viewBox="0 0 25 24" enable-background="new 0 0 25 24" xml:space="preserve"> <path d="M9.979,3.246c0-0.026-0.087-0.053-0.092-0.079C9.875,3.116,9.765,3.068,9.729,3.029C9.711,3.01,9.69,2.992,9.669,2.977 C9.647,2.962,9.622,2.951,9.599,2.94c-0.025-0.006-0.05-0.016-0.077-0.022c-0.07,0.003-0.091-0.011-0.156,0.017 c-0.023,0.01-0.045,0.011-0.067,0.024L4.591,6.464H0.603c-0.028,0-0.064,0.033-0.09,0.04c-0.054,0.015-0.11,0.073-0.15,0.113 C0.343,6.638,0.312,6.66,0.299,6.683C0.285,6.708,0.248,6.734,0.241,6.761C0.234,6.788,0.179,6.817,0.179,6.845v9.317 c0,0.029,0.055,0.044,0.062,0.07c0.007,0.026,0.069,0.039,0.083,0.063c0.029,0.05,0.068,0.063,0.118,0.09 c0.024,0.015,0.05-0.03,0.077-0.021c0.028,0.004,0.056-0.1,0.084-0.1H4.59l1.396,1.079l3.993-4.638V3.246z"/> <path d="M9.302,19.907c0.061,0.034,0.078,0.159,0.147,0.17c0.024,0.004,0.059,0.005,0.084,0.001 c0.025-0.001,0.063-0.006,0.088-0.016c0.048-0.021,0.115-0.049,0.15-0.088c0.018-0.02,0.075-0.043,0.088-0.064 c0.034-0.063,0.122-0.083,0.122-0.151H9.979v-4.622l-2.738,3.178L9.302,19.907z"/> <path d="M14.483,7.478c-0.949-2.085-2.251-3.412-2.282-3.443c-0.184-0.182-0.479-0.181-0.66,0.002 c-0.182,0.183-0.182,0.478,0.004,0.66c0.121,0.121,1.444,1.467,2.297,3.525l0.35-0.406L14.483,7.478z"/> <path d="M14.394,10.011c0.475,2.369,0.058,5.299-2.856,8.301c-0.178,0.185-0.174,0.48,0.01,0.662 c0.09,0.086,0.207,0.129,0.324,0.129c0.123,0,0.246-0.045,0.336-0.138c3.443-3.549,3.648-7.058,2.899-9.783l-0.063,0.074 L14.394,10.011z"/> <path d="M16.937,4.629c-0.997-1.646-1.97-2.637-2.001-2.667c-0.182-0.181-0.477-0.181-0.658,0.003 c-0.185,0.183-0.185,0.478,0.004,0.66c0.116,0.117,1.094,1.115,2.045,2.714l0.392-0.455L16.937,4.629z"/> <path d="M17.113,6.853c1.516,3.375,2.169,8.372-2.842,13.536c-0.178,0.182-0.174,0.479,0.012,0.659 c0.09,0.086,0.207,0.132,0.324,0.132c0.121,0,0.242-0.048,0.336-0.144c5.503-5.673,4.534-11.267,2.8-14.915l-0.028,0.033 L17.113,6.853z"/> <polygon points="20.305,1.034 19.104,0 15.508,4.175 14.896,4.884 12.988,7.102 12.371,7.815 8.158,12.707 4.162,17.348 0.179,21.971 1.38,23.006 5.418,18.316 8.158,15.137 13.223,9.257 13.869,8.506 15.895,6.155 16.506,5.445 18.203,3.473 18.811,2.768 "/> </svg>',
        liveOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="26px" height="15px" viewBox="-0.034668 -0.6616211 26 15" enable-background="new -0.034668 -0.6616211 26 15" xml:space="preserve"> <defs> </defs> <path fill="#C12337" d="M23.887207,0.0009766h-2.0361328L3.1806641,0H1.1430664 C0.5151367,0,0.0043945,0.2900391,0.0019531,0.6479492L0.0009766,12.2397461L0,13.4038086 c0.0009766,0.3574219,0.5117188,0.6494141,1.1420898,0.6494141l20.7070313,0.0019531h2.0371094 c0.6298828,0,1.1416016-0.2929688,1.1416016-0.6513672L25.0288086,0.652832 C25.0288086,0.2929688,24.5170898,0.0009766,23.887207,0.0009766z M7.340332,10.9155273H3.0019531V3.1391602h1.0146484v6.9326172 H7.340332V10.9155273z M9.4628906,10.9155273H8.4477539V3.1391602h1.0151367V10.9155273z M14.0317383,10.9155273h-1.1074219 l-2.5498047-7.7763672h1.0961914l1.2109375,3.8300781c0.3237305,1.0507813,0.612793,1.9960938,0.831543,2.9082031h0.0234375 c0.2197266-0.9013672,0.53125-1.8818359,0.8886719-2.8969727l1.3154297-3.8413086h1.0722656L14.0317383,10.9155273z M22.027832,10.9155273h-4.3867188V3.1391602h4.2128906v0.8422852h-3.1962891v2.4575195h3.0117188v0.8305664h-3.0117188v2.8041992 h3.3701172V10.9155273z"/> </svg>',
        liveOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/" x="0px" y="0px" width="26px" height="24px" viewBox="-0.034668 -0.8662109 26 24" enable-background="new -0.034668 -0.8662109 26 24" xml:space="preserve"> <defs> </defs> <path fill="#C12337" d="M6.9995117,15.390625H3.0019531V7.6142578h1.0146484v6.9326172H7.340332v0.4482422l1.1074219-1.2851563 V7.6142578h1.0151367V12.53125l1.828125-2.1225586l-0.9165039-2.7944336h1.0961914l0.5981445,1.8916016l4.3320313-5.0302734 L3.1806641,4.4750977H1.1430664c-0.6279297,0-1.1386719,0.2900391-1.1411133,0.6479492L0.0009766,16.7148438L0,17.8789063 c0.0009766,0.3574219,0.5117188,0.6494141,1.1420898,0.6494141H4.296875L6.9995117,15.390625z"/> <path fill="#C12337" d="M23.887207,4.4760742h-2.0361328h-3.3583984l-2.703125,3.1381836h1.0234375l-2.78125,7.7763672h-1.1074219 l-1.0566406-3.2226563l-2.4047852,2.7919922v0.4306641H9.0922852l-2.703125,3.1376953l15.4599609,0.0019531h2.0371094 c0.6298828,0,1.1416016-0.2929688,1.1416016-0.6513672l0.0009766-12.7509766 C25.0288086,4.7680664,24.5170898,4.4760742,23.887207,4.4760742z M22.027832,15.390625h-4.3867188V7.6142578h4.2128906V8.456543 h-3.1962891v2.4575195h3.0117188v0.8305664h-3.0117188v2.8041992h3.3701172V15.390625z"/> <path fill="#C12337" d="M13.5131836,14.3525391h0.0234375c0.2197266-0.9013672,0.53125-1.8818359,0.8886719-2.8969727 l1.2832031-3.7460938l-3.078125,3.5732422l0.0512695,0.1616211C13.0053711,12.4951172,13.2944336,13.4404297,13.5131836,14.3525391z "/> <polygon id="StreamsWebrtcCrossline_1_" points="22.6928711,1.0341797 21.4916992,0 2.5673828,21.9707031 3.7685547,23.0058594 "/> </svg>',
        disabledEnabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="25px" height="24px" viewBox="0 0 25 24" enable-background="new 0 0 25 24" xml:space="preserve"> <path d="M9.302,19.907c0.061,0.034,0.078,0.159,0.147,0.17c0.024,0.004,0.059,0.005,0.084,0.001 c0.025-0.001,0.063-0.006,0.088-0.016c0.048-0.021,0.115-0.049,0.15-0.088c0.018-0.02,0.075-0.043,0.088-0.064 c0.034-0.063,0.122-0.083,0.122-0.151H9.979v-4.622l-2.738,3.178L9.302,19.907z"/> <polygon class="StreamsWebrtcDisabledparts" points="5.986,17.345 7.241,18.314 9.979,15.137 9.979,12.707 "/> <path d="M9.979,3.246c0-0.026-0.087-0.053-0.092-0.079C9.875,3.116,9.765,3.068,9.729,3.029C9.711,3.01,9.69,2.992,9.669,2.977 C9.647,2.962,9.622,2.951,9.599,2.94c-0.025-0.006-0.05-0.016-0.077-0.022c-0.07,0.003-0.091-0.011-0.156,0.017 c-0.023,0.01-0.045,0.011-0.067,0.024L4.591,6.464H0.603c-0.028,0-0.064,0.033-0.09,0.04c-0.054,0.015-0.11,0.073-0.15,0.113 C0.343,6.638,0.312,6.66,0.299,6.683C0.285,6.708,0.248,6.734,0.241,6.761C0.234,6.788,0.179,6.817,0.179,6.845v9.317 c0,0.029,0.055,0.044,0.062,0.07c0.007,0.026,0.069,0.039,0.083,0.063c0.029,0.05,0.068,0.063,0.118,0.09 c0.024,0.015,0.05-0.03,0.077-0.021c0.028,0.004,0.056-0.1,0.084-0.1H4.59l1.396,1.079l3.993-4.638V3.246z"/> <g id="StreamsWebrtcWaves"> <path class="StreamsWebrtcWaves1" d="M14.483,7.478c-0.949-2.085-2.251-3.412-2.282-3.443c-0.184-0.182-0.479-0.181-0.66,0.002 c-0.182,0.183-0.182,0.478,0.004,0.66c0.121,0.121,1.444,1.467,2.297,3.525l0.35-0.406L14.483,7.478z"/> <path class="StreamsWebrtcWaves1" d="M14.394,10.011c0.475,2.369,0.058,5.299-2.856,8.301c-0.178,0.185-0.174,0.48,0.01,0.662 c0.09,0.086,0.207,0.129,0.324,0.129c0.123,0,0.246-0.045,0.336-0.138c3.443-3.549,3.648-7.058,2.899-9.783l-0.063,0.074 L14.394,10.011z"/> <path class="StreamsWebrtcWaves2" d="M16.937,4.629c-0.997-1.646-1.97-2.637-2.001-2.667c-0.182-0.181-0.477-0.181-0.658,0.003 c-0.185,0.183-0.185,0.478,0.004,0.66c0.116,0.117,1.094,1.115,2.045,2.714l0.392-0.455L16.937,4.629z"/> <path class="StreamsWebrtcWaves2" d="M17.113,6.853c1.516,3.375,2.169,8.372-2.842,13.536c-0.178,0.182-0.174,0.479,0.012,0.659 c0.09,0.086,0.207,0.132,0.324,0.132c0.121,0,0.242-0.048,0.336-0.144c5.503-5.673,4.534-11.267,2.8-14.915l-0.028,0.033 L17.113,6.853z"/> <path class="StreamsWebrtcWaves1 StreamsWebrtcDisabledparts" d="M14.191,7.815l-0.35,0.406c0.228,0.55,0.423,1.148,0.552,1.79l0.649-0.754l0.063-0.074 c-0.168-0.612-0.385-1.182-0.623-1.706L14.191,7.815z"/> <path class="StreamsWebrtcDisabledparts StreamsWebrtcWaves2" d="M16.718,4.884l-0.392,0.455c0.272,0.457,0.54,0.964,0.787,1.514l0.602-0.698l0.028-0.033 c-0.258-0.543-0.533-1.042-0.807-1.492L16.718,4.884z"/> </g> <polygon id="StreamsWebrtcCrossline" points="20.305,1.034 19.104,0 0.179,21.971 1.38,23.006 "/> </svg>',
        enabledMicrophone: '<svg width="5.3250041mm" height="6.8486948mm" viewBox="0 0 5.3250041 6.8486948" version="1.1" id="svg502" xml:space="preserve" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" sodipodi:docname="disabled_mic.svg" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview id="namedview504" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="mm" showgrid="false" inkscape:zoom="24.2312" inkscape:cx="-0.43332563" inkscape:cy="14.031497" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="svg502" /><defs id="defs499" /><g inkscape:groupmode="layer" id="layer2" inkscape:label="Layer 2" transform="translate(0.02559968)" style="display:inline"><path d="m 84.259657,41.975451 c 0.0015,0.07894 0.06647,0.141484 0.145411,0.139982 0.04048,-7.58e-4 0.07458,-0.01762 0.100396,-0.04443 0.02581,-0.02682 0.04031,-0.06253 0.04058,-0.102012 -0.01952,-1.026205 -0.870338,-1.845253 -1.895513,-1.824736 -0.07894,0.0015 -0.141485,0.06647 -0.139983,0.145411 0.0015,0.07894 0.06647,0.141484 0.145412,0.139984 0.867335,-0.01548 1.587177,0.677474 1.603696,1.545803 z" id="path239-2" style="display:inline;stroke-width:0.14315" class="StreamsWebrtcMicIconWawe2" transform="translate(-79.823299,-40.143779)" /><path d="m 83.832255,42.12633 c 0.04048,-7.58e-4 0.07458,-0.01762 0.100395,-0.04443 0.02581,-0.02682 0.04032,-0.06253 0.04058,-0.102012 -0.01351,-0.710452 -0.602385,-1.277331 -1.312835,-1.263814 -0.07894,0.0015 -0.141483,0.06647 -0.139983,0.145411 0.0015,0.07894 0.06647,0.141484 0.145414,0.139983 0.552571,-0.01051 1.010465,0.430284 1.020978,0.982856 0.0015,0.08097 0.06651,0.143508 0.145449,0.142006 z" id="path241" style="stroke-width:0.14315" class="StreamsWebrtcMicIconWawe1" transform="translate(-79.823299,-40.143779)" /><path d="m 237.541,328.897 c 25.128,0 46.632,-8.946 64.523,-26.83 17.888,-17.884 26.833,-39.399 26.833,-64.525 V 91.365 c 0,-25.126 -8.938,-46.632 -26.833,-64.525 C 284.173,8.951 262.669,0 237.541,0 212.416,0 190.909,8.951 173.017,26.84 155.124,44.73 146.179,66.239 146.179,91.365 v 146.177 c 0,25.125 8.949,46.641 26.838,64.525 17.889,17.884 39.399,26.83 64.524,26.83 z" id="path375" transform="matrix(0.01221113,0,0,0.01221113,-0.29021299,1.047319)" inkscape:label="path375" /><path d="m 396.563,188.15 c -3.606,-3.617 -7.898,-5.426 -12.847,-5.426 -4.944,0 -9.226,1.809 -12.847,5.426 -3.613,3.616 -5.421,7.898 -5.421,12.845 v 36.547 c 0,35.214 -12.518,65.333 -37.548,90.362 -25.022,25.03 -55.145,37.545 -90.36,37.545 -35.214,0 -65.334,-12.515 -90.365,-37.545 -25.028,-25.022 -37.541,-55.147 -37.541,-90.362 v -36.547 c 0,-4.947 -1.809,-9.229 -5.424,-12.845 -3.617,-3.617 -7.895,-5.426 -12.847,-5.426 -4.952,0 -9.235,1.809 -12.85,5.426 -3.618,3.616 -5.426,7.898 -5.426,12.845 v 36.547 c 0,42.065 14.04,78.659 42.112,109.776 28.073,31.118 62.762,48.961 104.068,53.526 v 37.691 h -73.089 c -4.949,0 -9.231,1.811 -12.847,5.428 -3.617,3.614 -5.426,7.898 -5.426,12.847 0,4.941 1.809,9.233 5.426,12.847 3.616,3.614 7.898,5.428 12.847,5.428 h 182.719 c 4.948,0 9.236,-1.813 12.847,-5.428 3.621,-3.613 5.431,-7.905 5.431,-12.847 0,-4.948 -1.81,-9.232 -5.431,-12.847 -3.61,-3.617 -7.898,-5.428 -12.847,-5.428 h -73.08 v -37.691 c 41.299,-4.565 75.985,-22.408 104.061,-53.526 28.076,-31.117 42.12,-67.711 42.12,-109.776 v -36.547 c 0,-4.946 -1.813,-9.225 -5.435,-12.845 z" id="path377" transform="matrix(0.01221113,0,0,0.01221113,-0.29021299,1.047319)" /></g></svg>',
        disabledMicrophone: '<svg width="5.3250041mm" height="6.8486948mm" viewBox="0 0 5.3250041 6.8486948" version="1.1" id="svg502" xml:space="preserve" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" sodipodi:docname="disabled_mic.svg" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview id="namedview504" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="mm" showgrid="false" inkscape:zoom="24.2312" inkscape:cx="-0.43332563" inkscape:cy="14.031497" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="svg502" /><defs id="defs499" /><g inkscape:label="Layer 1" inkscape:groupmode="layer" id="layer1" transform="translate(-79.802132,-40.143836)" style="display:inline"><path id="path239-2-9" style="display:inline;stroke-width:0.14315" class="StreamsWebrtcMicIconWawe2" d="M 2.9005981,0 C 2.8846674,-8.6953191e-5 2.8690742,1.9618652e-4 2.8530558,5.1676432e-4 2.7741159,0.00201676 2.7115107,0.06678662 2.7130127,0.14572754 c 0.0015,0.0789399 0.066269,0.14154313 0.1452108,0.14004313 0.6791554,-0.0121214 1.2677117,0.41009432 1.4991333,1.01079103 L 4.565096,1.0552327 C 4.2653668,0.43311249 3.630306,0.0039829 2.9005981,0 Z M 4.7175415,1.5208374 4.4612264,1.8184937 c 1.221e-4,0.00446 4.318e-4,0.00897 5.168e-4,0.013436 0.0015,0.07894 0.066787,0.1410284 0.1457275,0.1395264 0.04048,-7.58e-4 0.074436,-0.017632 0.1002523,-0.044442 0.02581,-0.02682 0.040554,-0.062321 0.040824,-0.1018026 C 4.746577,1.7214388 4.735837,1.6197193 4.7175415,1.5208374 Z M 3.751709,2.642216 1.903243,4.7878215 c 0.207074,0.1837261 0.4513688,0.2759521 0.7327718,0.2759521 0.306841,0 0.5695964,-0.1092449 0.7880656,-0.3276286 C 3.6425128,4.5177614 3.751709,4.254896 3.751709,3.9480794 Z M 1.6117879,5.1263021 1.3198161,5.4647827 c 0.30817,0.2717762 0.6725019,0.431023 1.0929565,0.4774902 v 0.4599203 h -0.892452 c -0.060433,0 -0.1124242,0.022495 -0.1565796,0.066663 -0.044168,0.044131 -0.066663,0.096146 -0.066663,0.1565796 0,0.060335 0.022495,0.1129654 0.066663,0.1570963 0.044155,0.044131 0.096146,0.066146 0.1565796,0.066146 H 3.751709 c 0.060421,0 0.1124852,-0.022003 0.1565796,-0.066146 0.044216,-0.044119 0.066663,-0.096749 0.066663,-0.1570963 0,-0.060421 -0.022446,-0.1124364 -0.066663,-0.1565796 C 3.8642066,6.4246878 3.8121413,6.4021932 3.751709,6.4021932 H 2.859257 V 5.9422729 C 3.363564,5.8865292 3.7871411,5.6685517 4.1299805,5.2885661 4.4728198,4.9085928 4.644161,4.4617401 4.644161,3.9480794 V 3.5015951 c 0,-0.060396 -0.021917,-0.1123754 -0.066146,-0.1565796 -0.044033,-0.044168 -0.096663,-0.066663 -0.1570963,-0.066663 -0.060372,0 -0.1123632,0.022495 -0.1565796,0.066663 -0.044119,0.044156 -0.066663,0.096172 -0.066663,0.1565796 v 0.4464843 c 0,0.4300024 -0.1527257,0.7976598 -0.45837,1.1032919 -0.3055462,0.3056443 -0.6732773,0.4583699 -1.1032918,0.4583699 -0.3933915,0 -0.7349131,-0.1276249 -1.0242264,-0.3834391 z M 1.3198161,5.4647827 c -0.8798774,-3.6431885 -0.4399387,-1.8215942 0,0 z M 1.0319784,5.1567912 1.3311849,4.8095256 C 1.1598178,4.5572928 1.074353,4.2700829 1.074353,3.9480794 V 3.5015951 c 0,-0.060408 -0.02252,-0.1124242 -0.066663,-0.1565796 -0.0441675,-0.044168 -0.0961101,-0.066663 -0.15657956,-0.066663 -0.0604694,0 -0.11295317,0.022495 -0.15709635,0.066663 -0.0441799,0.044156 -0.0661458,0.096172 -0.0661458,0.1565796 v 0.4464843 c 0,0.4554054 0.13465463,0.8583833 0.40411011,1.2087118 z M 1.6386597,4.4524414 3.7418905,2.01073 C 3.7111124,1.7684747 3.6054921,1.5565014 3.4240804,1.3751099 3.2056112,1.1566652 2.9428558,1.0474813 2.6360148,1.0474813 c -0.3068043,0 -0.5695843,0.1091839 -0.7880656,0.3276286 -0.2184936,0.2184568 -0.3276286,0.481249 -0.3276286,0.7880656 v 1.7849039 c 0,0.184067 0.039697,0.3520807 0.1183391,0.504362 z M 3.8891683,1.839681 4.1382487,1.5508097 C 3.9969597,0.98002029 3.4750777,0.56041034 2.8628743,0.57205811 c -0.07894,0.0015 -0.1415431,0.0667866 -0.1400431,0.14572753 0.0015,0.0789399 0.066267,0.14154413 0.1452108,0.14004314 C 3.4202676,0.84732534 3.878104,1.2875939 3.8891683,1.839681 Z" transform="translate(79.802132,40.143836)" sodipodi:nodetypes="scccccscccccccsccccssscccccscscsscscscccsscscsssscccccsscscsscccssscscccc" /><polygon class="StreamsWebrtcMicIconCrossline" points="20.305,1.034 19.104,0 0.179,21.971 1.38,23.006 " transform="matrix(0.26458333,0,0,0.26458333,79.754772,40.268055)" style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1" id="polygon2082" /></g></svg>',
        playIcon: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="44px" height="50px" viewBox="-0.53 0 44 50" enable-background="new -0.53 0 44 50" xml:space="preserve"> <defs> </defs> <polygon points="0,0 43.143,24.91 0,49.82 "/> </svg>',
        pauseIcon: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="44px" height="51px" viewBox="-0.53 -0.91 44 51" enable-background="new -0.53 -0.91 44 51" xml:space="preserve"> <defs> </defs> <rect width="16.173" height="50"/> <rect x="26.97" y="0.09" width="16.173" height="50"/> </svg>',
        reload: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512"> <g> <g> <path d="m146.2,86.1c68.3-43.8 155.5-41.9 221.2,1.1l-20.3,2.5c-11.2,1.4-19.1,11.6-17.8,22.8 1.3,10.3 10.1,17.9 20.2,17.9 0.8,0 72.4-8.8 72.4-8.8 5.4-0.7 10.3-3.4 13.6-7.7 3.3-4.3 4.8-9.7 4.1-15.1l-8.7-69.9c-1.4-11.2-11.7-19.2-22.8-17.7-11.2,1.4-19.1,11.6-17.7,22.8l2.7,21.3c-79.3-53.9-185.8-57-268.9-3.6-97.1,62.3-137.5,185.5-96.1,293 3.1,8.1 13.2,16.2 26.4,11.7 10.7-3.7 15.8-15.9 11.7-26.4-34.4-89.5-0.8-192 80-243.9z"/> <path d="m484,168.4c-3.1-8.1-13.2-16.2-26.4-11.7-10.7,3.7-15.8,15.9-11.7,26.4 34.5,89.5 0.8,192-80,243.9-68.3,43.8-155.5,41.9-221.2-1.1l20.3-2.5c11.2-1.4 19.1-11.6 17.8-22.8-1.3-10.3-10.1-17.9-20.2-17.9-0.8,0-72.4,8.8-72.4,8.8-5.4,0.7-10.3,3.4-13.6,7.7-3.3,4.3-4.8,9.7-4.1,15.1l8.7,69.9c1.4,11.2 11.7,19.2 22.8,17.7 11.2-1.4 19.1-11.6 17.7-22.8l-2.7-21.3c79.4,53.8 185.9,56.9 269.1,3.5 96.9-62.2 137.3-185.4 95.9-292.9z"/> </g> </g> </svg>',
        sourcesEnabledMic: '<svg width="5.0271811mm" height="5.8011966mm" viewBox="0 0 5.0271812 5.8011965" version="1.1" id="svg502" xml:space="preserve" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" sodipodi:docname="enabled_mic.svg" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview id="namedview504" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="mm" showgrid="false" inkscape:zoom="12.1156" inkscape:cx="21.831358" inkscape:cy="-0.5364984" inkscape:window-width="1920" inkscape:window-height="1056" inkscape:window-x="1920" inkscape:window-y="0" inkscape:window-maximized="1" inkscape:current-layer="layer2" /><defs id="defs499" /><g inkscape:groupmode="layer" id="layer2" inkscape:label="Layer 2" transform="translate(0.2122019,-0.75431366)" style="display:inline"><path id="path375" style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;stroke-width:0.241944;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1" inkscape:label="path375" d="m 2.3835485,1.0473294 c -0.3068043,0 -0.5690675,0.1091839 -0.7875488,0.3276285 -0.2184935,0.2184569 -0.3281454,0.481249 -0.3281454,0.7880656 v 1.784904 c 0,0.3068044 0.1097007,0.569682 0.3281454,0.7880656 0.018172,0.018167 0.036509,0.035537 0.055294,0.052193 L 3.4992427,2.6425808 V 2.1630235 c 0,-0.3068166 -0.1091106,-0.569572 -0.3276286,-0.7880656 C 2.953145,1.1565133 2.6903895,1.0473294 2.3835485,1.0473294 Z M 3.4992427,3.2301419 1.9825394,4.9917914 c 0.1241043,0.047719 0.2576105,0.07183 0.4010091,0.07183 0.306841,0 0.5695965,-0.1092449 0.7880656,-0.3276286 C 3.3900466,4.5176095 3.4992427,4.2547441 3.4992427,3.9479275 Z M 1.6776484,5.3452582 1.3805089,5.6904568 C 1.6146071,5.8263862 1.8742235,5.9105041 2.1603063,5.942121 v 0.460437 h -0.892452 c -0.060433,0 -0.1124242,0.021978 -0.1565796,0.066146 -0.044168,0.044131 -0.066146,0.096146 -0.066146,0.1565796 0,0.060335 0.021978,0.1129654 0.066146,0.1570963 0.044155,0.044131 0.096147,0.066146 0.1565796,0.066146 h 2.2313884 c 0.060421,0 0.113002,-0.022003 0.1570963,-0.066146 0.044217,-0.044119 0.066146,-0.096749 0.066146,-0.1570963 0,-0.060421 -0.021929,-0.1124365 -0.066146,-0.1565796 C 3.6122571,6.4245359 3.559676,6.402558 3.4992427,6.402558 H 2.6067907 V 5.942121 C 3.1110976,5.8863773 3.5346748,5.6683998 3.8775141,5.2884142 4.2203534,4.9084408 4.3916946,4.4615882 4.3916946,3.9479275 V 3.5014431 c 0,-0.060396 -0.021917,-0.1123753 -0.066146,-0.1565796 -0.044033,-0.044168 -0.096664,-0.066146 -0.1570963,-0.066146 -0.060372,0 -0.1123632,0.021978 -0.1565796,0.066146 -0.044119,0.044156 -0.066146,0.096172 -0.066146,0.1565796 v 0.4464844 c 0,0.4300024 -0.1532424,0.7976597 -0.4588867,1.1032918 -0.3055471,0.3056443 -0.6732772,0.4588868 -1.1032918,0.4588868 -0.257637,0 -0.49291,-0.055127 -0.7058998,-0.1648479 z M 1.0678665,5.4651476 c -0.31040309,-2.7498752 -0.15520154,-1.3749376 0,0 z m 0,0 0.2919719,-0.3389974 C 1.3328391,5.1022852 1.3063501,5.0773118 1.2802567,5.0512193 0.97463678,4.7456727 0.82188671,4.3779421 0.82188671,3.9479275 V 3.5014431 c 0,-0.060408 -0.0220026,-0.1124241 -0.0661458,-0.1565796 -0.0441677,-0.044168 -0.0966269,-0.066146 -0.15709635,-0.066146 -0.0604694,0 -0.11295317,0.021978 -0.15709635,0.066146 -0.0441799,0.044156 -0.0661458,0.096172 -0.0661458,0.1565796 v 0.4464844 c 0,0.5136607 0.17139001,0.9605133 0.5141805,1.3404867 0.0571302,0.063327 0.11666579,0.1224111 0.17828359,0.1767334 z" sodipodi:nodetypes="sssssccsssccscscccccscscsscscscccsscscsscsccccccsscscsssc" transform="translate(0,-0.29301574)" /><g id="g867" transform="translate(0.81433722,0.29295158)"><path d="m 1.5692479,4.477502 c 0.3068413,0 0.5694294,-0.1092407 0.7878987,-0.3276246 C 2.5755793,3.9314937 2.6848079,3.6687712 2.6848079,3.3619543 V 1.576968 c 0,-0.306817 -0.1091431,-0.5694295 -0.3276613,-0.78792325 -0.2184693,-0.2184449 -0.4810574,-0.3277467 -0.7878987,-0.3277467 -0.3068046,0 -0.56942937,0.1093018 -0.78791097,0.3277467 C 0.56284323,1.0075018 0.45361463,1.270151 0.45361463,1.576968 v 1.7849863 c 0,0.3068047 0.1092774,0.5695394 0.3277223,0.7879231 0.218445,0.2183839 0.48110637,0.3276246 0.78791097,0.3276246 z" id="path375-3" inkscape:label="path375" style="display:inline;stroke-width:0.0122111" /><path d="m 3.5110313,2.7588222 c -0.044033,-0.044168 -0.096444,-0.066258 -0.1568764,-0.066258 -0.060372,0 -0.1126599,0.02209 -0.1568764,0.066258 -0.044119,0.044156 -0.066196,0.096444 -0.066196,0.156852 v 0.4462801 c 0,0.4300028 -0.152859,0.7977898 -0.4585036,1.1034221 C 2.3670315,4.771021 1.9991957,4.9238432 1.5691807,4.9238432 1.139178,4.9238432 0.77137883,4.771021 0.46572203,4.4653764 0.16010184,4.1598296 0.00730397,3.7919693 0.00730397,3.3619543 V 2.9156742 c 0,-0.060408 -0.0220899,-0.1126966 -0.0662332,-0.156852 -0.0441677,-0.044168 -0.0964069,-0.066258 -0.15687639,-0.066258 -0.0604695,0 -0.11276979,0.02209 -0.15691302,0.066258 -0.0441799,0.044156 -0.0662576,0.096444 -0.0662576,0.156852 v 0.4462801 c 0,0.5136611 0.17144426,0.9605152 0.5142351,1.3404889 0.34280297,0.379986 0.76639487,0.5978692 1.27078794,0.653613 V 5.8163059 H 0.45354753 c -0.060433,0 -0.112721,0.022114 -0.1568764,0.066282 -0.044168,0.044131 -0.066258,0.096443 -0.066258,0.1568763 0,0.060335 0.02209,0.1127454 0.066258,0.1568764 0.044155,0.044131 0.096444,0.066282 0.1568764,0.066282 H 2.6847529 c 0.060421,0 0.112782,-0.022139 0.1568764,-0.066282 0.044217,-0.044119 0.066319,-0.096529 0.066319,-0.1568764 0,-0.060421 -0.022102,-0.1127332 -0.066319,-0.1568763 C 2.7975473,5.83842 2.7451863,5.8163059 2.6847529,5.8163059 H 1.7923636 V 5.3560562 C 2.296671,5.3003124 2.7202263,5.0824292 3.063066,4.7024432 3.4059056,4.3224695 3.5773988,3.8756154 3.5773988,3.3619543 V 2.9156742 c 0,-0.060396 -0.022139,-0.1126478 -0.066368,-0.156852 z" id="path377" style="display:inline;stroke-width:0.0122111" /></g></g></svg>',
        scenesIcon: '<svg enable-background="new 0 0 520 520" height="452.92307" viewBox="0 0 459.99999 459.99999" width="452.92307" version="1.1" id="svg67" sodipodi:docname="layer.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"> <defs id="defs71" /> <sodipodi:namedview id="namedview69" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.1780509" inkscape:cx="164.25436" inkscape:cy="175.28953" inkscape:window-width="1920" inkscape:window-height="1056" inkscape:window-x="1920" inkscape:window-y="0" inkscape:window-maximized="1" inkscape:current-layer="svg67" /> <g id="_x39_13_x2C__Creative_x2C__Design_x2C__Layers_x2C__Slides" transform="translate(-30,-30)"> <path d="M 480,190 H 330 V 40 c 0,-5.523 -4.478,-10 -10,-10 H 40 c -5.523,0 -10,4.477 -10,10 v 280 c 0,5.522 4.477,10 10,10 h 150 v 150 c 0,5.522 4.477,10 10,10 h 280 c 5.522,0 10,-4.478 10,-10 V 200 c 0,-5.523 -4.478,-10 -10,-10 z M 50,310 V 50 H 310 V 190 H 200 c -5.523,0 -10,4.477 -10,10 V 310 Z M 470,470 H 210 c 0,-13.966 0,-242.6 0,-260 h 260 z" id="path64" style="display:inline" /> </g> </svg>',
        settings: '<svg version="1.1" id="svg111" xml:space="preserve" width="682.66669" height="682.66669" viewBox="0 0 682.66669 682.66669" sodipodi:docname="settings (1).svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview id="namedview72" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="0.90839741" inkscape:cx="117.78986" inkscape:cy="346.76453" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="g117" /><defs id="defs115"><clipPath clipPathUnits="userSpaceOnUse" id="clipPath125"><path d="M 0,512 H 512 V 0 H 0 Z" id="path123" /></clipPath></defs><g id="g117" transform="matrix(1.3333333,0,0,-1.3333333,0,682.66667)"><path d="m -64.267578,-442.71875 c -25.853717,0 -47.132812,21.27966 -47.132812,47.13281 v 10.96094 c -11.11849,3.55446 -21.82534,8.00409 -32.04102,13.28906 l -7.7539,-7.75195 c -8.8401,-8.85183 -20.84682,-13.81641 -33.33789,-13.81641 -12.48681,0 -24.49375,4.96296 -33.33399,13.81641 -7.30802,7.30802 -15.40104,15.40204 -22.70898,22.70898 -8.84723,8.83905 -13.81055,20.84005 -13.81055,33.32618 0,12.49093 4.96494,24.49508 13.81055,33.33398 4.10462,4.10413 4.88381,4.88394 7.75976,7.75977 -5.28538,10.21593 -9.7363,20.9212 -13.29101,32.03906 h -10.95899 c -25.85371,0 -47.13281,21.28159 -47.13281,47.13476 v 32.13282 c 0,25.85317 21.2791,47.13281 47.13281,47.13281 h 10.95704 c 3.55486,11.11899 8.00732,21.82432 13.29296,32.041014 -2.87624,2.875997 -3.65643,3.656431 -7.76171,7.761719 -8.84474,8.83817 -13.8086,20.84253 -13.8086,33.332031 0,12.487977 4.96477,24.490664 13.81445,33.330079 7.31,7.309995 15.40581,15.4048021 22.7129,22.7128901 8.839,8.8476129 20.84096,13.8085939 33.32617,13.8085939 12.49224,0 24.49847,-4.964769 33.33789,-13.8144533 4.10133,-4.1013309 4.88019,-4.87994392 7.7539,-7.7539062 10.21597,5.285344 20.92288,9.7344764 32.04102,13.2890625 v 10.960937 c 0,25.853154 21.279659,47.132813 47.132812,47.132813 h 32.132812 C -6.2816124,69.28125 15,48.002154 15,22.148437 V 11.1875 C 26.118333,7.6328504 36.824883,3.1819523 47.041016,-2.1035156 c 2.87582,2.87631486 3.654527,3.6564808 7.759765,7.7617187 8.838794,8.8449339 20.843559,13.8085939 33.333985,13.8085939 12.487444,0 24.490074,-4.964182 33.330074,-13.8144533 7.30499,-7.3059798 15.39793,-15.3969269 22.70508,-22.7050777 l 0.008,-0.0078 c 8.84692,-8.839351 13.80664,-20.841111 13.80664,-33.324219 10e-6,-12.488328 -4.96171,-24.49318 -13.80859,-33.332031 l -0.006,-0.0078 -7.7539,-7.751953 c 5.28565,-10.216848 9.73769,-20.923258 13.29296,-32.042968 h 10.95704 c 25.85371,0 47.13476,-21.27964 47.13476,-47.13281 v -32.13282 c 0,-25.85317 -21.28105,-47.13476 -47.13476,-47.13476 h -10.95899 c -3.55494,-11.11802 -8.00597,-21.82343 -13.29101,-32.03906 2.87345,-2.87358 3.65267,-3.65317 7.7539,-7.75391 l 0.006,-0.006 c 8.84653,-8.83939 13.80859,-20.84515 13.80859,-33.33398 10e-6,-12.48353 -4.96112,-24.48479 -13.80859,-33.32422 l -0.006,-0.008 -22.70508,-22.70312 c -8.84068,-8.85242 -20.84381,-13.81641 -33.330074,-13.81641 -12.491609,0 -24.499897,4.96424 -33.339844,13.81446 -4.10133,4.10133 -4.880438,4.88019 -7.753906,7.7539 C 36.825339,-376.62091 26.118493,-381.07054 15,-384.625 v -10.96094 c 0,-25.85371 -21.2810489,-47.13281 -47.134766,-47.13281 z m 0,30 h 32.132812 c 9.638248,0 17.134766,7.49456 17.134766,17.13281 v 22.14844 a 15.0015,15.0015 0 0 0 11.2519531,14.52539 c 16.2963859,4.20475 31.6898509,10.66041 45.8320309,19.02344 a 15.0015,15.0015 0 0 0 18.242188,-2.30469 c 0,0 7.388934,-7.39089 15.6875,-15.68945 a 15.0015,15.0015 0 0 0 0.0059,-0.006 c 3.212042,-3.21577 7.55886,-5.01563 12.115235,-5.01563 4.541714,0 8.894208,1.80206 12.103514,5.01563 a 15.0015,15.0015 0 0 0 0.008,0.006 l 22.7168,22.71875 a 15.0015,15.0015 0 0 0 0.008,0.006 c 3.21416,3.20989 5.01367,7.56228 5.01368,12.10547 0,4.55637 -1.79986,8.90124 -5.01563,12.11328 a 15.0015,15.0015 0 0 0 -0.004,0.006 c -8.29979,8.29879 -15.6914,15.6914 -15.6914,15.6914 a 15.0015,15.0015 0 0 0 -2.30274,18.24024 c 8.36257,14.14048 14.81644,29.53405 19.02344,45.83203 a 15.0015,15.0015 0 0 0 14.52539,11.25 h 22.14649 c 9.63824,0 17.13476,7.49797 17.13476,17.13476 v 32.13282 c 0,9.63679 -7.49652,17.13281 -17.13476,17.13281 h -22.14649 a 15.0015,15.0015 0 0 0 -14.52539,11.25195 c -4.20697,16.29879 -10.66246,31.69002 -19.02539,45.832033 a 15.0015,15.0015 0 0 0 2.30469,18.242188 l 15.68945,15.689453 a 15.0015,15.0015 0 0 0 0.008,0.0059 c 3.21475,3.21048 5.01368,7.556907 5.01368,12.113281 0,4.543181 -1.79952,8.893622 -5.01368,12.103516 a 15.0015,15.0015 0 0 0 -0.008,0.0078 c -7.30897,7.309973 -15.40774,15.406737 -22.71875,22.718749 a 15.0015,15.0015 0 0 0 -0.006,0.0059 c -3.209986,3.213716 -7.562974,5.015625 -12.103514,5.015625 -4.555202,0 -8.902513,-1.799705 -12.115235,-5.015625 a 15.0015,15.0015 0 0 0 -0.0059,-0.0059 c -8.29814,-8.298139 -15.6875,-15.689453 -15.6875,-15.689453 a 15.0015,15.0015 0 0 0 -18.242188,-2.304687 c -14.141413,8.363499 -29.53459,14.819451 -45.8320309,19.02539 A 15.0015,15.0015 0 0 0 -15,0 v 22.148437 c 0,9.638248 -7.495954,17.132813 -17.134766,17.132813 h -32.132812 c -9.638811,0 -17.132813,-7.494001 -17.132813,-17.132813 V 0 a 15.0015,15.0015 0 0 0 -11.251953,-14.523438 c -16.297436,-4.205939 -31.688666,-10.661891 -45.830076,-19.02539 a 15.0015,15.0015 0 0 0 -18.24414,2.304687 c 0,0 -7.38894,7.390888 -15.6875,15.689453 a 15.0015,15.0015 0 0 0 -0.006,0.0059 c -3.21058,3.214303 -7.55955,5.015625 -12.11328,5.015625 -4.54201,0 -8.89705,-1.800986 -12.10547,-5.013672 a 15.0015,15.0015 0 0 0 -0.006,-0.0078 c -7.31101,-7.312012 -15.4102,-15.40824 -22.7207,-22.718749 a 15.0015,15.0015 0 0 0 -0.006,-0.0059 c -3.21431,-3.210573 -5.01563,-7.563462 -5.01563,-12.105469 0,-4.555201 1.80074,-8.902121 5.01563,-12.113281 a 15.0015,15.0015 0 0 0 0.006,-0.0059 c 8.29856,-8.298566 15.68945,-15.689453 15.68945,-15.689453 a 15.0015,15.0015 0 0 0 2.30664,-18.242188 c -8.3634,-14.141243 -14.81829,-29.532733 -19.02539,-45.832033 a 15.0015,15.0015 0 0 0 -14.52539,-11.25195 h -22.14649 c -9.63824,0 -17.13281,-7.49602 -17.13281,-17.13281 v -32.13282 c 0,-9.63679 7.49457,-17.13476 17.13281,-17.13476 h 22.14649 a 15.0015,15.0015 0 0 0 14.52539,-11.25 c 4.20713,-16.2985 10.6604,-31.69037 19.02344,-45.83008 a 15.0015,15.0015 0 0 0 -2.30274,-18.24414 c 0,0 -7.39203,-7.39108 -15.6914,-15.68945 a 15.0015,15.0015 0 0 0 -0.004,-0.004 c -3.21592,-3.21272 -5.01758,-7.56003 -5.01758,-12.11523 0,-4.54201 1.80132,-8.8949 5.01563,-12.10547 a 15.0015,15.0015 0 0 0 0.006,-0.006 c 7.31152,-7.31053 15.41071,-15.40876 22.7207,-22.71875 a 15.0015,15.0015 0 0 0 0.008,-0.008 c 3.20775,-3.21254 7.56034,-5.01368 12.10352,-5.01368 4.55491,0 8.90143,1.80147 12.11133,5.01563 a 15.0015,15.0015 0 0 0 0.008,0.006 l 15.6875,15.68945 a 15.0015,15.0015 0 0 0 18.24219,2.30469 c 14.14217,-8.36303 29.53564,-14.81869 45.832026,-19.02344 a 15.0015,15.0015 0 0 0 11.251953,-14.52539 v -22.14844 c 0,-9.63881 7.494565,-17.13281 17.132813,-17.13281 z" id="path250" transform="translate(304.2002,442.7187)" /><path d="m 0,-207.80078 c -61.323725,0 -111.40039,50.0777 -111.40039,111.400389 C -111.40039,-35.076854 -61.323537,15 0,15 61.323537,15 111.40039,-35.076854 111.40039,-96.400391 111.40039,-157.72308 61.323725,-207.80078 0,-207.80078 Z m 0,30 c 45.086169,0 81.400391,36.31518 81.400391,81.400389 C 81.400391,-51.314034 45.086357,-15 0,-15 c -45.086357,0 -81.400391,-36.314034 -81.400391,-81.400391 0,-45.085209 36.314222,-81.400389 81.400391,-81.400389 z" id="path245" transform="translate(256,352.3999)" /></g></svg>',
        participantsEnabledMic: '<svg width="118.11147mm" height="122.57976mm" viewBox="0 0 118.11147 122.57976" version="1.1" id="svg502" xml:space="preserve" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" sodipodi:docname="live_source_enabled_mic.svg" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview id="namedview504" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="mm" showgrid="false" inkscape:zoom="0.757225" inkscape:cx="-214.59936" inkscape:cy="472.7789" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="layer2" /><defs id="defs499" /><g inkscape:groupmode="layer" id="layer2" inkscape:label="Layer 2" transform="translate(55.951838,57.634966)" style="display:inline"><g id="g867" transform="translate(0.81433722,0.29295158)" style="display:inline"><path d="m 1.569985,26.932927 c 6.4834386,0 12.031824,-2.308214 16.647996,-6.922582 4.6154,-4.614363 6.923358,-10.1655888 6.923358,-16.648512 V -34.35424 c 0,-6.482926 -2.306152,-12.031827 -6.923358,-16.648516 -4.616172,-4.615657 -10.1645574,-6.925162 -16.647996,-6.925162 -6.4826632,0 -12.031824,2.309505 -16.648256,6.925162 -4.616688,4.615913 -6.924646,10.16559 -6.924646,16.648516 V 3.361833 c 0,6.4826649 2.30899,12.034149 6.924646,16.648512 4.615659,4.614368 10.1655928,6.922582 16.648256,6.922582 z" id="path375-3" inkscape:label="path375" style="display:inline;stroke-width:0.258016" /><path d="m 42.599121,-9.3821164 c -0.9304,-0.9332526 -2.037824,-1.4000066 -3.314738,-1.4000066 -1.275637,0 -2.38046,0.466754 -3.314737,1.4000066 -0.932218,0.9329994 -1.398696,2.0378247 -1.398696,3.3142225 V 3.361833 c 0,9.085793 -3.229853,16.856991 -9.688005,23.314885 -6.4561,6.458152 -14.228329,9.687226 -23.3143799,9.687226 -9.0857916,0 -16.8572471,-3.229074 -23.3156581,-9.687226 -6.457636,-6.456087 -9.686197,-14.228833 -9.686197,-23.314885 v -9.4297269 c 0,-1.2763978 -0.46675,-2.3812357 -1.399481,-3.3142225 -0.933247,-0.9332526 -2.037041,-1.4000066 -3.314739,-1.4000066 -1.277696,0 -2.382782,0.466754 -3.315511,1.4000066 -0.933505,0.9329994 -1.399998,2.0378247 -1.399998,3.3142225 V 3.361833 c 0,10.853461 3.622551,20.295317 10.865591,28.324015 7.243295,8.028958 16.193628,12.632746 26.8512596,13.810591 v 9.7249 H -22.004334 c -1.276927,0 -2.381752,0.467259 -3.314739,1.400512 -0.933253,0.932471 -1.400006,2.037804 -1.400006,3.314737 0,1.274855 0.466753,2.382266 1.400006,3.314737 0.932979,0.932471 2.037825,1.400514 3.314739,1.400514 h 47.144511 c 1.276672,0 2.38304,-0.467789 3.314738,-1.400514 0.934288,-0.932217 1.401295,-2.03962 1.401295,-3.314737 0,-1.276673 -0.467007,-2.38201 -1.401295,-3.314737 -0.931436,-0.93325 -2.037804,-1.400512 -3.314738,-1.400512 H 6.2843339 v -9.7249 C 16.940156,44.318594 25.889716,39.714806 33.133787,31.685848 40.377856,23.65715 44.001441,14.215294 44.001441,3.361833 v -9.4297269 c 0,-1.2761442 -0.467788,-2.3802046 -1.40232,-3.3142225 z" id="path377" style="display:inline;stroke-width:0.258016" /></g></g></svg>',
        participantsDisabledMic: '<svg width="118.11147mm" height="122.57976mm" viewBox="0 0 118.11147 122.57976" version="1.1" id="svg502" xml:space="preserve" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" sodipodi:docname="live_source_enabled_mic.svg" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview id="namedview504" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="mm" showgrid="false" inkscape:zoom="0.757225" inkscape:cx="-214.59936" inkscape:cy="472.7789" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="layer2" /><defs id="defs499" /><g inkscape:groupmode="layer" id="layer2" inkscape:label="Layer 2" transform="translate(55.951838,57.634966)" style="display:inline"><path id="path375-3" style="display:inline;stroke-width:0.258016" inkscape:label="path375" d="m 1.5697999,-57.927917 c -6.4826567,0 -12.0316519,2.309506 -16.6480799,6.925158 -4.616683,4.615909 -6.924641,10.165677 -6.924641,16.648597 v 0.701249 l 45.86335,44.857727 C 24.713393,8.7626975 25.141488,6.1487572 25.141488,3.3618817 V -34.354162 c 0,-6.48292 -2.306407,-12.031912 -6.923609,-16.648597 -4.616167,-4.615652 -10.164647,-6.925158 -16.6480791,-6.925158 z m 29.5217121,76.205167 6.976835,6.823873 c 3.953211,-6.47616 5.932971,-13.721954 5.932971,-21.7392413 v -9.4299154 c 0,-1.2761429 -0.46745,-2.3799926 -1.401981,-3.3140096 -0.930399,-0.9332517 -2.038131,-1.3999147 -3.315043,-1.3999147 -1.275636,0 -2.380251,0.466663 -3.314527,1.3999147 -0.932217,0.9329985 -1.398881,2.0376131 -1.398881,3.3140096 v 9.4299154 c 0,5.44377 -1.160781,10.4151563 -3.479374,14.9153683 z m 1.942,13.517005 -6.748425,-6.600114 c -0.449795,0.501306 -0.915557,0.996192 -1.401981,1.482597 -6.456094,6.458145 -14.228298,9.687264 -23.3143397,9.687264 -9.0857825,0 -16.8574853,-3.229119 -23.3158893,-9.687264 -6.45763,-6.456081 -9.686231,-14.228813 -9.686231,-23.3148563 v -9.4299154 c 0,-1.2763965 -0.466667,-2.3810237 -1.399397,-3.3140096 -0.933246,-0.9332517 -2.03683,-1.3999147 -3.314527,-1.3999147 -1.277694,0 -2.382832,0.466663 -3.31556,1.3999147 -0.933504,0.9329985 -1.400431,2.0376131 -1.400431,3.3140096 v 9.4299154 c 0,10.8534503 3.622971,20.2951623 10.866003,28.3238523 7.243288,8.02895 16.193454,12.632683 26.8510747,13.810527 v 9.724988 H -22.004472 c -1.276925,0 -2.38154,0.467179 -3.314526,1.400431 -0.933252,0.93247 -1.399915,2.038111 -1.399915,3.315043 0,1.274854 0.466663,2.382056 1.399915,3.314526 0.932978,0.93247 2.037614,1.400432 3.314526,1.400432 h 47.144409 c 1.276671,0 2.383346,-0.467708 3.315044,-1.400432 0.934287,-0.932216 1.401464,-2.03941 1.401464,-3.314526 0,-1.276672 -0.467177,-2.382317 -1.401464,-3.315043 -0.931436,-0.933249 -2.038111,-1.400431 -3.315044,-1.400431 H 6.2842408 V 45.496261 C 16.89133,44.323802 25.807046,39.755314 33.033512,31.794255 Z M 19.536145,18.592993 -22.002921,-22.035018 V 3.3618817 c 0,6.4826584 2.30899,12.0342373 6.924641,16.6485963 4.615655,4.614363 10.1654232,6.922575 16.6480799,6.922575 6.4834321,0 12.0319121,-2.308212 16.6480791,-6.922575 0.463034,-0.462929 0.901681,-0.935702 1.318266,-1.417485 z" transform="translate(0.81433625,0.29295133)" sodipodi:nodetypes="sssccssssccsscscssccccscsscscsssccscscsscscscccccssscc" /><rect id="rect454" width="8.3053827" height="161.62758" x="-4.4936342" y="-76.138618" ry="3.925405" transform="rotate(-45.635355)" /></g></svg>',
        participantsEnabledCamera: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 469.35991 437.31813" xml:space="preserve" sodipodi:docname="video-camera.svg" width="469.35989" height="437.31812" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs1011" /><sodipodi:namedview id="namedview1009" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.2480986" inkscape:cx="187.08458" inkscape:cy="189.88885" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="Capa_1" /> <path d="M 266.09589,95.187057 H 52.591893 c -28.16,0 -51.2000001,23.040003 -51.2000001,51.200003 v 172.544 c 0,28.16 23.0400001,51.2 51.2000001,51.2 H 266.09589 c 28.16,0 51.2,-23.04 51.2,-51.2 v -172.544 c 0,-28.672 -23.04,-51.200003 -51.2,-51.200003 z" id="path966" /><path d="m 431.47189,123.68345 c -3.072,0.512 -6.144,2.048 -8.704,3.584 l -79.872,46.08 v 118.784 l 80.384,46.08 c 14.848,8.704 33.28,3.584 41.984,-11.264 2.56,-4.608 4.096,-9.728 4.096,-15.36 v -158.208 c 0,-18.944 -17.92,-34.304 -37.888,-29.696 z" id="path972" /> </svg>',
        participantsDisabledCamera: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 467.96681 437.31813" xml:space="preserve" sodipodi:docname="video-camera.svg" width="467.9668" height="437.31812" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs1011" /><sodipodi:namedview id="namedview1009" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.2480986" inkscape:cx="174.26508" inkscape:cy="222.73881" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="Capa_1" /> <path id="path966" d="M 154.05859,95.187502 315.90234,253.48047 V 146.38672 c 0,-28.67197 -23.03925,-51.199218 -51.19922,-51.199218 z m 187.44531,183.332028 33.62696,32.88867 46.75586,26.80274 c 14.84798,8.70399 33.28038,3.58431 41.98437,-11.26367 2.56,-4.608 4.0957,-9.72739 4.09571,-15.35938 V 153.37891 c 0,-18.94398 -17.91874,-34.30331 -37.88672,-29.69532 -3.072,0.512 -6.14508,2.04799 -8.70508,3.58399 l -79.8711,46.08008 z M 315.90234,297.38672 109.16797,95.187502 H 51.199219 C 23.039247,95.187502 0,118.22675 0,146.38672 v 172.54492 c 0,28.15997 23.039247,51.19922 51.199219,51.19922 H 264.70312 c 28.15997,0 51.19922,-23.03925 51.19922,-51.19922 z" sodipodi:nodetypes="ccssccccccsccccccssssssc" /> <rect id="rect454" width="31.390423" height="610.87592" x="-9.9286299" y="13.175447" ry="14.836177" transform="rotate(-45.635355)" /></svg>',
        participantsEnabledScreenSource: '<svg enable-background="new 0 0 512 512" height="509.78607" viewBox="0 0 532.02655 509.78607" width="532.02655" version="1.1" sodipodi:docname="monitor.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"> <defs id="defs1614" /> <sodipodi:namedview id="namedview1612" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.1739077" inkscape:cx="145.66733" inkscape:cy="238.5196" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="Capa_1" /> <path d="M 502.02657,47.786073 H 50.026568 c -16.54,0 -30,13.46 -30,30 V 375.78607 c 0,16.54 13.46,30 30,30 H 502.02657 c 16.54,0 30,-13.46 30,-30 V 77.786073 c 0,-16.54 -13.46,-30 -30,-30 z" id="path1605" /> <path d="m 436.02657,479.78607 h -81 v -44 h -158 v 44 h -81 c -8.28,0 -15,6.72 -15,15 0,8.28 6.72,15 15,15 h 320 c 8.28,0 15,-6.72 15,-15 0,-8.28 -6.72,-15 -15,-15 z" id="path1607" /> </svg>',
        participantsDisabledScreenSource: '<svg enable-background="new 0 0 512 512" height="509.78607" viewBox="0 0 532.02655 509.78607" width="532.02655" version="1.1" sodipodi:docname="monitor.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"> <defs id="defs1614" /> <sodipodi:namedview id="namedview1612" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.1739077" inkscape:cx="145.66733" inkscape:cy="238.5196" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="Capa_1" /> <path id="path1605" d="m 119.30664,47.785156 366.0293,358.000004 h 16.6914 c 16.53999,0 30,-13.46002 30,-30 V 77.785156 c 0,-16.539983 -13.46001,-30 -30,-30 z M 435.63867,405.78516 69.609375,47.785156 H 50.027344 c -16.539984,0 -30,13.460017 -30,30 V 375.78516 c 0,16.53998 13.460016,30 30,30 z m -238.61133,30 v 44 h -81 c -8.27999,0 -15,6.72 -15,15 0,8.27999 6.72001,15 15,15 h 320 c 8.28,0 15,-6.72001 15,-15 0,-8.28 -6.72,-15 -15,-15 h -81 v -44 z" sodipodi:nodetypes="ccsssscccsssscccssssssccc" /> <rect id="rect454-3" width="34.749641" height="676.24829" x="-12.059921" y="13.492646" ry="16.423859" transform="rotate(-45.635355)" /> </svg>',
        recordingIcon: '<svg version="1.1" x="0px" y="0px" viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498" xml:space="preserve" id="svg56" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs60" /> <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749 c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M49.584,95.203 c-25.198,0-45.698-20.501-45.698-45.699s20.5-45.699,45.698-45.699c25.199,0,45.699,20.5,45.699,45.699S74.783,95.203,49.584,95.203 z" id="path48" style="fill-opacity:1" /> <g id="g168" transform="matrix(0.13297643,0,0,0.13297643,15.542535,15.462035)"> <circle cx="93.833" cy="256" r="93.833" id="circle160" /> <path d="m 388.8,208.992 c 8.284,0 15,-6.716 15,-15 0,-8.284 -6.716,-15 -15,-15 h -32.133 c -8.284,0 -15,6.716 -15,15 v 120 c 0,8.284 6.716,15 15,15 H 388.8 c 8.284,0 15,-6.716 15,-15 0,-8.284 -6.716,-15 -15,-15 h -17.133 v -30 H 388.8 c 8.284,0 15,-6.716 15,-15 0,-8.284 -6.716,-15 -15,-15 h -17.133 v -30 z" id="path162" /> <path d="m 497,303.008 c -18.307,0 -33.2,-14.894 -33.2,-33.2 v -27.616 c 0,-18.307 14.894,-33.2 33.2,-33.2 8.284,0 15,-6.716 15,-15 0,-8.284 -6.716,-15 -15,-15 -34.849,0 -63.2,28.352 -63.2,63.2 v 27.616 c 0,34.849 28.352,63.2 63.2,63.2 8.284,0 15,-6.716 15,-15 0,-8.284 -6.716,-15 -15,-15 z" id="path164" /> <path d="m 252.688,178.992 h -20.021 c -8.284,0 -15,6.716 -15,15 v 120 c 0,8.284 6.716,15 15,15 8.284,0 15,-6.716 15,-15 v -27.144 l 33.908,37.243 c 2.96,3.251 7.021,4.901 11.096,4.901 3.604,0 7.22,-1.291 10.095,-3.908 6.126,-5.577 6.57,-15.064 0.993,-21.19 l -23.6,-25.921 c 4.006,-2.236 7.745,-4.968 11.118,-8.179 10.416,-9.892 16.391,-23.657 16.391,-37.768 v -0.019 c -0.001,-29.233 -24.665,-53.015 -54.98,-53.015 z m -5.021,30 h 5.021 c 13.773,0 24.979,10.324 24.979,23.015 v 0.019 c 0,6.01 -2.503,11.696 -7.063,16.026 -4.678,4.453 -11.216,7.007 -17.938,7.007 h -5 v -46.067 z" id="path166" /> </g></svg>',
        streamingToP2P: '<svg version="1.1" x="0px" y="0px" viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498" xml:space="preserve" id="svg56" sodipodi:docname="circle.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs60" /><sodipodi:namedview id="namedview58" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.0678607" inkscape:cx="-134.38083" inkscape:cy="37.458071" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="svg56" /> <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749 c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M49.584,95.203 c-25.198,0-45.698-20.501-45.698-45.699s20.5-45.699,45.698-45.699c25.199,0,45.699,20.5,45.699,45.699S74.783,95.203,49.584,95.203 z" /> <path d="m 66.36101,58.907431 a 9.3882669,9.3882669 0 0 0 -7.379178,3.595707 L 37.867618,51.950726 a 9.2849965,9.2849965 0 0 0 0,-4.863123 L 58.981832,36.53519 c 5.407641,6.93793 16.767445,3.116905 16.767445,-5.79256 A 9.3882669,9.3882669 0 1 0 57.301332,33.174191 L 36.187118,43.726604 c -5.407641,-6.93793 -16.767444,-3.116906 -16.767444,5.792561 0,8.909465 11.359803,12.73049 16.767444,5.79256 l 21.114214,10.552412 a 9.3882669,9.3882669 0 0 0 9.059678,11.819828 c 12.45823,-0.516354 12.448841,-18.260179 0,-18.776534 z" id="path2718" style="stroke-width:0.938824" /></svg>',
        streamingToFb: '<svg version="1.1" x="0px" y="0px" viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498" xml:space="preserve" id="svg56" sodipodi:docname="circle.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs60" /><sodipodi:namedview id="namedview58" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="1.0678607" inkscape:cx="-328.22635" inkscape:cy="-34.648716" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="svg56" /> <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749 c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M49.584,95.203 c-25.198,0-45.698-20.501-45.698-45.699s20.5-45.699,45.698-45.699c25.199,0,45.699,20.5,45.699,45.699S74.783,95.203,49.584,95.203 z" /> <path d="m 59.655975,28.314112 h 5.792521 v -10.08866 c -0.999348,-0.137477 -4.436262,-0.446801 -8.438942,-0.446801 -8.351698,0 -14.072836,5.25319 -14.072836,14.90827 v 8.885742 h -9.216214 v 11.278362 h 9.216214 V 81.229349 H 54.236229 V 52.853667 h 8.843441 l 1.403847,-11.27836 H 54.233586 v -7.770066 c 0.0026,-3.25978 0.880378,-5.491129 5.422389,-5.491129 z" id="path3135" style="stroke-width:2.64378" /></svg>',
        streamingToRtmp: '<svg version="1.1" x="0px" y="0px" viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498" xml:space="preserve" id="svg56" sodipodi:docname="circle.svg" inkscape:version="1.2.1 (9c6d41e, 2022-07-14)" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs60" /><sodipodi:namedview id="namedview58" pagecolor="#ffffff" bordercolor="#000000" borderopacity="0.25" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" showgrid="false" inkscape:zoom="2.1357213" inkscape:cx="-37.223958" inkscape:cy="34.18049" inkscape:window-width="1920" inkscape:window-height="1029" inkscape:window-x="0" inkscape:window-y="27" inkscape:window-maximized="1" inkscape:current-layer="text3239" /> <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749 c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M49.584,95.203 c-25.198,0-45.698-20.501-45.698-45.699s20.5-45.699,45.698-45.699c25.199,0,45.699,20.5,45.699,45.699S74.783,95.203,49.584,95.203 z" /> <g aria-label="RT MP" id="text3239" style="font-size:37.3333px"><g id="g3306" transform="matrix(0.96058925,0,0,0.96058925,2.3472462,-2.613936)"><path d="M 44.827661,52.466881 38.155791,41.802827 H 30.153194 V 52.466881 H 26.671426 V 26.782007 h 12.085927 q 4.338538,0 6.690099,1.950519 2.369789,1.93229 2.369789,5.395829 0,2.861976 -1.677082,4.812496 -1.658852,1.950519 -4.593746,2.460935 l 7.291661,11.065095 z M 44.317244,34.164813 q 0,-2.242186 -1.531248,-3.408851 -1.51302,-1.184895 -4.374997,-1.184895 h -8.257805 v 9.479159 h 8.403639 q 2.752601,0 4.247392,-1.276041 1.513019,-1.29427 1.513019,-3.609372 z" style="font-family:Arial;-inkscape-font-specification:Arial" id="path3293" /><path d="M 67.020354,29.625754 V 52.466881 H 63.556815 V 29.625754 h -8.822909 v -2.843747 h 21.109357 v 2.843747 z" style="font-family:Arial;-inkscape-font-specification:Arial" id="path3295" /><path d="M 48.509949,81.730422 V 64.59502 q 0,-2.843747 0.164063,-5.468745 -0.893229,3.263018 -1.604166,5.104162 l -6.635411,17.499985 h -2.442706 l -6.726557,-17.499985 -1.020832,-3.098955 -0.601562,-2.005207 0.05469,2.023436 0.07292,3.445309 V 81.730422 H 26.671426 V 56.045548 h 4.575517 l 6.835932,17.809881 q 0.364583,1.07552 0.692707,2.315102 0.346354,1.221353 0.455729,1.768228 0.145833,-0.729166 0.601562,-2.205727 0.473958,-1.494791 0.63802,-1.877603 l 6.708328,-17.809881 h 4.466142 v 25.684874 z" style="font-family:Arial;-inkscape-font-specification:Arial" id="path3297" /><path d="m 75.843263,63.774708 q 0,3.645831 -2.388019,5.796871 -2.369789,2.151039 -6.453119,2.151039 H 59.455256 V 81.730422 H 55.973488 V 56.045548 h 10.809887 q 4.320309,0 6.690098,2.023436 2.36979,2.023436 2.36979,5.705724 z m -3.499997,0.03646 q 0,-4.976559 -5.979162,-4.976559 h -6.908848 v 10.135409 h 7.054682 q 5.833328,0 5.833328,-5.15885 z" style="font-family:Arial;-inkscape-font-specification:Arial" id="path3299" /></g></g></svg>',
        plusIcon: '<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="m467 211h-166v-166c0-24.853-20.147-45-45-45s-45 20.147-45 45v166h-166c-24.853 0-45 20.147-45 45s20.147 45 45 45h166v166c0 24.853 20.147 45 45 45s45-20.147 45-45v-166h166c24.853 0 45-20.147 45-45s-20.147-45-45-45z"/></g></svg>',
        shareIcon: '<svg version="1.1" id="svg285" xml:space="preserve" width="682.66669" height="682.66669" viewBox="0 0 682.66669 682.66669" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"><defs id="defs289"><clipPath clipPathUnits="userSpaceOnUse" id="clipPath299"><path d="M 0,512 H 512 V 0 H 0 Z" id="path297" /></clipPath></defs><g id="g291" transform="matrix(1.3333333,0,0,-1.3333333,0,682.66667)"><g id="g293"><g id="g295" clip-path="url(#clipPath299)"><g id="g301" transform="translate(239.9331,239.9331)"><path d="M 0,0 257.067,257.067" style="fill:none;stroke:#000000;stroke-width:30;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1" id="path303" /></g><g id="g305" transform="translate(239.9331,239.9331)"><path d="m 0,0 c 0,0 -144.396,41.256 -201.802,57.658 -13.692,3.912 -23.131,16.425 -23.131,30.666 v 0.008 c 0,14.325 9.396,26.954 23.118,31.07 96.083,28.825 458.882,137.665 458.882,137.665 0,0 -108.84,-362.799 -137.665,-458.882 -4.116,-13.722 -16.745,-23.118 -31.07,-23.118 h -0.008 c -14.241,0 -26.754,9.439 -30.666,23.131 C 41.256,-144.396 0,0 0,0 Z" style="fill:none;stroke:#000000;stroke-width:30;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1" id="path307" /></g></g></g></g></svg>'
    }

    var _controlsToolIcons = []; 

    var ua = navigator.userAgent;
    var _isMobile = false;
    var _isiOS = false;
    var _isAndroid = false;
    var _isiOSCordova = false;
    var _isAndroidCordova = false;
    if (ua.indexOf('iPad') != -1 || ua.indexOf('iPhone') != -1 || ua.indexOf('iPod') != -1) _isiOS = true;
    if (ua.indexOf('Android') != -1) _isAndroid = true;
    if (ua.indexOf('Android') != -1 || ua.indexOf('iPhone') != -1) _isMobile = true;
    if (typeof cordova != 'undefined' && _isiOS) _isiOSCordova = true;
    if (typeof cordova != 'undefined' && _isAndroid) _isAndroidCordova = true;

    function log(){}
    if(Q.Streams.WebRTCdebugger) {
        log = Q.Streams.WebRTCdebugger.createLogMethod('livestreamEditor.js')
    }

    function copyToClipboard(el) {
        if(Q.info.platform === 'ios') {
            var oldContentEditable = el.contentEditable,
                oldReadOnly = el.readOnly,
                range = document.createRange();

            el.contentEditable = true;
            el.readOnly = false;
            range.selectNodeContents(el);

            var s = window.getSelection();
            s.removeAllRanges();
            s.addRange(range);

            el.setSelectionRange(0, 999999); // A big number, to cover anything that could be inside the element.

            el.contentEditable = oldContentEditable;
            el.readOnly = oldReadOnly;

            document.execCommand('copy');
            return;
        }
        var tempEl = document.createElement('textarea');
        tempEl.value = el.value || el.innerText;
        tempEl.setAttribute('readonly', '');
        tempEl.style.position = 'absolute';
        tempEl.style.left = '-9999px';
        document.body.appendChild(tempEl);
        var selected =
            document.getSelection().rangeCount > 0
                ? document.getSelection().getRangeAt(0)
                : false;
        tempEl.select();
        document.execCommand('copy');
        document.body.removeChild(tempEl);
        if (selected) {
            document.getSelection().removeAllRanges();
            document.getSelection().addRange(selected);
        }
    };

    /**
     * Streams/webrtc/control tool.
     * Users can chat with each other via WebRTC using Twilio or raw streams
     * @module Streams
     * @class Streams webrtc
     * @constructor
     * @param {Object} options
     *  Hash of possible options
     */
    Q.Tool.define("Streams/webrtc/livestreaming", function(options) {
            var tool = this;
            tool.text = Q.Text.collection[Q.Text.language]['Streams/content'];

            this.livestreamingEditor = null;
            this.livestreamStream = null;

            tool.webrtcUserInterface = options.webrtcUserInterface();
            tool.webrtcSignalingLib = tool.webrtcUserInterface.getWebrtcSignalingLib();
            tool.roomStream = tool.webrtcUserInterface.roomStream();

            _controlsToolIcons = tool.state.controlsTool.getIcons();

            //child tools
            tool.livestreamingEditor = null;
            tool.livestreamingCanvasComposerTool = null;
            tool.livestreamingRtmpSenderTool = null;

            tool.declareOrRefreshEventHandlers();
        },

        {
            webrtcUserInterface: null,
            managingScenes: true,
            managingVisualSources: true,
            managingAudioSources: true
        },

        {
            declareOrRefreshEventHandlers: function () {
                var tool = this;
                var webrtcSignalingLib = tool.webrtcSignalingLib;

                webrtcSignalingLib.event.on('beforeSwitchRoom', function (e) {
                    tool.updateWebrtcSignalingLibInstance(e.newWebrtcSignalingLibInstance);
                    tool.declareOrRefreshEventHandlers();
                });
            },
            updateWebrtcSignalingLibInstance: function (newWebrtcSignalingLib) {
                var tool = this;
                if(tool.webrtcSignalingLib != newWebrtcSignalingLib) {
                    tool.webrtcSignalingLib = newWebrtcSignalingLib;
                }
            },
            create: function() {
                if(this.livestreamingEditor != null) return this.livestreamingEditor;
                var tool = this;
                var getOptions = function () {
                     return tool.webrtcSignalingLib.getOptions() || {};
                }
                var _controlsTool = tool.state.controlsTool;
                var _webrtcUserInterface = tool.webrtcUserInterface;
                var desktopDialogEl = null;
                var mobileHorizontaldialogEl = null;
                var activeDialog = null;
                var isOpening = false; //if livestreaming editor in process of opening (e.g. when user has vertical orientation and is changing to horizontal)
                var isHidden = true;

                var _chatBoxContainer = null;
                //var _resizingElement = null;
                //var _resizingElementTool = null;
                var _hoveringElement = null;
                var _hoveringElementToolInstance;
                var _fileManagerTool = null;
                var _streamingCanvas = null;
                var _sourcesColumnEl = null;

                var streamingToSection = (function () {
                    let _recordingIconEl = null;
                    let _p2pBroadcastIconEl = null;
                    let _facebookIconEl = null;
                    let _customRtmpIconEl = null;

                    function declareOrRefreshEventHandlers () {
                        var webrtcSignalingLib = tool.webrtcSignalingLib;

                        webrtcSignalingLib.event.on('beforeSwitchRoom', function (e) {
                            tool.updateWebrtcSignalingLibInstance(e.newWebrtcSignalingLibInstance);
                            declareOrRefreshEventHandlers();
                        });

                        webrtcSignalingLib.event.on('liveStreamingStarted', function (e) {
                            log('liveStreamingStarted', e.platform);
                            if (e.platform && e.platform == 'facebook') {
                                if (e.participant.isLocal) {
                                    log('liveStreamingStarted 2')
                                    showLiveIndicator('facebook');
                                }
                            } else {
                                if (e.participant.isLocal) {
                                    showLiveIndicator('custom');
                                }
                            }
                        });
                        webrtcSignalingLib.event.on('liveStreamingEnded', function (e) {
                            if (e.platform && e.platform == 'facebook') {
                                if (e.participant.isLocal) {
                                    hideLiveIndicator('facebook');
                                }
                            } else {
                                if (e.participant.isLocal) {
                                    hideLiveIndicator('custom');
                                }
                            }
                        });
                      
                        webrtcSignalingLib.event.on('liveStreamingStopped', function (e) {
                            if (e.platform && e.platform == 'facebook') {
                                //if (e.participant.isLocal) {
                                    hideLiveIndicator('facebook');
                                //}
                            } else {
                                //if (e.participant.isLocal) {
                                    hideLiveIndicator('custom');
                                //}
                            }
                        });    
                    }

                    declareOrRefreshEventHandlers();

                    let streamingToFacebook = (function () {
                        let _streamingToFbSection = null;
                        let _privacySelect = null;

                        let _liveId;
                        let _liveInfo;
                        let _accessToken;

                        function goLiveDialog(callback) {
                            var goLive = function () {
                                FB.ui({
                                    display: 'iframe',
                                    method: 'live_broadcast',
                                    phase: 'create'
                                }, (createRes) => {

                                    FB.ui({
                                        display: 'iframe',
                                        method: 'live_broadcast',
                                        phase: 'publish',
                                        broadcast_data: createRes
                                    }, (publishRes) => {
                                        if (publishRes == null || typeof publishRes == 'undefined') {
                                            tool.livestreamingRtmpSenderTool.rtmpSender.endStreaming('facebook');
                                        }

                                        _liveId = publishRes.id
                                        var linkToStream = 'https://www.facebook.com/facebook/videos/' + publishRes.id;
                                        if (callback != null) callback(linkToStream);
                                    });

                                    tool.livestreamingRtmpSenderTool.rtmpSender.startStreaming([createRes.secure_stream_url], 'facebook');
                                });
                            }

                            if (FB.getUserID()) {
                                goLive();
                            }
                        }

                        /**
                         * Creates live streaming session via FB SDK for PHP
                         * @method createLive
                         * @param {Object} [data] title, description
                         * @param {Object} [data.title] title when posting Live
                         * @param {Object} [data.description] description when posting live
                         * @param {Function} [callback] callback function that is triggered after live session created
                         * @return {Object} RTMP urls for streaming
                         */
                        function createLive(data, callback) {
                            Q.req("Streams/fbLive", ["fbLive"], function (err, response) {
                                var msg = Q.firstErrorMessage(err, response && response.errors);

                                if (msg) {
                                    return Q.alert(msg);
                                }

                                _liveId = response.slots.fbLive.id
                                if (callback != null) callback(response.slots.fbLive);

                            }, {
                                method: 'POST',
                                fields: {
                                    'accessToken': _accessToken,
                                    'title': data.title,
                                    'description': data.description,
                                    'privacy': data.privacy,
                                    'action': 'start'
                                }
                            });
                        }

                        /**
                         * Ends live streaming session via FB SDK for PHP
                         * @method deleteLive
                         * @param {Function} [callback] callback function that is triggered after live session was ended
                         */
                        function endLive(callback) {
                            tool.livestreamingRtmpSenderTool.rtmpSender.endStreaming('facebook');
                            Q.req("Streams/fbLive", ["fbLive"], function (err, response) {
                                var msg = Q.firstErrorMessage(err, response && response.errors);

                                if (msg) {
                                    return Q.alert(msg);
                                }

                                if (callback != null) callback(_liveInfo);
                            }, {
                                method: 'post',
                                fields: {
                                    'accessToken': _accessToken,
                                    'id': _liveId,
                                    'action': 'end'
                                }
                            });
                        }

                        /**
                         * Removes live streaming session via FB SDK for PHP
                         * @method deleteLive
                         * @param {Function} [callback] callback function that is triggered after live session was deleted
                         */
                        function deleteLive(callback) {
                            Q.req("Streams/webrtc", ["fblive"], function (err, response) {
                                var msg = Q.firstErrorMessage(err, response && response.errors);

                                if (msg) {
                                    return Q.alert(msg);
                                }

                                if (callback != null) callback();
                            }, {
                                method: 'delete',
                                fields: {
                                    'accessToken': _accessToken,
                                    'action': 'delete'
                                }
                            });
                        }


                        function facebookLiveDialog() {
                            var tool = this;
                            var fbLiveDialog = document.createElement('DIV');
                            fbLiveDialog.className = 'live-editor-fblive_dialog_inner';
                            var endStreamingBtn = document.createElement('BUTTON');
                            endStreamingBtn.type = 'button';
                            endStreamingBtn.className = 'Q_button';
                            endStreamingBtn.innerHTML = "Stop streaming";
                            endStreamingBtn.addEventListener('click', function () {
                                tool.livestreamingEditorTool.livestreamingRtmpSenderTool.rtmpSender.endStreaming('facebook');
                            })
                            fbLiveDialog.appendChild(endStreamingBtn);
                            Q.Dialogs.push({
                                title: Q.text.Streams.webrtc.fbLive.dialogTitle,
                                className: 'live-editor-fblive_dialog',
                                content: fbLiveDialog,
                                apply: true
                            });
                        }

                        /**
                         * 1) Checks FB login status; 2) gets RTMP url for streaming; 3) passes it to websocket streamer function
                         * @method startFacebookLive
                         */
                        function startFacebookLive(data, callback) {

                            var satrtLive = function () {
                                if (getOptions().liveStreaming.startFbLiveViaGoLiveDialog) {
                                    goLiveDialog(callback);
                                    return
                                }
                                var loggedInCallback = function () {
                                    if (tool.livestreamingRtmpSenderTool.rtmpSender.isStreaming('facebook')) {
                                        facebookLiveDialog();
                                    } else {
                                        createLive(data, function (response) {
                                            log('startFacebookLive', data, response)
                                            let iframeUrl = encodeURIComponent('https://www.facebook.com'+ response.permalink_url)
                                            let rtmpData = {
                                                rtmpUrl: response.secure_stream_url,
                                                linkToLive: `https://www.facebook.com/plugins/video.php?width=0&href=${iframeUrl}`,
                                                id: generateId()
                                            }
                                            tool.livestreamingRtmpSenderTool.rtmpSender.startStreaming([rtmpData], 'facebook');
                                            _liveInfo = response;
                                            if (callback != null) callback(response);
                                        });
                                    }
                                }

                                var notLoggedInCallback = function () {
                                    FB.login(function (response) {
                                        if (response.authResponse) {
                                            _accessToken = response.authResponse.accessToken;
                                            loggedInCallback(response.authResponse.accessToken);
                                        }
                                    }, { auth_type: 'reauthorize', scope: 'email,public_profile,publish_video' });
                                }

                                FB.getLoginStatus(function (response) {
                                    if (response.status === 'connected') {
                                        FB.api(
                                            '/me/permissions',
                                            'GET',
                                            function (permissionsResponse) {
                                                var permissions = permissionsResponse.data;
                                                for (let p in permissions) {
                                                    if (permissions[p].permission == 'publish_video') {
                                                        _accessToken = response.authResponse.accessToken;
                                                        loggedInCallback();
                                                        return;
                                                    }
                                                }

                                                notLoggedInCallback();
                                            }
                                        );

                                    } else {
                                        notLoggedInCallback();
                                    }

                                });
                            }

                            satrtLive();

                        }

                        /**
                         * Show dialog with iframe code
                         * @method startFacebookLive
                         */
                        function getIframe(iFrame) {
                            var testFrame = '<iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2F100004473155810%2Fvideos%2F1429100060582419%2F&width=0" width="0" height="0" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true"></iframe>';

                            var embedCode = iFrame != null ? iFrame : (_liveInfo ? _liveInfo['embed_html'] : testFrame);

                            var dialog = document.createElement('DIV');
                            dialog.className = 'live-editor-live-preview';

                            var dialogInner = document.createElement('DIV');
                            dialogInner.className = 'live-editor-dialog-inner';

                            var iframeCodeCon = document.createElement('DIV');
                            iframeCodeCon.className = 'live-editor-live_embed_code';
                            var iframeCodeTitle = document.createElement('DIV');
                            iframeCodeTitle.className = 'live-editor-live_embed_title';
                            iframeCodeTitle.innerHTML = 'Embed Video';
                            var iframeCode = document.createElement('TEXTAREA');
                            iframeCode.innerText = embedCode;

                            var copyBtn = document.createElement('BUTTON');
                            copyBtn.type = 'button';
                            copyBtn.className = 'Q_button';
                            copyBtn.innerHTML = Q.getObject("webrtc.settingsPopup.copy", tool.text);

                            var preview = document.createElement('DIV');
                            preview.className = 'live-editor-embed-preview';
                            preview.innerHTML = embedCode;

                            iframeCodeCon.appendChild(iframeCodeTitle);
                            iframeCodeCon.appendChild(iframeCode);
                            iframeCodeCon.appendChild(copyBtn);
                            preview.appendChild(iframeCodeCon);
                            dialogInner.appendChild(preview);

                            dialog.appendChild(dialogInner);

                            iframeCode.addEventListener('click', function () {
                                this.setSelectionRange(0, this.value.length);
                            })

                            copyBtn.addEventListener('click', function () {
                                copyToClipboard(iframeCode);
                                tool.webrtcUserInterface.notice.show(Q.getObject("webrtc.notices.codeCopiedToCb", tool.text));
                            });

                            return dialog;
                        }

                        function createSectionElement() {
                            var streamingAndUploading = _streamingToFbSection = document.createElement('DIV');
                            streamingAndUploading.className = 'live-editor-dialog-window-content live-editor-stream-to-section-fb'

                            var fbStreamingStartSettings = document.createElement('DIV');
                            fbStreamingStartSettings.className = 'live-editor-stream-to-section-fb-start-settings';
                            streamingAndUploading.appendChild(fbStreamingStartSettings);

                            var fbPreviousStreamings = document.createElement('DIV');
                            fbPreviousStreamings.className = 'live-editor-stream-to-section-fb-previous';
                            streamingAndUploading.appendChild(fbPreviousStreamings);

                            var facebookLiveTtle = document.createElement('LABEL');
                            facebookLiveTtle.className = 'live-editor-stream-to-section-fb-title';
                            fbStreamingStartSettings.appendChild(facebookLiveTtle);
                            var facebookLiveTtleInput = document.createElement('INPUT');
                            facebookLiveTtleInput.type = 'text';
                            facebookLiveTtleInput.placeholder = Q.getObject("webrtc.settingsPopup.fbLiveTitle", tool.text);
                            facebookLiveTtle.appendChild(facebookLiveTtleInput);

                            var facebookLiveDesc = document.createElement('LABEL');
                            facebookLiveDesc.className = 'live-editor-stream-to-section-fb-desc';
                            fbStreamingStartSettings.appendChild(facebookLiveDesc);

                            var facebookLiveDescInput = document.createElement('INPUT');
                            facebookLiveDescInput.type = 'text';
                            facebookLiveDescInput.placeholder = Q.getObject("webrtc.settingsPopup.fbLiveDescription", tool.text);
                            facebookLiveDesc.appendChild(facebookLiveDescInput);

                            var startStreamingBtnCon = document.createElement('DIV');
                            startStreamingBtnCon.className = 'live-editor-stream-to-section-fb-start';
                            fbStreamingStartSettings.appendChild(startStreamingBtnCon);

                            var privacySelect = _privacySelect = document.createElement('SELECT');
                            startStreamingBtnCon.appendChild(privacySelect);

                            var privacyBlock = document.createElement('OPTGROUP');
                            privacyBlock.label = Q.getObject("webrtc.settingsPopup.publishOnTimeline", tool.text);
                            privacySelect.appendChild(privacyBlock);

                            var option1 = document.createElement('OPTION');
                            option1.name = 'privacy';
                            option1.value = 'EVERYONE';
                            option1.innerHTML = Q.getObject("webrtc.settingsPopup.fbPublicAccess", tool.text);
                            option1.selected = true;
                            privacyBlock.appendChild(option1);
                            var option2 = document.createElement('OPTION');
                            option2.innerHTML = Q.getObject("webrtc.settingsPopup.fbFriendsAccess", tool.text);
                            option2.name = 'privacy';
                            option2.value = 'ALL_FRIENDS';
                            privacyBlock.appendChild(option2);
                            var option3 = document.createElement('OPTION');
                            option3.innerHTML = Q.getObject("webrtc.settingsPopup.fbOnlyMeLiveAccess", tool.text);
                            option3.name = 'privacy';
                            option3.value = 'SELF';
                            privacyBlock.appendChild(option3);
                           
                            var startStreamingBtn = document.createElement('BUTTON');
                            startStreamingBtn.type = 'button';
                            startStreamingBtn.className = 'Q_button';
                            startStreamingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.fbStartLive", tool.text);
                            startStreamingBtnCon.appendChild(startStreamingBtn);

                            var fbStreamingLiveSection = document.createElement('DIV');
                            fbStreamingLiveSection.style.display = 'none';
                            fbStreamingLiveSection.className = 'live-editor-stream-to-section-fb-live';
                            streamingAndUploading.appendChild(fbStreamingLiveSection);

                            var facebookLiveEmbed = document.createElement('DIV');
                            facebookLiveEmbed.className = "live-editor-stream-to-section-fb-url";
                            fbStreamingLiveSection.appendChild(facebookLiveEmbed);

                            var facebookLiveUrl = document.createElement('INPUT');
                            facebookLiveUrl.type = 'text';
                            facebookLiveEmbed.appendChild(facebookLiveUrl);

                            var facebookLiveCopy = document.createElement('DIV');
                            facebookLiveCopy.className = 'live-editor-stream-to-section-fb-copy-url-btn';
                            facebookLiveEmbed.appendChild(facebookLiveCopy);

                            var facebookLiveCopyLink = document.createElement('SPAN');
                            facebookLiveCopyLink.innerHTML = Q.getObject("webrtc.settingsPopup.copy", tool.text);
                            facebookLiveCopy.appendChild(facebookLiveCopyLink);

                            var buttonsCon = document.createElement('DIV');
                            buttonsCon.className = 'live-editor-stream-to-section-fb-buttons';
                            fbStreamingLiveSection.appendChild(buttonsCon);

                            var getIframeBtnCon = document.createElement('DIV');
                            getIframeBtnCon.className = 'live-editor-stream-to-section-fb-embed';
                            buttonsCon.appendChild(getIframeBtnCon);

                            var getIframeBtn = document.createElement('BUTTON');
                            getIframeBtn.type = 'button';
                            getIframeBtn.className = 'Q_button';
                            getIframeBtn.innerHTML = Q.getObject("webrtc.settingsPopup.fbEmbedCode", tool.text);
                            getIframeBtnCon.appendChild(getIframeBtn);

                            var stopStreamingBtnCon = document.createElement('DIV');
                            stopStreamingBtnCon.className = 'live-editor-stream-to-section-fb-stop';
                            buttonsCon.appendChild(stopStreamingBtnCon);

                            var stopStreamingBtn = document.createElement('BUTTON');
                            stopStreamingBtn.type = 'button';
                            stopStreamingBtn.className = 'Q_button';
                            stopStreamingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.fbStopLive", tool.text);
                            stopStreamingBtnCon.appendChild(stopStreamingBtn);

                            startStreamingBtn.addEventListener('click', function () {
                                if (!fbStreamingStartSettings.classList.contains('Q_working')) fbStreamingStartSettings.classList.add('Q_working');

                                var data = {};
                                data.title = facebookLiveTtleInput.value;
                                data.description = facebookLiveDescInput.value;
                                data.privacy = privacySelect.value;
                                startFacebookLive(data, function (liveInfo) {
                                    facebookLiveUrl.value = 'https://www.facebook.com' + liveInfo.permalink_url;
                                    fbStreamingStartSettings.style.display = 'none';
                                    fbStreamingLiveSection.style.display = 'block';
                                    if (fbStreamingStartSettings.classList.contains('Q_working')) fbStreamingStartSettings.classList.remove('Q_working');
                                });
                            })
                            stopStreamingBtn.addEventListener('click', function () {
                                if (!fbStreamingLiveSection.classList.contains('Q_working')) fbStreamingLiveSection.classList.add('Q_working');

                                endLive(function (liveInfo) {

                                    var urlInputCon = facebookLiveEmbed.cloneNode(true);
                                    var urlInput = urlInputCon.querySelector('input');
                                    urlInput.value = facebookLiveUrl.value;
                                    urlInputCon.querySelector('.live-editor-stream-to-section-fb-copy-url-btn').addEventListener('click', function () {
                                        var link = urlInput.value;
                                        if (link.trim() != '') {
                                            copyToClipboard(urlInput);
                                            tool.webrtcUserInterface.notice.show(Q.getObject("webrtc.notices.linkCopiedToCb", tool.text));
                                        }
                                    })

                                    var embedPopupBtn = document.createElement('DIV');
                                    embedPopupBtn.className = 'live-editor-stream-to-section-fb-copy-embed-btn';
                                    var embedPopupBtnText = document.createElement('SPAN');
                                    embedPopupBtnText.innerHTML = Q.getObject("webrtc.settingsPopup.fbEmbedCode", tool.text);
                                    embedPopupBtn.addEventListener('click', function () {
                                        let settingsDialog = new SimpleDialog({
                                            content: getIframe(liveInfo['embed_html']),
                                            title: 'Embed'
                                        });
                                    })
                                    embedPopupBtn.appendChild(embedPopupBtnText);
                                    urlInputCon.appendChild(embedPopupBtn);
                                    fbPreviousStreamings.appendChild(urlInputCon);

                                    facebookLiveUrl.value = '';
                                    fbStreamingStartSettings.style.display = 'block';
                                    fbStreamingLiveSection.style.display = 'none';
                                    if (fbStreamingLiveSection.classList.contains('Q_working')) fbStreamingLiveSection.classList.remove('Q_working');
                                });
                            })

                            getIframeBtn.addEventListener('click', function () {
                                let settingsDialog = new SimpleDialog({
                                    content: getIframe(_liveInfo['embed_html']),
                                    title: 'Embed'
                                });
                                getIframe();
                            })

                            facebookLiveCopy.addEventListener('click', function () {
                                var link = facebookLiveUrl.value;
                                if (link.trim() != '') {
                                    copyToClipboard(facebookLiveUrl);
                                    tool.webrtcUserInterface.notice.show(Q.getObject("webrtc.notices.linkCopiedToCb", tool.text));
                                }
                            })

                            return streamingAndUploading;
                        }

                        function loadGroupsList() {
                            var loggedInCallback = function () {
                                var addGroupsList = function (groups) {
                                    if (groups.length === 0) return;
                                    var groupsBlock = document.createElement('OPTGROUP');
                                    groupsBlock.label = Q.getObject("webrtc.settingsPopup.publishToGroup", tool.text)

                                    for (let g in groups) {
                                        var option = document.createElement('OPTION');
                                        option.name = 'privacy';
                                        option.value = groups[g].id;
                                        option.innerHTML = groups[g].name;
                                        groupsBlock.appendChild(option);
                                    }

                                    _privacySelect.appendChild(groupsBlock);

                                }

                                FB.api('/me/groups',
                                    'GET',
                                    function (response) {
                                        if (!response || response.error) {
                                            console.error(response);
                                        } else {
                                            addGroupsList(response.data);
                                        }
                                    })

                            }

                            var notLoggedInCallback = function () {
                                FB.login(function (response) {
                                    if (response.authResponse) {
                                        tool.fbAccessToken = response.authResponse.accessToken;
                                        loggedInCallback(response.authResponse.accessToken);
                                    }
                                }, { auth_type: 'reauthorize', scope: 'email,public_profile,publish_to_groups,publish_video' });
                            }

                            var checkLoginStatus = function () {
                                FB.getLoginStatus(function (response) {
                                    if (response.status === 'connected') {
                                        FB.api(
                                            '/me/permissions',
                                            'GET',
                                            function (permissionsResponse) {
                                                var permissions = permissionsResponse.data;
                                                var hasPermissions = 0;
                                                for (let p in permissions) {
                                                    if (permissions[p].permission == 'publish_to_groups'
                                                        || permissions[p].permission == 'publish_video') {
                                                        hasPermissions++;
                                                    }
                                                }

                                                if (hasPermissions == 2) {
                                                    tool.fbAccessToken = response.authResponse.accessToken;
                                                    loggedInCallback();
                                                } else {
                                                    notLoggedInCallback();
                                                }
                                            }
                                        );

                                    } else {
                                        notLoggedInCallback();
                                    }

                                });
                            }

                            if (typeof FB == 'undefined') {
                                Q.Users.init.facebook(function () {
                                    checkLoginStatus();
                                });
                            } else {
                                checkLoginStatus();
                            }

                        }

                        function getSection() {
                            loadGroupsList();
                            return _streamingToFbSection;
                        }

                        createSectionElement();

                        return {
                            getSection: getSection
                        }
                    }())

                    let streamingToCustomRtmp = (function () {
                        var _streamingToCustomRtmpSection = null;
                        var _currentlyStreamingToUrls = [];
                        
                        function createSectionElement() {
                            var rtmpStreaming = _streamingToCustomRtmpSection = document.createElement('DIV');
                            rtmpStreaming.className = 'live-editor-dialog-window-content live-editor-stream-to-section-rtmp'

                            var rtmpStreamingSettings = document.createElement('DIV');
                            rtmpStreamingSettings.className = 'live-editor-stream-to-section-rtmp-start-settings';
                            rtmpStreaming.appendChild(rtmpStreamingSettings);

                            var rtmpLiveItem = document.createElement('DIV');
                            rtmpLiveItem.className = 'live-editor-stream-to-section-rtmp-rtmp-item';
                            rtmpStreamingSettings.appendChild(rtmpLiveItem);

                            var rtmpLiveURL = document.createElement('LABEL');
                            rtmpLiveURL.className = 'live-editor-stream-to-section-rtmp-rtmp-url';
                            rtmpLiveItem.appendChild(rtmpLiveURL);

                            var rtmpLiveURLInput = document.createElement('INPUT');
                            rtmpLiveURLInput.type = 'text';
                            rtmpLiveURLInput.placeholder = 'Paste RTMP URL here';
                            rtmpLiveURLInput.autocomplete = 'off';
                            rtmpLiveURLInput.name = 'rtmpUrl';
                            rtmpLiveURL.appendChild(rtmpLiveURLInput);

                            

                            var rtmpLiveStreamKey = document.createElement('LABEL');
                            rtmpLiveStreamKey.className = 'live-editor-stream-to-section-rtmp-key';
                            rtmpLiveItem.appendChild(rtmpLiveStreamKey);

                            var fakeInput = document.createElement('INPUT');
                            fakeInput.style.height = '0';
                            fakeInput.style.width = '1px';
                            fakeInput.style.padding = '0';
                            fakeInput.style.border = '0';
                            fakeInput.style.position = 'absolute';
                            fakeInput.style.left = '0';
                            fakeInput.style.top = '0';
                            fakeInput.tabindex = '-1';
                            fakeInput.type = 'text';
                            fakeInput.autocomplete = 'off';
                            fakeInput.name = 'fakeInput';
                            rtmpLiveStreamKey.appendChild(fakeInput);

                            var rtmpLiveStreamKeyInput = document.createElement('INPUT');
                            rtmpLiveStreamKeyInput.type = 'password';
                            rtmpLiveStreamKeyInput.placeholder = 'Stream Key';
                            rtmpLiveStreamKeyInput.name = 'streamKey';
                            rtmpLiveStreamKeyInput.autocomplete = 'off';
                            rtmpLiveStreamKey.appendChild(rtmpLiveStreamKeyInput);

                            var linkToLiveCon = document.createElement('LABEL');
                            linkToLiveCon.className = 'live-editor-stream-to-section-rtmp-live-link';
                            rtmpLiveItem.appendChild(linkToLiveCon);

                            var linkToLiveInput = document.createElement('INPUT');
                            linkToLiveInput.type = 'text';
                            linkToLiveInput.name = 'linkToLive';
                            linkToLiveInput.placeholder = 'Link to livestream';
                            linkToLiveInput.autocomplete = 'off';
                            linkToLiveCon.appendChild(linkToLiveInput);

                            var startStreamingBtnCon = document.createElement('DIV');
                            startStreamingBtnCon.className = 'live-editor-stream-to-section-rtmp-start';
                            rtmpStreamingSettings.appendChild(startStreamingBtnCon);

                            var addUrlBtn = document.createElement('BUTTON');
                            addUrlBtn.type = 'button';
                            addUrlBtn.className = 'Q_button live-editor-stream-to-section-rtmp-add-rtmp';
                            addUrlBtn.innerHTML = 'Add RTMP';
                            startStreamingBtnCon.appendChild(addUrlBtn);

                            var startStreamingBtn = document.createElement('BUTTON');
                            startStreamingBtn.type = 'button';
                            startStreamingBtn.className = 'Q_button';
                            startStreamingBtn.innerHTML = 'Go Live';
                            startStreamingBtnCon.appendChild(startStreamingBtn);

                            var instructionsCon = document.createElement('DIV');
                            instructionsCon.className = 'live-editor-stream-to-section-rtmp-instructions';
                            startStreamingBtnCon.appendChild(instructionsCon);

                            Q.activate(
                                Q.Tool.setUpElement(
                                    instructionsCon,
                                    'Streams/webrtc/livestreamInstructions',
                                    {}
                                ),
                                {},
                                function () {

                                }
                            );

                            var rtmpLiveSection = document.createElement('DIV');
                            rtmpLiveSection.style.display = 'none';
                            rtmpLiveSection.className = 'live-editor-stream-to-section-rtmp-live';
                            rtmpStreaming.appendChild(rtmpLiveSection);

                            var buttonsCon = document.createElement('DIV');
                            buttonsCon.className = 'live-editor-stream-to-section-rtmp-buttons';
                            rtmpLiveSection.appendChild(buttonsCon);

                            var stopStreamingBtnCon = document.createElement('DIV');
                            stopStreamingBtnCon.className = 'live-editor-stream-to-section-rtmp-stop';
                            buttonsCon.appendChild(stopStreamingBtnCon);

                            var stopStreamingBtn = document.createElement('BUTTON');
                            stopStreamingBtn.type = 'button';
                            stopStreamingBtn.className = 'Q_button';
                            stopStreamingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.fbStopLive", tool.text);
                            stopStreamingBtnCon.appendChild(stopStreamingBtn);

                            addUrlBtn.addEventListener('click', function (e) {
                                var rtmpLiveItem = document.createElement('DIV');
                                rtmpLiveItem.className = 'live-editor-stream-to-section-rtmp-rtmp-item';

                                var rtmpLiveURL = document.createElement('LABEL');
                                rtmpLiveURL.className = 'live-editor-stream-to-section-rtmp-rtmp-url';
                                rtmpLiveItem.appendChild(rtmpLiveURL);

                                var rtmpLiveURLInput = document.createElement('INPUT');
                                rtmpLiveURLInput.type = 'text';
                                rtmpLiveURLInput.placeholder = 'Paste RTMP URL here';
                                rtmpLiveURLInput.autocomplete = 'off';
                                rtmpLiveURL.appendChild(rtmpLiveURLInput);

                                var rtmpLiveStreamKey = document.createElement('LABEL');
                                rtmpLiveStreamKey.className = 'live-editor-stream-to-section-rtmp-key';
                                rtmpLiveItem.appendChild(rtmpLiveStreamKey);

                                var rtmpLiveStreamKeyInput = document.createElement('INPUT');
                                rtmpLiveStreamKeyInput.type = 'password';
                                rtmpLiveStreamKeyInput.placeholder = 'Stream Key';
                                rtmpLiveStreamKeyInput.autocomplete = 'off';
                                rtmpLiveStreamKey.appendChild(rtmpLiveStreamKeyInput);

                                var linkToLiveCon = document.createElement('LABEL');
                                linkToLiveCon.className = 'live-editor-stream-to-section-rtmp-live-link';
                                rtmpLiveItem.appendChild(linkToLiveCon);

                                var linkToLiveInput = document.createElement('INPUT');
                                linkToLiveInput.type = 'text';
                                linkToLiveInput.placeholder = 'Link to livestream';
                                linkToLiveInput.autocomplete = 'off';
                                linkToLiveCon.appendChild(linkToLiveInput);

                                rtmpStreamingSettings.insertBefore(rtmpLiveItem, rtmpStreamingSettings.lastChild);
                            })

                            startStreamingBtn.addEventListener('click', function (e) {
                                if (typeof MediaRecorder == 'undefined') {
                                    alert('MediaRecorder is not supported in your browser.')
                                    return;
                                }

                                var rtmpUrls = Array.from(rtmpStreamingSettings.querySelectorAll('.live-editor-stream-to-section-rtmp-rtmp-item'));

                                var _currentlyStreamingToUrls = [];
                                var rtmpUrlsArr = [];
                                for (let i in rtmpUrls) {
                                    var inputs = rtmpUrls[i].querySelectorAll('input');
                                    var rtmpURL = inputs[0].value.trim();
                                    var streamKey = inputs[1].value.trim();
                                    var linkToLive = inputs[2].value.trim();
                                    var fullRtmpURL = rtmpURL;
                                    if (streamKey != null && streamKey != '') {
                                        fullRtmpURL = rtmpURL.endsWith('/') ? fullRtmpURL + streamKey : fullRtmpURL + '/' + streamKey;
                                    }
                                    
                                    let rtmpData = {
                                        rtmpUrl: fullRtmpURL,
                                        linkToLive: linkToLive,
                                        id: generateId()
                                    }
                                    rtmpUrlsArr.push(rtmpData);
                                    _currentlyStreamingToUrls.push(rtmpData);
                                }

                                tool.getOrCreateLivestreamStream().then(function() {
                                    tool.livestreamingRtmpSenderTool.rtmpSender.startStreaming(_currentlyStreamingToUrls, 'custom', tool.livestreamStream);
                                    rtmpStreamingSettings.style.display = 'none';
                                    rtmpLiveSection.style.display = 'block';
                                });
                            })

                            stopStreamingBtn.addEventListener('click', function () {
                                tool.livestreamingRtmpSenderTool.rtmpSender.endStreaming('custom');
                                rtmpStreamingSettings.style.display = 'block';
                                rtmpLiveSection.style.display = 'none';
                            })

                            return rtmpStreaming;
                        }

                        createSectionElement();

                        function getSection() {
                            return _streamingToCustomRtmpSection;
                        }
                        
                        function onStreamingEndedOrStoppedHandler() {
                            rtmpStreamingSettings.style.display = 'block';
                            rtmpLiveSection.style.display = 'none';
                        }
                        
                        return {
                            getSection: getSection,
                            onStreamingEndedOrStoppedHandler: onStreamingEndedOrStoppedHandler
                        }
                    }());

                    let serverRecording = (function() {
                        var _serverRecordingSection = null;

                        function createSectionElement() {
                            var roomId = 'broadcast-' + tool.webrtcUserInterface.getOptions().roomId + '-' + (tool.webrtcSignalingLib.localParticipant().sid).replace('/webrtc#', '');

                            var recordingCon = _serverRecordingSection = document.createElement('DIV');
                            recordingCon.className = 'live-editor-dialog-window-content live-editor-stream-to-section-rec'

                            var recordingSettings = document.createElement('DIV');
                            recordingSettings.className = 'live-editor-stream-to-section-rec-start_settings';
                            recordingCon.appendChild(recordingSettings);

                            var startRecordingBtnCon = document.createElement('DIV');
                            startRecordingBtnCon.className = 'live-editor-stream-to-section-rec-start';
                            recordingSettings.appendChild(startRecordingBtnCon);

                            var startRecordingBtn = document.createElement('BUTTON');
                            startRecordingBtn.type = 'button';
                            startRecordingBtn.className = 'Q_button';
                            startRecordingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.start", tool.text);
                            startRecordingBtnCon.appendChild(startRecordingBtn);

                            var activeRecordingSection = document.createElement('DIV');
                            activeRecordingSection.style.display = 'none';
                            activeRecordingSection.className = 'live-editor-stream-to-section-rec-live';
                            recordingCon.appendChild(activeRecordingSection);

                            var buttonsCon = document.createElement('DIV');
                            buttonsCon.className = 'live-editor-stream-to-section-rec-buttons';
                            activeRecordingSection.appendChild(buttonsCon);

                            var stopRecordingBtnCon = document.createElement('DIV');
                            stopRecordingBtnCon.className = 'live-editor-stream-to-section-rec-stop';
                            buttonsCon.appendChild(stopRecordingBtnCon);

                            var stopRecordingBtn = document.createElement('BUTTON');
                            stopRecordingBtn.type = 'button';
                            stopRecordingBtn.className = 'Q_button';
                            stopRecordingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.stop", tool.text);
                            stopRecordingBtnCon.appendChild(stopRecordingBtn);

                            startRecordingBtn.addEventListener('click', function () {
                                if (!recordingCon.classList.contains('Q_working')) recordingCon.classList.add('Q_working');
                                tool.livestreamingRtmpSenderTool.rtmpSender.startRecordingOnServer();

                                if (recordingCon.classList.contains('Q_working')) recordingCon.classList.remove('Q_working');
                                recordingSettings.style.display = 'none';
                                activeRecordingSection.style.display = 'block';
                                showLiveIndicator('rec');
                            })
                            stopRecordingBtn.addEventListener('click', function () {
                                if (!recordingCon.classList.contains('Q_working')) recordingCon.classList.add('Q_working');
                                tool.livestreamingRtmpSenderTool.rtmpSender.stopRecordingOnSever();

                                if (recordingCon.classList.contains('Q_working')) recordingCon.classList.remove('Q_working');
                                activeRecordingSection.style.display = 'none';
                                recordingSettings.style.display = '';
                                hideLiveIndicator('rec');
                            })

                            return recordingCon;
                        }

                        createSectionElement();

                        function getSection() {
                            return _serverRecordingSection;
                        }

                        return {
                            getSection: getSection
                        }
                    }())

                    let peerToPeerStreaming = (function() {
                        var _peerToPeerStreamingSection = null;
                        var _broadcastClient = null;
                        var _linkToLiveInput = null;

                        function generateLinkToLivestreamTool() {
                            let livestreamId = (tool.livestreamStream.fields.name).replace('Streams/webrtc/livestream/', '');
                            _linkToLiveInput.value = location.origin + '/livestream/' + tool.livestreamStream.fields.publisherId + '/' + livestreamId;
                        }

                        function createSectionElement() {
                            var roomId = 'broadcast-' + tool.webrtcUserInterface.getOptions().roomId + '-' + (tool.webrtcSignalingLib.localParticipant().sid).replace('/webrtc#', '');

                            var recordingCon = _peerToPeerStreamingSection = document.createElement('DIV');
                            recordingCon.className = 'live-editor-dialog-window-content live-editor-stream-to-section-p2p'

                            var recordingSettings = document.createElement('DIV');
                            recordingSettings.className = 'live-editor-stream-to-section-p2p-start_settings';
                            recordingCon.appendChild(recordingSettings);

                            var startRecordingBtnCon = document.createElement('DIV');
                            startRecordingBtnCon.className = 'live-editor-stream-to-section-p2p-start';
                            recordingSettings.appendChild(startRecordingBtnCon);

                            var startRecordingBtn = document.createElement('BUTTON');
                            startRecordingBtn.type = 'button';
                            startRecordingBtn.className = 'Q_button';
                            startRecordingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.start", tool.text);
                            startRecordingBtnCon.appendChild(startRecordingBtn);

                            var activeRecordingSection = document.createElement('DIV');
                            activeRecordingSection.style.display = 'none';
                            activeRecordingSection.className = 'live-editor-stream-to-section-p2p-live';
                            recordingCon.appendChild(activeRecordingSection);

                            var linkCon = document.createElement('DIV');
                            linkCon.className = 'live-editor-stream-to-section-p2p-link-con';
                            activeRecordingSection.appendChild(linkCon);
                            
                            var linkInputCon = document.createElement('LABEL');
                            linkInputCon.className = 'live-editor-stream-to-section-p2p-label';
                            linkCon.appendChild(linkInputCon);
                            var linkInput = _linkToLiveInput = document.createElement('INPUT');
                            linkInput.disabled = true;
                            //1 linkInput.value = location.origin + '/broadcast?stream=' + roomId;
                            //2 linkInput.value = location.origin + '/livestream/' + tool.livestreamStream.fields.publisherId + '/' + livestreamId;

                            linkInputCon.appendChild(linkInput);
                            var linkCopyBtn = document.createElement('BUTTON');
                            linkCopyBtn.innerHTML = Q.getObject("webrtc.settingsPopup.copy", tool.text);
                            linkCon.appendChild(linkCopyBtn);

                            linkCopyBtn.addEventListener('click', function () {
                                copyToClipboard(linkInput);
                                tool.webrtcUserInterface.notice.show(Q.getObject("webrtc.notices.linkCopiedToCb", tool.text));
                            })

                            var buttonsCon = document.createElement('DIV');
                            buttonsCon.className = 'live-editor-stream-to-section-p2p-buttons';
                            activeRecordingSection.appendChild(buttonsCon);

                            var stopRecordingBtnCon = document.createElement('DIV');
                            stopRecordingBtnCon.className = 'live-editor-stream-to-section-p2p-stop';
                            buttonsCon.appendChild(stopRecordingBtnCon);

                            var stopRecordingBtn = document.createElement('BUTTON');
                            stopRecordingBtn.type = 'button';
                            stopRecordingBtn.className = 'Q_button';
                            stopRecordingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.stop", tool.text);
                            stopRecordingBtnCon.appendChild(stopRecordingBtn);

                            startRecordingBtn.addEventListener('click', function () {
                                if (!recordingCon.classList.contains('Q_working')) recordingCon.classList.add('Q_working');
                                tool.getOrCreateLivestreamStream().then(function () {
                                    Q.addScript('{{Streams}}/js/tools/webrtc/broadcast.js', function () {
                                        Q.req("Streams/webcast", ["room"], function (err, response) {
                                            var msg = Q.firstErrorMessage(err, response && response.errors);

                                            if (msg) {
                                                return Q.alert(msg);
                                            }

                                            // roomId = (response.slots.room.roomId).replace('Streams/webrtc/', '');
                                            var turnCredentials = response.slots.room.turnCredentials;
                                            var socketServer = response.slots.room.socketServer;

                                            _broadcastClient = window.WebRTCWebcastClient({
                                                mode: 'node',
                                                role: 'publisher',
                                                nodeServer: socketServer,
                                                roomName: roomId,
                                                livestreamStreamData: {
                                                    publisherId: tool.livestreamStream.fields.publisherId,
                                                    streamName: tool.livestreamStream.fields.name,
                                                    livestreamSessionId: generateId()
                                                }
                                                //turnCredentials: turnCredentials,
                                            });
                                            if (recordingCon.classList.contains('Q_working')) recordingCon.classList.remove('Q_working');
                                            recordingSettings.style.display = 'none';
                                            activeRecordingSection.style.display = 'block';
                                            showLiveIndicator('p2p');
                                            generateLinkToLivestreamTool();

                                            _broadcastClient.init(function () {
                                                tool.livestreamingCanvasComposerTool.canvasComposer.captureStream();
                                                var stream = tool.livestreamingCanvasComposerTool.canvasComposer.getMediaStream();

                                                if (stream != null) stream = stream.clone();

                                                _broadcastClient.mediaControls.publishStream(stream);
                                                tool.webrtcSignalingLib.signalingDispatcher.sendDataTrackMessage('webcastStarted', roomId)
                                                tool.webrtcSignalingLib.event.dispatch('webcastStarted', { participant: tool.webrtcSignalingLib.localParticipant() });
                                            });

                                            _broadcastClient.event.on('disconnected', function () {
                                                tool.webrtcSignalingLib.signalingDispatcher.sendDataTrackMessage('webcastEnded')
                                                tool.webrtcSignalingLib.event.dispatch('webcastEnded', { participant: tool.webrtcSignalingLib.localParticipant() });

                                            });

                                        }, {
                                            method: 'post',
                                            fields: {
                                                roomId: roomId,
                                                publisherId: Q.Users.communityId,
                                            }
                                        });

                                    });
                                });
                            })
                            stopRecordingBtn.addEventListener('click', function () {
                                if (!recordingCon.classList.contains('Q_working')) recordingCon.classList.add('Q_working');

                                _broadcastClient.disconnect();

                                if (recordingCon.classList.contains('Q_working')) recordingCon.classList.remove('Q_working');
                                activeRecordingSection.style.display = 'none';
                                recordingSettings.style.display = '';
                                hideLiveIndicator('p2p');
                            })

                            return recordingCon;
                        }

                        createSectionElement();

                        function getSection() {
                            return _peerToPeerStreamingSection;
                        }

                        return {
                            getSection: getSection
                        }
                    }())

                    function showLiveIndicator(platform){
                        if(platform == 'facebook') {
                            if(!_facebookIconEl.classList.contains('live-editor-stream-to-is-active')) {
                                _facebookIconEl.classList.add('live-editor-stream-to-is-active');
                            }
                        } else if(platform == 'custom') {
                            if(!_customRtmpIconEl.classList.contains('live-editor-stream-to-is-active')) {
                                _customRtmpIconEl.classList.add('live-editor-stream-to-is-active');
                            }
                        } else if(platform == 'p2p') {
                            if(!_p2pBroadcastIconEl.classList.contains('live-editor-stream-to-is-active')) {
                                _p2pBroadcastIconEl.classList.add('live-editor-stream-to-is-active');
                            }
                        } else if(platform == 'rec') {
                            if(!_recordingIconEl.classList.contains('live-editor-stream-to-is-active')) {
                                _recordingIconEl.classList.add('live-editor-stream-to-is-active');
                            }
                        }
                    }
                    function hideLiveIndicator(platform){
                        if(platform == 'facebook') {
                            _facebookIconEl.classList.remove('live-editor-stream-to-is-active');
                        } else if(platform == 'custom') {
                            _customRtmpIconEl.classList.remove('live-editor-stream-to-is-active');
                        } else if(platform == 'p2p') {
                            _p2pBroadcastIconEl.classList.remove('live-editor-stream-to-is-active');
                        } else if(platform == 'rec') {
                            _recordingIconEl.classList.remove('live-editor-stream-to-is-active');
                        }
                    }

                    function createSection(){
                        var sectionContainer = document.createElement('DIV');
                        sectionContainer.className = 'live-editor-stream-to-section';
                        var sectionInnerContainer = document.createElement('DIV');
                        sectionInnerContainer.className = 'live-editor-stream-to-section-inner';
                        sectionContainer.appendChild(sectionInnerContainer);

                        var recordingBtn = document.createElement('DIV');
                        recordingBtn.className = 'live-editor-stream-to-section-btn live-editor-stream-to-section-rec-btn';
                        sectionInnerContainer.appendChild(recordingBtn);

                        var recordingIcon = document.createElement('DIV');
                        recordingIcon.className = 'live-editor-stream-to-section-btn-icon live-editor-stream-to-section-rec-icon';
                        recordingBtn.appendChild(recordingIcon);

                        var recordingIconSvg = _recordingIconEl = document.createElement('DIV');
                        recordingIconSvg.className = 'live-editor-stream-to-section-btn-icon-svg';
                        recordingIconSvg.innerHTML = _streamingIcons.recordingIcon;
                        recordingIcon.appendChild(recordingIconSvg);

                        var recordingCaption = document.createElement('DIV');
                        recordingCaption.className = 'live-editor-stream-to-section-btn-text live-editor-stream-to-section-p2p-text';
                        recordingCaption.innerHTML = 'Record';
                        recordingBtn.appendChild(recordingCaption);

                        var peerToPeerStreamingBtn = document.createElement('DIV');
                        peerToPeerStreamingBtn.className = 'live-editor-stream-to-section-btn live-editor-stream-to-section-p2p-btn';
                        sectionInnerContainer.appendChild(peerToPeerStreamingBtn);

                        var peerToPeerStreamingIcon = document.createElement('DIV');
                        peerToPeerStreamingIcon.className = 'live-editor-stream-to-section-btn-icon live-editor-stream-to-section-p2p-icon';
                        peerToPeerStreamingBtn.appendChild(peerToPeerStreamingIcon);

                        var peerToPeerStreamingIconSvg = _p2pBroadcastIconEl = document.createElement('DIV');
                        peerToPeerStreamingIconSvg.className = 'live-editor-stream-to-section-btn-icon-svg';
                        peerToPeerStreamingIconSvg.innerHTML = _streamingIcons.streamingToP2P;
                        peerToPeerStreamingIcon.appendChild(peerToPeerStreamingIconSvg);

                        var peerToPeerStreamingCaption = document.createElement('DIV');
                        peerToPeerStreamingCaption.className = 'live-editor-stream-to-section-btn-text live-editor-stream-to-section-p2p-text';
                        peerToPeerStreamingCaption.innerHTML = 'P2P<br>Broadcast';
                        peerToPeerStreamingBtn.appendChild(peerToPeerStreamingCaption);

                        var facebookLiveBtn = document.createElement('DIV');
                        facebookLiveBtn.className = 'live-editor-stream-to-section-btn live-editor-stream-to-section-fb-btn';
                        sectionInnerContainer.appendChild(facebookLiveBtn);

                        var facebookLiveIcon = document.createElement('DIV');
                        facebookLiveIcon.className = 'live-editor-stream-to-section-btn-icon live-editor-stream-to-section-fb-icon';
                        facebookLiveBtn.appendChild(facebookLiveIcon);

                        var facebookLiveIconSvg = _facebookIconEl = document.createElement('DIV');
                        facebookLiveIconSvg.className = 'live-editor-stream-to-section-btn-icon-svg';
                        facebookLiveIconSvg.innerHTML = _streamingIcons.streamingToFb;
                        facebookLiveIcon.appendChild(facebookLiveIconSvg);

                        var facebookLiveCaption = document.createElement('DIV');
                        facebookLiveCaption.className = 'live-editor-stream-to-section-btn-text live-editor-stream-to-section-fb-text';
                        facebookLiveCaption.innerHTML = 'Facebook<br>Live';
                        facebookLiveBtn.appendChild(facebookLiveCaption);

                        var customStreamBtn = document.createElement('DIV');
                        customStreamBtn.className = 'live-editor-stream-to-section-btn live-editor-stream-to-section-suctom-rtmp-btn';
                        sectionInnerContainer.appendChild(customStreamBtn);

                        var customStreamIcon = document.createElement('DIV');
                        customStreamIcon.className = 'live-editor-stream-to-section-btn-icon live-editor-stream-to-section-rtmp-icon';
                        customStreamBtn.appendChild(customStreamIcon);

                        var customStreamIconSvg = _customRtmpIconEl = document.createElement('DIV');
                        customStreamIconSvg.className = 'live-editor-stream-to-section-btn-icon-svg';
                        customStreamIconSvg.innerHTML = _streamingIcons.streamingToRtmp;
                        customStreamIcon.appendChild(customStreamIconSvg);

                        var customStreamCaption = document.createElement('DIV');
                        customStreamCaption.className = 'live-editor-stream-to-section-btn-text live-editor-stream-to-section-fb-text';
                        customStreamCaption.innerHTML = 'Custom<br>Stream';
                        customStreamBtn.appendChild(customStreamCaption);


                        recordingBtn.addEventListener('click', function() {
                            let streamingControlsEl = document.querySelector('.live-editor-popup-preview');
                            let rectangleToShowIn = streamingControlsEl ? streamingControlsEl.getBoundingClientRect() : null;
                            let settingsDialog = new SimpleDialog({
                                content: serverRecording.getSection(), 
                                rectangleToShowIn: rectangleToShowIn,
                                title: 'Record',
                                className: 'live-editor-modal-window'
                            });
                        });

                        peerToPeerStreamingBtn.addEventListener('click', function() {
                            let streamingControlsEl = document.querySelector('.live-editor-popup-preview');
                            let rectangleToShowIn = streamingControlsEl ? streamingControlsEl.getBoundingClientRect() : null;
                            let settingsDialog = new SimpleDialog({
                                content: peerToPeerStreaming.getSection(), 
                                rectangleToShowIn: rectangleToShowIn,
                                title: 'Peer To Peer Broadcast',
                                className: 'live-editor-modal-window'
                            });
                        });

                        facebookLiveBtn.addEventListener('click', function() {
                            let streamingControlsEl = document.querySelector('.live-editor-popup-preview');
                            let rectangleToShowIn = streamingControlsEl ? streamingControlsEl.getBoundingClientRect() : null;
                            let settingsDialog = new SimpleDialog({
                                content: streamingToFacebook.getSection(), 
                                rectangleToShowIn: rectangleToShowIn,
                                title: 'Start Facebook Live',
                                className: 'live-editor-modal-window'
                            });
                        });

                        customStreamBtn.addEventListener('click', function() {
                            let streamingControlsEl = document.querySelector('.live-editor-popup-preview');
                            let rectangleToShowIn = streamingControlsEl ? streamingControlsEl.getBoundingClientRect() : null;
                            let settingsDialog = new SimpleDialog({
                                content: streamingToCustomRtmp.getSection(), 
                                rectangleToShowIn: rectangleToShowIn,
                                title: 'Stream to custom RTMP'
                            });
                        });
                        return sectionContainer;
                    }

                    return {
                        createSection: createSection
                    }
                }())

                var scenesInterface = (function () {
                    var _scenesDropDownEl = null;
                    var _scenesList = [];
                    var _activeScene = null;
                    var _eventDispatcher = new EventSystem();

                    var SceneListItem = function (sceneInstance) {
                        var sceneListInstance = this;
                        this._title = sceneInstance.title;
                        this.itemEl = null;
                        this.sceneInstance = sceneInstance;
                        this.sourcesInterface = new SourcesInterface(this);
                        this.remove = function () {
                            var currentItem = this;
                            if (this.itemEl != null && this.itemEl.parentNode != null) this.itemEl.parentNode.removeChild(this.itemEl);
                            for (var i in _scenesList) {
                                if (_scenesList[i] == currentItem) {
                                    _scenesList.splice(i, 1);
                                    break;
                                }
                            }
                        };
                        this.isActive = function () {
                            var scenes = tool.livestreamingCanvasComposerTool.canvasComposer.getScenes();
                            for (let i in scenes) {
                                if (scenes[i] == this.sceneInstance) {
                                    return true;
                                }
                            }
                            return false;
                        };

                        var itemEl = document.createElement('OPTION');
                        itemEl.className = 'live-editor-popup-scenes-select-item';
                        itemEl.value = sceneInstance.id;
                        itemEl.innerHTML = sceneInstance.title;
                        this.itemEl = itemEl;

                        sceneInstance.eventDispatcher.on('sourceAdded', function () {
                            sceneListInstance.sourcesInterface.update();
                        })

                        sceneInstance.eventDispatcher.on('sourceRemoved', function () {
                            sceneListInstance.sourcesInterface.update();
                        })

                        sceneInstance.eventDispatcher.on('sourceMoved', function () {
                            sceneListInstance.sourcesInterface.update();
                        })

                    }
                    Object.defineProperties(SceneListItem.prototype, {
                        'title': {
                            'set': function (val) {
                                this._title = val;
                                if (this.itemEl) this.itemEl.innerHTML = val;
                            },
                            'get': function (val) {
                                return this._title;
                            }
                        }
                    });

                    function addNewScene(name) {
                        log('addNewScene', name)
                        tool.livestreamingCanvasComposerTool.canvasComposer.createScene(name);
                        syncList();
                    }

                    function selectScene(sceneIdOrObject) {
                        let sceneItem;
                        if(typeof sceneIdOrObject == 'string') {
                            sceneItem = _scenesList.filter(function(s){
                                return s.sceneInstance.id == sceneIdOrObject ? true : false;
                            })[0];
                        } else {
                            sceneItem = sceneIdOrObject;
                        }

                        if(!sceneItem) {
                            return;
                        }

                        if (sceneItem.itemEl) {
                            log('selectScene make selected');
                            sceneItem.itemEl.selected = true;
                        }
                        var switchScene = _activeScene != sceneItem;
                        var prevScene = _activeScene;
                        _activeScene = sceneItem;
                        if(prevScene && switchScene) {
                            let sources = prevScene.sourcesInterface.getSourcesList();
                            for(let s in sources) {
                                if(sources[s].resizingElement != null && sources[s].resizingElement.parentElement) {
                                    sources[s].resizingElement.parentElement.removeChild(sources[s].resizingElement);
                                }
                            }

                            let allParticipantsListItem = prevScene.sourcesInterface.getWebrtcGroupListItem();
                            if(allParticipantsListItem && allParticipantsListItem.resizingElement.parentElement) {
                                allParticipantsListItem.resizingElement.parentElement.removeChild(allParticipantsListItem.resizingElement);
                            }
                        }
                        tool.livestreamingCanvasComposerTool.canvasComposer.selectScene(_activeScene.sceneInstance);

                        if (_sourcesColumnEl) {
                            let sourceColAlreadyExists = _sourcesColumnEl.querySelector('.live-editor-popup-sources-inner');
                            if(sourceColAlreadyExists != null && sourceColAlreadyExists.parentElement) {
                                sourceColAlreadyExists.parentElement.removeChild(sourceColAlreadyExists);
                            }

                            _sourcesColumnEl.appendChild(_activeScene.sourcesInterface.createSourcesCol());
                        }

                        //_activeScene.sourcesInterface.initHoveringTool();
                        let sources = _activeScene.sourcesInterface.getSourcesList();
                        for (let s in sources) {
                            if (sources[s].resizingElement != null) {
                                activeDialog.previewBoxEl.appendChild(sources[s].resizingElement);
                            }
                        }

                        let allParticipantsListItem = _activeScene.sourcesInterface.getWebrtcGroupListItem();
                        if (allParticipantsListItem && allParticipantsListItem.resizingElement) {
                            activeDialog.previewBoxEl.appendChild(allParticipantsListItem.resizingElement);
                        }

                        let webrtcGroup = _activeScene.sourcesInterface.getWebrtcGroupListItem()
                        if(webrtcGroup.sourceInstance) {
                            tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.updateWebRTCLayout(webrtcGroup.sourceInstance);
                        }

                        _activeScene.sourcesInterface.update();
                        optionsColumn.update();
                        _eventDispatcher.dispatch('sceneSelected', _activeScene);
                    }

                    function moveSceneUp(sceneId) {
                        log('moveUp', sceneId);
                        let sceneToMove;
                        if(sceneId != null) {
                            sceneToMove = _scenesList.filter(function (s) {
                                return s.sceneInstance.id == sceneId ? true : false;
                            })[0];
                        } else {
                            sceneToMove = _activeScene;
                        }

                        log('moveUp sceneToMove', sceneToMove);
                        if(!sceneToMove) return;
                        tool.livestreamingCanvasComposerTool.canvasComposer.moveSceneUp(sceneToMove.sceneInstance);

                        sortScenesList();
                    }

                    function moveSceneDown(sceneId) {
                        log('moveSceneDown');
                        let sceneToMove;
                        if(sceneId != null) {
                            sceneToMove = _scenesList.filter(function (s) {
                                return s.sceneInstance.id == sceneId ? true : false;
                            })[0];
                        } else {
                            sceneToMove = _activeScene;
                        }

                        if(!sceneToMove) return;
                        tool.livestreamingCanvasComposerTool.canvasComposer.moveSceneDown(sceneToMove.sceneInstance);

                        sortScenesList();
                    }

                    function removeScene(sceneId) {
                        log('removeScene', sceneId, _activeScene);
                        let sceneToRemove;
                        if(sceneId != null) {
                            sceneToRemove = _scenesList.filter(function (s) {
                                return s.sceneInstance.id == sceneId ? true : false;
                            })[0];
                        } else {
                            sceneToRemove = _activeScene;
                        }

                        if(!sceneToRemove) return;


                        let indexOfScreneToRemove;
                        let sceneToSwitchTo;
                        if (_scenesList.length > 1) {
                            for (let s in _scenesList) {
                                if (_scenesList[s] == sceneToRemove) {
                                    indexOfScreneToRemove = s;
                                    break;
                                }
                            }

                            if (_scenesList[indexOfScreneToRemove + 1] != null) {
                                selectScene(_scenesList[indexOfScreneToRemove + 1]);
                            } else if (_scenesList[indexOfScreneToRemove - 1] != null) {
                                selectScene(_scenesList[indexOfScreneToRemove - 1]);
                            }

                            tool.livestreamingCanvasComposerTool.canvasComposer.removeScene(sceneToRemove.sceneInstance);
                            syncList();
                        } else {
                            //at least once scene should exist
                        }


                    }

                    function addSceneItemToList(item) {
                        log('scenesInterface: addSceneItemToList', item, item.title)

                        if (item == null || _scenesDropDownEl == null) return;
                        _scenesList.push(item)
                        _scenesDropDownEl.appendChild(item.itemEl);
                    }

                    function sortScenesList() {
                        var listArr = _scenesList;
                        var listEl = _scenesDropDownEl;
                        var scenes = tool.livestreamingCanvasComposerTool.canvasComposer.getScenes();

                        log('sortList: scenes', scenes, listArr);

                        if (scenes.length !== listArr.length) {
                            return;
                        }
                        listArr.sort((a, b) => {
                            return scenes.findIndex(p => p === a.sceneInstance) - scenes.findIndex(p => p === b.sceneInstance);
                        });

                        log('sortList: listArr', listArr.map(el => { return el.itemEl.innerText }));
                        log('sortList: NOT sortedElements', Array.from(listEl.childNodes).map(el => { return el.innerText }))

                        listEl.innerHTML == '';
                        for (let e = 0; e < listArr.length; e++) {
                            listEl.appendChild(listArr[e].itemEl)
                        }

                    }

                    function syncList() {

                        log('scenes: syncList _scenesList', _scenesList.length);

                        for (let i = _scenesList.length - 1; i >= 0; i--) {
                            log('scenes: syncList _scenesList', _scenesList[i]);
                            if (_scenesList[i] == null) continue;

                            if (_scenesList[i].isActive() == false) {
                                log('scenes: syncList remove', _scenesList[i]);

                                _scenesList[i].remove();
                                continue;
                            }
                        }

                        var scenes = tool.livestreamingCanvasComposerTool.canvasComposer.getScenes();

                        log('scenesInterface: all', scenes);

                        for (let s in scenes) {
                            log('CONTROLS ADD SCENES', scenes[s])
                            log('CONTROLS ADD SOURCES', scenes[s].sources)
                            let sceneAlreadyExists = false;
                            for (let e in _scenesList) {
                                if (_scenesList[e].sceneInstance == scenes[s]) sceneAlreadyExists = true;
                            }
                            if (sceneAlreadyExists) continue;
                            log('scenesInterface: not exist')

                            var item = new SceneListItem(scenes[s])
                            addSceneItemToList(item);

                            if (_activeScene == null && s == 0) {
                                selectScene(item);
                            }
                            log('_eventDispatcher', _eventDispatcher)
                            _eventDispatcher.dispatch('newSceneAdded', item);

                        }
                        log('_scenesList', _scenesList)
                    }


                    function initHoveringTool() {
                        if(_hoveringElementToolInstance) {
                            return;
                        }
                        log('initHoveringTool');

                        var hoveredOverRect;
                        var _sourcesList, _selectedSource, allParticipantsListItem, allParticipantsGroupInstance, previewBoxRect, timesBigger;

                        function onSceneChangeHandler() {
                            if(!_activeScene) {
                                return;
                            }
                            _selectedSource = _activeScene.sourcesInterface.getSelectedSource();
                            _sourcesList = _activeScene.sourcesInterface.getSourcesList();
                            allParticipantsListItem = _activeScene.sourcesInterface.getWebrtcGroupListItem();
                            allParticipantsGroupInstance = allParticipantsListItem.sourceInstance;

                            previewBoxRect = activeDialog.previewBoxEl.getBoundingClientRect();
                            var canvasSize = tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.getCanvasSize();
                            var prmtr1 = canvasSize.width * 2 + canvasSize.height * 2
                            var realcanvasSize = _streamingCanvas.getBoundingClientRect();
                            var prmtr2 = realcanvasSize.width * 2 + realcanvasSize.height * 2
                            timesBigger = prmtr1 >= prmtr2 ? prmtr1 / prmtr2 : prmtr2 / prmtr1;
                        }
                        onSceneChangeHandler();

                        function handleScenesEvents (scene) {
                            scene.sourcesInterface.on('sourceSelected', function (source) {
                                log('sourceSelected', source, scene.sourcesInterface.getSelectedSource())
                                _selectedSource = source;
                                onSceneChangeHandler();
                            })

                            scene.sceneInstance.eventDispatcher.on('sourceAdded', function (source) {
                                onSceneChangeHandler();
                            })
    
                            scene.sceneInstance.eventDispatcher.on('sourceRemoved', function (source) {
                                onSceneChangeHandler();
                            })
                        }

                        _eventDispatcher.on('sceneSelected', onSceneChangeHandler);
                        log('track newSceneAdded')

                        for (let s in _scenesList) {
                            handleScenesEvents(_scenesList[s]);
                        }
                        _eventDispatcher.on('newSceneAdded', function (scene) {
                            handleScenesEvents(scene);
                        });

                        activeDialog.previewBoxParent.addEventListener('mousemove', function (e) {
                            if(allParticipantsGroupInstance == null && _sourcesList.length == 0) {
                                return;
                            }
                            let x = e.clientX - previewBoxRect.x;
                            let y = e.clientY - previewBoxRect.y;
        
                            let isResizingOrMoving = false;
                            let res = '';
                            for (let s in _sourcesList) {
                                if(_sourcesList[s].listType == 'audio') continue;
                                if (_sourcesList[s].resizingElementTool.state.isResizing || _sourcesList[s].resizingElementTool.state.isMoving || _sourcesList[s].resizingElementTool.state.appliedRecently) {
                                    isResizingOrMoving = true;
                                    if (_sourcesList[s].resizingElementTool.state.isResizing) {
                                        res += '1'
                                    }
                                    if (_sourcesList[s].resizingElementTool.state.isMoving) {
                                        res += '2'
                                    }
                                    if (_sourcesList[s].resizingElementTool.state.appliedRecently) {
                                        res += '3'
                                    }
                                }
                            }
                            if(allParticipantsListItem.resizingElementTool.state.isResizing || allParticipantsListItem.resizingElementTool.state.isMoving || allParticipantsListItem.resizingElementTool.state.appliedRecently) {
                                isResizingOrMoving = true;
                            }
                            if (isResizingOrMoving) {
                                _hoveringElement.style.boxShadow = 'none';
                                hoveredOverRect = null;
                                return;
                            }
        
                            let selectedSourceRect = null;
                            let preselected = false;
                            let i = 0, len = _sourcesList.length;
                            while (i <= len) {
                                let sourceItem = i != len ? _sourcesList[i] : allParticipantsListItem;

                                if(sourceItem.listType == 'audio') {
                                    i++;
                                    continue;
                                }
                                let rect = i != len ? _sourcesList[i].sourceInstance.rect : allParticipantsGroupInstance.rect;
                                let rectLeft = rect._x / timesBigger;
                                let rectRight = (rect._x + rect._width) / timesBigger;
                                let rectTop = rect._y / timesBigger;
                                let rectBottom = (rect._y + rect._height) / timesBigger;
                                let rectWidth = rect._width / timesBigger;
                                let rectHeight = rect._height / timesBigger;
        
                                if (x >= rectLeft && x <= rectRight
                                    && y >= rectTop && y <= rectBottom) {
                                    if (sourceItem == _selectedSource) {
                                        selectedSourceRect = rect;
                                        i++;
                                        continue;
                                    }
                                    if (selectedSourceRect != null && rect._width * rect._height > selectedSourceRect._width * selectedSourceRect._height) {
                                        i++;
                                        continue;
                                    }
                                    hoveredOverRect = rect;
                                    _hoveringElement.style.width = rectWidth + 'px';
                                    _hoveringElement.style.height = rectHeight + 'px';
                                    _hoveringElement.style.top = rectTop + 'px';
                                    _hoveringElement.style.left = rectLeft + 'px';
                                    _hoveringElement.style.boxShadow = 'inset 0px 0px 0px 1px skyblue';
                                    preselected = true;
                                    break;
                                }
                                i++;
                            }

                            if (!preselected) {
                                _hoveringElement.style.boxShadow = 'none';
                                hoveredOverRect = null;
                            }
                        });
        
                        activeDialog.previewBoxParent.addEventListener('mouseleave', function (e) {
                            if(allParticipantsGroupInstance == null && _sourcesList.length == 0) {
                                return;
                            }
                            _hoveringElement.style.boxShadow = 'none';
                            hoveredOverRect = null;
                        });
        
                        activeDialog.previewBoxParent.addEventListener('click', function (e) {
                            if(allParticipantsGroupInstance == null && _sourcesList.length == 0) {
                                return;
                            }
                            if (hoveredOverRect != null) {
                                //if (_resizingElementTool.state.appliedRecently) return;
                                let i = 0, len = _sourcesList.length;
                                while (i <= len) {
                                    let sourceListItem = i != len ? _sourcesList[i] : allParticipantsListItem;
                                    let sourceInstance = i != len ? _sourcesList[i].sourceInstance : allParticipantsGroupInstance;
                                    if (sourceListItem.listType == 'audio') {
                                        i++;
                                        continue;
                                    }
                                    if (sourceInstance.rect == hoveredOverRect) {
                                        _activeScene.sourcesInterface.selectSource(sourceListItem);
                                        _hoveringElement.style.boxShadow = 'none';
                                        break;
                                    }
                                    i++;
                                }
        
                            } else if (e.target && e.target.classList.contains('le-canvas-preview-resizing')) {
                                //log('DESELECT')
        
                                let i = 0, len = _sourcesList.length;
                                while (i < len) {
                                    if(_sourcesList[i].listType == 'audio') {
                                        i++;
                                        continue;
                                    }
                                    if (_sourcesList[i].resizingElement == e.target) {
                                        _activeScene.sourcesInterface.selectSource(_sourcesList[i]);
                                        //_hoveringElement.style.boxShadow = 'none';
                                        break;
                                    }
                                    i++;
                                }
                            }
        
        
                        });
                    }

                    window.sl = _scenesList;

                    var addNewScenePopup = (function () {
                        var _dialogEl = null;
                        var _popupDialog = null;

                        log('addNewScenePopup')
                       
                        var boxContent = _dialogEl = document.createElement('DIV');
                        boxContent.className = 'live-editor-dialog-window-content';

                        var sceneNameInputCon = document.createElement('DIV');
                        sceneNameInputCon.className = 'live-editor-dialog-name-con';
                        boxContent.appendChild(sceneNameInputCon);
                        
                        var sceneNameInputText = document.createElement('SPAN');
                        sceneNameInputText.className = 'live-editor-dialog-name-text';
                        sceneNameInputText.innerHTML = 'Please, enter name of scene';
                        sceneNameInputCon.appendChild(sceneNameInputText);
                        
                        var sceneNameInput = document.createElement('INPUT');
                        sceneNameInput.className = 'live-editor-dialog-name';
                        sceneNameInput.type = 'text';
                        sceneNameInput.placeholder = 'Enter name of scene';
                        sceneNameInput.name = 'nameOfScene';
                        sceneNameInputCon.appendChild(sceneNameInput);

                        var buttonsCon = document.createElement('DIV');
                        buttonsCon.className = 'live-editor-dialog-buttons';
                        boxContent.appendChild(buttonsCon);
                        var okButton = document.createElement('BUTTON');
                        okButton.className = 'live-editor-dialog-ok-btn';
                        okButton.innerHTML = 'OK';
                        buttonsCon.appendChild(okButton);

                        okButton.addEventListener('click', function () {
                            if (sceneNameInput.value != '') {
                                var val = sceneNameInput.value;
                                addNewScene(val);
                                hideDialog();
                                sceneNameInput.value = '';
                            }
                        });

                        function setDefaultSceneName() {
                            sceneNameInput.value = 'Scene ' + parseInt(_scenesList.length + 1)
                        }

                        function showDialog(e) {
                            sceneNameInput.value = '';
                            if(_popupDialog && !_popupDialog.active) {
                                _popupDialog.show();
                                return;
                            } else if(_popupDialog) {
                                return;
                            }
                            _popupDialog = new SimpleDialog({
                                content: _dialogEl, 
                                rectangleToShowIn: null,
                                className: 'live-editor-dialog-box-add-new-s live-editor-popup-add-scene',
                                title: 'Add new scene'
                            });
                            setDefaultSceneName();
                        }

                        function hideDialog() {
                            if(_popupDialog) _popupDialog.hide();
                        }

                        return {
                            hideDialog: hideDialog,
                            showDialog: showDialog
                        }
                    }())

                    function createScenesCol() {
                        var scenesColumn = document.createElement('DIV');
                        scenesColumn.className = 'live-editor-popup-scenes';
                        var scenesColumnBody = document.createElement('DIV');
                        scenesColumnBody.className = 'live-editor-popup-scenes-body';
                        var customSelectCon = document.createElement('DIV');
                        customSelectCon.className = 'live-editor-popup-scenes-select-con';
                        var selectDropDown = document.createElement('SELECT');
                        selectDropDown.className = 'live-editor-popup-scenes-select';
                        customSelectCon.appendChild(selectDropDown);
                        scenesColumnBody.appendChild(customSelectCon);
                        
                        var scenesColumnControlAddBtn = document.createElement('DIV');
                        scenesColumnControlAddBtn.className = 'live-editor-popup-scenes-control-btn live-editor-popup-scenes-control-btn-add';
                        if(!tool.state.managingScenes) scenesColumnControlAddBtn.classList.add('live-editor-inactive');
                        scenesColumnControlAddBtn.innerHTML = _streamingIcons.addItem;

                        scenesColumnControlAddBtn.addEventListener('click', function (event) {
                            addNewScenePopup.showDialog(event);
                        });

                        selectDropDown.addEventListener('change', function (e) {
                            log('chaaange',e.target.value)
                            selectScene(e.target.value);
                        })

                        var customSelect = new CustomSelect(selectDropDown);
                        customSelect.customSelectDropDownEl.classList.add('live-editor-popup-scenes-select-list');
                        customSelect.customSelectControlsEl.appendChild(scenesColumnControlAddBtn);
                        customSelect.syncOptionsList = function () {
                            log('syncOptionsList START');
                            /*try {
                                var err = (new Error);
                                log(err.stack);
                            } catch (e) {
            
                            }*/
                            let originalSelect = customSelect.originalSelect;
                            let optionsNumber = originalSelect.options.length;
                            for(let e = customSelect.optionsList.length - 1; e >= 0; e--) {
                                let option = customSelect.optionsList[e];
                                let sourceIsRemoved = true;
                                for (let h = 0; h < optionsNumber; h++) {
                                    if(option.originalOptionEl == originalSelect.options[h]) {
                                        sourceIsRemoved = false;
                                        break;
                                    }
                                }
                                if(sourceIsRemoved) {
                                    if (option.customOptionEl != null && option.customOptionEl.parentElement != null) {
                                        option.customOptionEl.parentElement.removeChild(option.customOptionEl);
                                    }
                                    customSelect.optionsList.splice(e, 1);
                                }
                            }

                            for (let j = 0; j < optionsNumber; j++) {
                                let optionAlreadyExists = false;
                                for(let l in customSelect.optionsList) {
                                    if(customSelect.optionsList[l].originalOptionEl == originalSelect.options[j]) {
                                        optionAlreadyExists = customSelect.optionsList[l];
                                    }
                                }

                                if(optionAlreadyExists != false) {
                                    customSelect.customSelectListEl.appendChild(optionAlreadyExists.customOptionEl);
                                    continue;
                                } else if (optionAlreadyExists == false) {
                                    let sceneId = originalSelect.options[j].value;
                                    let optionElementCon = document.createElement("DIV");
                                    optionElementCon.className = 'live-editor-custom-select-option';
                                    optionElementCon.dataset.selectValue = originalSelect.options[j].value;
                                    customSelect.customSelectListEl.appendChild(optionElementCon);
    
                                    optionElementCon.addEventListener("click", function(e) {
                                        customSelect.selectOption(e.currentTarget);
                                    });
    
                                    let optionElementText = document.createElement("DIV");
                                    optionElementText.className = 'live-editor-custom-select-option-text';
                                    optionElementText.innerHTML = originalSelect.options[j].innerHTML;
                                    optionElementCon.appendChild(optionElementText);
    
                                    let optionElementControls = document.createElement("DIV");
                                    optionElementControls.className = 'live-editor-custom-select-option-controls';
                                    optionElementCon.appendChild(optionElementControls);
                                    
                                    var optionControlsRemoveBtn = document.createElement('DIV');
                                    optionControlsRemoveBtn.className = 'live-editor-custom-select-option-controls-btn';
                                    optionControlsRemoveBtn.innerHTML = _streamingIcons.removeItem;
                                    optionControlsRemoveBtn.addEventListener('click', function (e) {
                                        removeScene(sceneId);
                                        e.stopPropagation();
                                    })
                                    optionElementControls.appendChild(optionControlsRemoveBtn);
    
                                    var optionControlsUpBtn = document.createElement('DIV');
                                    optionControlsUpBtn.className = 'live-editor-custom-select-option-controls-btn live-editor-custom-select-btn-move';
                                    optionControlsUpBtn.innerHTML = _streamingIcons.moveUp;
                                    optionControlsUpBtn.addEventListener('click', function (e) {
                                        moveSceneUp(sceneId);
                                        e.stopPropagation();
                                    })
                                    optionElementControls.appendChild(optionControlsUpBtn);
    
                                    var optionControlsDownBtn = document.createElement('DIV');
                                    optionControlsDownBtn.className = 'live-editor-custom-select-option-controls-btn live-editor-custom-select-btn-move';
                                    optionControlsDownBtn.innerHTML = _streamingIcons.moveDown;
                                    optionControlsDownBtn.addEventListener('click', function (e) {
                                        moveSceneDown(sceneId);
                                        e.stopPropagation();
                                    })
                                    optionElementControls.appendChild(optionControlsDownBtn);
    
                                    customSelect.optionsList.push({
                                        originalOptionEl: originalSelect.options[j],
                                        customOptionEl: optionElementCon,
                                        value: originalSelect.options[j].value
                                    });
                                }
                            }
                            
                        };
                       

                        scenesColumn.appendChild(scenesColumnBody);
                        _scenesDropDownEl = selectDropDown;
                        return scenesColumn;
                    }

                    function getActiveScene() {
                        return _activeScene;
                    }


                    return {
                        createScenesCol: createScenesCol,
                        syncList: syncList,
                        getActive: getActiveScene,
                        initHoveringTool: initHoveringTool
                    }

                }())

                var SourcesInterface = function (sceneListItem) {
                    var _id = Date.now().toString(36) + Math.random().toString(36).replace(/\./g, "");
                    var _scene = sceneListItem;
                    var _sourcesList = [];
                    var _audioList = [];
                    var _selectedSource = null;
                    var _selectedLayout = null;
                    var _layoutsListDropDownCon = null;
                    var _layoutsListSelect = null;
                    var _layoutsListCustomSelect = null;
                    var _autoSwitchToScreensharingLayoutAndBack = false;
                    var _participantsList = null;
                    var _sceneSourcesColumnEl = null;
                    var _sourcesListEl = null;
                    var _visualSourcesEl = null;
                    var _visualSourcesListEl = null;
                    var _sourceControlButtons = [];
                    let _addVisualSourceDropUpMenuEl = null;
                    var _audioSourcesListEl = null;
                    var _globalMicIconEl = null;
                    var _eventDispatcher = new EventSystem();

                    var _videoTool = null;
                    var _audioTool = null;
                    var _videoPopup = null;

                    function initVideoTool() {        
                        Q.activate(
                            Q.Tool.setUpElement(
                                'DIV',
                                "Streams/webrtc/video",
                                {
                                    controlsTool: tool.state.controlsTool,
                                    webrtcUserInterface: tool.state.webrtcUserInterface
                                }
                            ),
                            {},
                            onVideoInputsListCreated
                        );
        
                        function onVideoInputsListCreated() {
                            _videoTool = this;
                            _videoTool.loadCamerasList();
                        }
                    }
                    initVideoTool();

                    function initAudioTool() {        
                        Q.activate(
                            Q.Tool.setUpElement(
                                'DIV',
                                "Streams/webrtc/audio",
                                {
                                    controlsTool: tool.state.controlsTool,
                                    webrtcUserInterface: tool.state.webrtcUserInterface
                                }
                            ),
                            {},
                            onAudioListCreated
                        );
        
                        function onAudioListCreated() {
                            _audioTool = this;
                            _audioTool.loadAudioOutputList();
                            _audioTool.loadAudioInputList();
                        }
                    }
                    initAudioTool();

                    var ListItem = function (name) {
                        this.active = true;
                        this.title = name != null ? name : null;
                        this.itemEl = null;
                        this.visibilityEl = null;
                        this._sourceInstance = null;
                    }

                    var VisualListItem = function (source) {
                        var sourceInstance = this;
                        this.listType = 'visual';
                        this._sourceInstance = source;
                        this._title = source.title ? source.title : (source.name != null ? source.name : source.sourceType);
                        this.remove = function () {
                            var currentitem = this;
                            if(this.itemEl != null && this.itemEl.parentNode != null) this.itemEl.parentNode.removeChild(this.itemEl);
                            for(var i in _sourcesList) {
                                if(_sourcesList[i] == currentitem) {
                                    _sourcesList.splice(i, 1);
                                    break;
                                }
                            }
                        };
                        this.isActive = function() {
                            log('isActive', this)
                            var sources = _scene.sceneInstance.sources;
                            log('isActive: sources', sources)

                            for(let s in sources) {

                                if(sources[s] == sourceInstance._sourceInstance) {
                                    log('isActive active')

                                    return true;
                                }
                            }
                            log('isActive inactive')

                            return false;
                        };
                        this.show = function() {
                            tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.showSource(this.sourceInstance);

                            //this.sourceInstance.active = true;
                            this.switchVisibilityIcon(true);
                            syncList();
                        };
                        this.hide = function() {
                            tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.hideSource(this.sourceInstance);
                            //this.sourceInstance.active = false;
                            this.switchVisibilityIcon(false);
                            syncList();
                        };
                        this.switchVisibilityIcon = function (visibility) {
                            if(visibility === true) {
                                this.visibilityEl.innerHTML = _streamingIcons.visible;
                            } else if (visibility === false) {
                                this.visibilityEl.innerHTML = _streamingIcons.hidden;
                            }
                        };
                        this.toggle = function() {
                            if(sourceInstance.sourceInstance.active == true) {
                                sourceInstance.hide();
                            } else {
                                sourceInstance.show();
                            }
                        };

                        this.unmute = function() {
                            log('mute')

                            sourceInstance.sourceInstance.audioSource.active = true;
                            if(this._sourceInstance.sourceType == 'webrtc' && this._sourceInstance.participant.isLocal) {
                                tool.webrtcSignalingLib.localMediaControls.enableAudio();
                            } else {
                                tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.unmuteSource(this._sourceInstance, false);
                                this.switchAudioActivenessIcon(true);
                                syncList();
                            }
                            
                        };
                        this.mute = function() {
                            log('mute')
                            sourceInstance.sourceInstance.audioSource.active = true;
                            if(this._sourceInstance.sourceType == 'webrtc' && this._sourceInstance.participant.isLocal) {
                                tool.webrtcSignalingLib.localMediaControls.disableAudio();
                            } else {
                                tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.muteSource(this._sourceInstance, false);
                                this.switchAudioActivenessIcon(false);
                            }
                            
                            syncList();
                        };
                        this.switchAudioActivenessIcon = function (activeness) {
                            if(activeness === true) {
                                this.audioActivnessEl.innerHTML = _streamingIcons.liveOn;
                            } else if (activeness === false) {
                                this.audioActivnessEl.innerHTML = _streamingIcons.liveOff;
                            }
                        };
                        this.toggleAudio = function() {
                            if(sourceInstance.sourceInstance.audioSource.active == true) {
                                sourceInstance.mute();
                            } else {
                                sourceInstance.unmute();
                            }
                        };
                        this.params = {
                            _loop: getOptions().liveStreaming.loopVideo,
                            _localOutput:getOptions().liveStreaming.localOutput,

                            set loop(value) {this._loop = value;},
                            set localOutput(value) {this._localOutput = value;},
                            get localOutput() {return typeof this._localOutput == 'object' ? this._localOutput.checked : this._localOutput;},
                            get loop() {return typeof this._loop == 'object' ? this._loop.checked : this._loop;}
                        };
                        this.hoverTimeout = {};

                        var itemEl = document.createElement('DIV');
                        itemEl.className = 'live-editor-popup-sources-item';
                        var itemElText = document.createElement('DIV');
                        itemElText.innerHTML = this._title ? this._title : '';
                        itemElText.className = 'live-editor-popup-sources-item-text';
                        var itemElControl = document.createElement('DIV');
                        itemElControl.className = 'live-editor-popup-sources-item-control';

                        if (source.audioSource != null && !this._sourceInstance.participant.isLocal) {
                            var itemElControlAudioActivness = document.createElement('DIV');
                            itemElControlAudioActivness.className = 'live-editor-popup-sources-item-control-item';
                            itemElControlAudioActivness.innerHTML = _streamingIcons.liveOn;
                            itemElControl.appendChild(itemElControlAudioActivness);
                            itemElControlAudioActivness.addEventListener('click', this.toggleAudio)
                        }
                        if (source.sourceType == 'webrtc' && source.participant.isLocal && !source.screenSharing) {
                            var itemElControlLocalControls = document.createElement('DIV');
                            itemElControlLocalControls.className = 'live-editor-popup-sources-item-local-controls';
                            itemElControl.appendChild(itemElControlLocalControls);

                            if(!_webrtcUserInterface.getOptions().audioOnlyMode) {
                                var cameraBtnCon = document.createElement('DIV');
                                cameraBtnCon.className = 'live-editor-popup-sources-item-control-item live-editor-popup-sources-item-lc-camera';
                                var cameraBtn = document.createElement('DIV');
                                cameraBtn.className = 'live-editor-popup-sources-item-lc-btn';
                                var cameraBtnIcon = document.createElement('DIV');
                                cameraBtnIcon.className = 'live-editor-popup-sources-item-lc-icon';
                                cameraBtnIcon.innerHTML = _controlsToolIcons.camera;
                                cameraBtnCon.appendChild(cameraBtn);
                                cameraBtnCon.appendChild(cameraBtnIcon);
                                itemElControlLocalControls.appendChild(cameraBtnCon);

                                //if (!Q.info.useTouchEvents) {
                                    sourceInstance.videoSettingsPopup = new PopupDialog(cameraBtn, {
                                        className: 'live-editor-participants-item-camera-btn-popup',
                                        content: _videoTool.videoinputListEl
                                    })
                                //}

                                sourceInstance.cameraBtnIcon = cameraBtnIcon;
                            }
                            
                            var microphoneBtnCon = document.createElement('DIV');
                            microphoneBtnCon.className = 'live-editor-popup-sources-item-control-item live-editor-popup-sources-item-lc-mic';
                            var microphoneBtn = document.createElement('DIV');
                            microphoneBtn.className = 'live-editor-popup-sources-item-lc-btn';
                            var microphoneBtnIcon = document.createElement('DIV');
                            microphoneBtnIcon.className = 'live-editor-popup-sources-item-lc-icon';
                            microphoneBtnIcon.innerHTML = _controlsToolIcons.microphone;
                            //microphoneBtnIcon.innerHTML = _streamingIcons.sourcesEnabledMic;
                            microphoneBtnCon.appendChild(microphoneBtn);
                            microphoneBtnCon.appendChild(microphoneBtnIcon);
                            itemElControlLocalControls.appendChild(microphoneBtnCon);
                            //if (!Q.info.useTouchEvents) {
                                sourceInstance.audioSettingsPopup = new PopupDialog(microphoneBtn, {
                                    content: [_audioTool.audioOutputListEl, _audioTool.audioinputListEl]
                                })
                            //}
                            sourceInstance.microphoneBtnIcon = microphoneBtnIcon;
                                            
                        }
                    
                        var itemElControlVisibility = document.createElement('DIV');
                        itemElControlVisibility.className = 'live-editor-popup-sources-item-control-item live-editor-popup-sources-item-visibility';
                        itemElControlVisibility.innerHTML = _streamingIcons.visible;
                        itemElControl.appendChild(itemElControlVisibility);

                        itemEl.appendChild(itemElText);
                        itemEl.appendChild(itemElControl);
                        this.visibilityEl = itemElControlVisibility;
                        this.audioActivnessEl = itemElControlAudioActivness;
                        this.itemEl = itemEl;
                        this.titleEl = itemElText;
                        this.itemEl.addEventListener('click', function () {
                            log('sourceInstance.sourceInstance', sourceInstance.sourceInstance.sourceType);
                            selectSource(sourceInstance);

                            //optionsColumn.update();
                        })

                        this.itemEl.addEventListener('contextmenu', function (e) {
                            /*e.preventDefault();
                            selectSource(sourceInstance);
                            optionsColumn.update();
                            contextMenu('visualSource').show(e);*/
                        })
                        
                        itemElControlVisibility.addEventListener('click', this.toggle)
                    }

                    VisualListItem.prototype = new ListItem();

                    Object.defineProperties(VisualListItem.prototype, {
                        'sourceInstance': {
                            'get': function() { 
                                return this._sourceInstance;
                            }
                        }
                    });
                    Object.defineProperties(VisualListItem.prototype, {
                        'title': {
                            'set': function(val) { if(this.titleEl) this.titleEl.innerHTML = val; }
                        }
                    });

                    var AudioListItem = function (source) {
                        var sourceInstance = this;
                        this.listType = 'audio';
                        this._sourceInstance = source;
                        this._title = source.title ? source.title : (source.name != null ? source.name : source.sourceType);
                        this.remove = function () {
                            var currentitem = this;
                            if(this.itemEl != null && this.itemEl.parentNode != null) this.itemEl.parentNode.removeChild(this.itemEl);
                            for(var i in _sourcesList) {
                                if(_sourcesList[i] == currentitem) {
                                    _sourcesList.splice(i, 1);
                                    break;
                                }
                            }
                        };
                        this.isActive = function() {
                            log('isActive', this)
                            var currentitem = this;
                            var sources = _scene.sceneInstance.sources;
                            log('isActive active', sources)

                            for(let s in sources) {
                                log('isActive for', sources[s], currentitem._sourceInstance)

                                if(sources[s] == currentitem._sourceInstance) {
                                    log('isActive active')

                                    return true;
                                }
                            }
                            log('isActive inactive')

                            return false;
                        };
                        this.unmute = function() {
                            log('mute')

                            this._sourceInstance.active = true;
                            if(this._sourceInstance.sourceType == 'webrtcaudio' && this._sourceInstance.participant.isLocal) {
                                log('mute turn mic on')
                                tool.webrtcSignalingLib.localMediaControls.enableAudio();
                            } else {
                                tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.unmuteSource(this._sourceInstance, this._sourceInstance.sourceType == 'audio' ? true : false);
                                this.switchAudioActivenessIcon(true);
                                syncList();
                            }
                            
                        };
                        this.mute = function() {
                            log('mute')
                            this._sourceInstance.active = false;
                            if(this._sourceInstance.sourceType == 'webrtcaudio' && this._sourceInstance.participant.isLocal) {
                                log('mute turn mic off')
                                tool.webrtcSignalingLib.localMediaControls.disableAudio();
                            } else {
                                tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.muteSource(this._sourceInstance, this._sourceInstance.sourceType == 'audio' ? true : false);
                                this.switchAudioActivenessIcon(false);
                            }
                            
                            syncList();
                        };
                        this.switchAudioActivenessIcon = function (activeness) {
                            if(activeness === true) {
                                this.audioActivnessEl.innerHTML = _streamingIcons.enabledSpeaker;
                            } else if (activeness === false) {
                                this.audioActivnessEl.innerHTML = _streamingIcons.disabledSpeaker;
                            }
                        };
                        this.toggleAudio = function() {
                            if(sourceInstance._sourceInstance.active == true) {
                                sourceInstance.mute();
                            } else {
                                sourceInstance.unmute();
                            }
                        };
                        this.params = {
                            _loop: getOptions().liveStreaming.loopAudio,
                            _localOutput: getOptions().liveStreaming.localOutput,

                            set loop(value) {this._loop = value;},
                            set localOutput(value) {this._localOutput = value;},
                            get localOutput() {return typeof this._localOutput == 'object' ? this._localOutput.checked : this._localOutput;},
                            get loop() {return typeof this._loop == 'object' ? this._loop.checked : this._loop;}
                        };
                    
                        var itemEl = document.createElement('DIV');
                        itemEl.className = 'live-editor-popup-sources-item';
                        var itemElText = document.createElement('DIV');
                        itemElText.innerHTML = this._title ? this._title : '';
                        itemElText.className = 'live-editor-popup-sources-item-text';
                        var itemElControl = document.createElement('DIV');
                        itemElControl.className = 'live-editor-popup-sources-item-control';
                        var itemElAudioActiveness = document.createElement('DIV');
                        itemElAudioActiveness.className = 'live-editor-popup-sources-item-visibility';
                        itemElAudioActiveness.innerHTML = _streamingIcons.liveOn;
                        itemElControl.appendChild(itemElAudioActiveness);
                        
                        itemEl.appendChild(itemElText);
                        itemEl.appendChild(itemElControl);
                        this.audioActivnessEl = itemElAudioActiveness;
                        this.itemEl = itemEl;
                        this.titleEl = itemElText;
                        this.itemEl.addEventListener('click', function () {
                            log('sourceInstance.sourceInstance', sourceInstance.sourceInstance.sourceType);
                            selectSource(sourceInstance);

                            //optionsColumn.update();
                        })
                        itemElAudioActiveness.addEventListener('click', this.toggleAudio)

                        this._sourceInstance.on('nameChanged', function (newName) {
                            log('nameChanged set', this._sourceInstance)

                            sourceInstance.title = newName;
                        })
                    }

                    AudioListItem.prototype = new ListItem();

                    Object.defineProperties(AudioListItem.prototype, {
                        'sourceInstance': {
                            'get': function() { 
                                return this._sourceInstance;
                            }
                        }
                    });
                    Object.defineProperties(AudioListItem.prototype, {
                        'title': {
                            'set': function(val) { if(this.titleEl) this.titleEl.innerHTML = val; }
                        }
                    });

                    function ParticipantsList(){
                        var _participantsList = [];
                        var _participantsContainerEl = null;
                        var _participantsListEl = null;
                        var _allParticipantsItemEl = null;
                        var _allParticipantsListInstance = {
                            listItemEl: null,
                            listType: 'allParticipants',
                            get sourceInstance() {
                                var webrtcSources = _scene.sceneInstance.webrtcSources;
                                for(let i in webrtcSources) {
                                    if(webrtcSources[i].sourceType == 'group' && webrtcSources[i].groupType == 'webrtc') {
                                        return webrtcSources[i];
                                    }
                                }
                                return null;
                              },
                            
                        };
                        var sourceResizingEl = _allParticipantsListInstance.resizingElement = document.createElement('DIV');
                        sourceResizingEl.className = 'live-editor-canvas-preview-resizing';
                        activeDialog.previewBoxEl.appendChild(sourceResizingEl);

                        Q.activate(
                            Q.Tool.setUpElement(
                                sourceResizingEl,
                                "Q/resize",
                                {
                                    move: true,
                                    resize: true,
                                    active: true,
                                    //elementPosition: 'fixed',
                                    showResizeHandles: true,
                                    moveWithinArea: 'parent',
                                    allowOverresizing: true,
                                    negativeMoving: true,
                                    onMoving: function () {

                                    }
                                }
                            ),
                            {},
                            function () {
                                _allParticipantsListInstance.resizingElementTool = this;
                            }
                        );

                        _participantsContainerEl = document.createElement('DIV');
                        _participantsContainerEl.className = 'live-editor-participants-list-con';
                        if (tool.roomStream.testAdminLevel('manage')) {
                        
                            let waitingRooms = document.createElement('DIV');
                            waitingRooms.className = 'live-editor-participants-waiting';
                            _participantsContainerEl.appendChild(waitingRooms);

                            Q.activate(
                                Q.Tool.setUpElement(waitingRooms, 'Streams/webrtc/waitingRoomList', {
                                    webrtcUserInterface: tool.state.webrtcUserInterface,
                                }),
                                {},
                                function () {

                                }
                            );
                        }

                        let participantTitleCon = _allParticipantsItemEl = document.createElement('DIV');
                        participantTitleCon.className = 'live-editor-participants-list-title-con';
                        _participantsContainerEl.appendChild(participantTitleCon);

                        _allParticipantsListInstance.listItemEl = participantTitleCon;

                        participantTitleCon.addEventListener('click', function(){
                            selectSource(_allParticipantsListInstance);
                        });

                        let participantTitle = document.createElement('DIV');
                        participantTitle.className = 'live-editor-participants-list-title';
                        participantTitle.innerHTML = 'Participants:';
                        participantTitleCon.appendChild(participantTitle);

                        let teleconferenceToggleCon = document.createElement('DIV');
                        teleconferenceToggleCon.className = 'live-editor-participants-list-toggle';
                        //participantTitleCon.appendChild(teleconferenceToggleCon);

                        let teleconferenceToggleLabel = document.createElement('LABEL');
                        teleconferenceToggleLabel.className = 'live-editor-checkbox-slider live-editor-participants-list-label';
                        teleconferenceToggleCon.appendChild(teleconferenceToggleLabel);

                        let teleconferenceToggleInput = document.createElement('INPUT');
                        teleconferenceToggleInput.className = 'live-editor-participants-list-toggle-input';
                        teleconferenceToggleInput.type = 'checkbox';
                        teleconferenceToggleInput.checked = _allParticipantsListInstance.sourceInstance ? true : false;
                        teleconferenceToggleLabel.appendChild(teleconferenceToggleInput);

                        let teleconferenceToggleBtn = document.createElement('SPAN');
                        teleconferenceToggleBtn.className = 'live-editor-toggle-slider live-editor-participants-list-toggle-btn';
                        teleconferenceToggleLabel.appendChild(teleconferenceToggleBtn);

                        _participantsListEl = document.createElement('DIV');
                        _participantsListEl.className = 'live-editor-participants-list';
                        _participantsContainerEl.appendChild(_participantsListEl);

                        //lockOrUnlockParticipantsGroup();

                        teleconferenceToggleInput.addEventListener('change', function (event) {
                            event.stopPropagation();
                            let sourceInstance = _allParticipantsListInstance.sourceInstance;
                            if (event.currentTarget.checked) {
                                log('toggle change 1');
                                if(sourceInstance != null) {
                                    log('toggle change 1.1');
                                    //tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.showSource(sourceInstance);
                                } else {
                                    log('toggle change 1.2');
                                    addTeleconferenceSource();
                                }
                             
                            } else {
                                log('toggle change 2');
                                if(sourceInstance != null) {
                                    log('toggle change 2.1');
                                    removeSource(_allParticipantsListInstance);
                                    //tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.hideSource(sourceInstance);
                                } else {
                                    log('toggle change 2.2');
                                    //addTeleconferenceSource();
                                    //tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.hideSource(sourceInstance);
                                }
                            }
                           
                          })

                        declareOrRefreshEventHandlers();
                        refreshList();
                        updateLocalControlsButtonsState();

                        function lockOrUnlockParticipantsGroup() {
                            if(!_allParticipantsListInstance.sourceInstance || !_allParticipantsListInstance.sourceInstance.active) {
                                /*if(!_participantsListEl.classList.contains('live-editor-inactive')) {
                                    _participantsListEl.classList.add('live-editor-inactive');
                                }*/
                                if(!_layoutsListDropDownCon.classList.contains('live-editor-inactive')) {
                                    _layoutsListDropDownCon.classList.add('live-editor-inactive');
                                }
                            } else {
                                /*if(_participantsListEl.classList.contains('live-editor-inactive')) {
                                    _participantsListEl.classList.remove('live-editor-inactive');
                                }*/
                                if(_layoutsListDropDownCon.classList.contains('live-editor-inactive')) {
                                    _layoutsListDropDownCon.classList.remove('live-editor-inactive');
                                }
                            }

                            updateRemoteParticipantControlsButtonsState();
                        }

                        function declareOrRefreshEventHandlers() {
                            var webrtcSignalingLib = tool.webrtcSignalingLib;

                            webrtcSignalingLib.event.on('beforeSwitchRoom', function (e) {
                                tool.updateWebrtcSignalingLibInstance(e.newWebrtcSignalingLibInstance);
                                declareOrRefreshEventHandlers();
                            });

                            webrtcSignalingLib.event.on('participantConnected', function (participant) {
                                log('ParticipantsList: participantConnected');
                                addParticipantItem(participant);
                            });
                            webrtcSignalingLib.event.on('participantDisconnected', function (participant) {
                                log('ParticipantsList: participantDisconnected');
                                removeParticipantItem(participant);
                            });
                            webrtcSignalingLib.event.on('participantRemoved', function (participant) {
                                log('ParticipantsList: participantRemoved');
                                removeParticipantItem(participant);
                            });
                            webrtcSignalingLib.event.on('trackAdded', function (e) {
                                log('ParticipantsList: trackAdded');
                                updateParticipantItem(e.participant);
                            });
                            webrtcSignalingLib.event.on('trackMuted', function (e) {
                                log('ParticipantsList: trackMuted');
                                updateParticipantItem(e.participant);
                            });
                            webrtcSignalingLib.event.on('audioMuted', function (participant) {
                                log('ParticipantsList: audioMuted');
                                updateParticipantItem(participant);
                            });
                            webrtcSignalingLib.event.on('audioUnmuted', function (participant) {
                                log('ParticipantsList: audioUnmuted');
                                updateParticipantItem(participant);
                            });
                            webrtcSignalingLib.event.on('cameraEnabled', function () {;
                                log('ParticipantsList: cameraEnabled');
                                updateParticipantItem(webrtcSignalingLib.localParticipant());
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('cameraDisabled', function () {
                                log('ParticipantsList: cameraDisabled');
                                updateParticipantItem(webrtcSignalingLib.localParticipant());
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('micEnabled', function () {;
                                log('ParticipantsList: micEnabled');
                                updateParticipantItem(webrtcSignalingLib.localParticipant());
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('micDisabled', function () {
                                log('ParticipantsList: micDisabled');
                                updateParticipantItem(webrtcSignalingLib.localParticipant());
                                updateLocalControlsButtonsState();
                            });

                            _scene.sceneInstance.eventDispatcher.on('sourceAdded', function (source) {
                                log('aaaaaaaaaa', source)
                                if(source.sourceType == 'webrtc') {
                                    updateParticipantItem(source.participant);
                                } else if(source.sourceType == 'group' && source.groupType == 'webrtc') {
                                    //lockOrUnlockParticipantsGroup();
                                }

                                updateSourceControlPanelButtons();
                            })

                            _scene.sceneInstance.eventDispatcher.on('sourceRemoved', function (source) {
                                if(source.sourceType == 'webrtc') {
                                    updateParticipantItem(source.participant);
                                } else if(source.sourceType == 'group' && source.groupType == 'webrtc') {
                                    //lockOrUnlockParticipantsGroup();
                                }

                                updateSourceControlPanelButtons();
                                
                            })

                            _scene.sceneInstance.eventDispatcher.on('sourceShowed', function (source) {
                                if(source.sourceType == 'group' && source.groupType == 'webrtc') {
                                    //lockOrUnlockParticipantsGroup();
                                }
                            })
    
                        }

                        function refreshList() {
                            log('ParticipantsList: refreshList');
                            if (_participantsListEl) _participantsListEl.innerHTML = '';
                            _participantsList = [];
            
                            let roomParticipants = tool.webrtcSignalingLib.roomParticipants()
                            addParticipantItem(tool.webrtcSignalingLib.localParticipant());
                            for (var i in roomParticipants) {
                                if (roomParticipants[i].isLocal) continue;
                                addParticipantItem(roomParticipants[i]);
                            }
                        }

                        function addParticipantItem(participantInstance) {
                            log('ParticipantsList: addParticipantItem');
                            function ListItem(participantInstance) {
                                let listItemInstance = this;
                                this.participantInstance = participantInstance;
                                this.participantSources = [];
                                this.listType = 'mainParticipantVideo';
                                this.listItemEl = null;
                                this.visibilityIconEl = null;
                                this.videoIconEl = null;
                                this.audioIconEl = null;
                                this.screenIconEl = null;
                                this.sourcesContainerEl = null;
                                this.show = function () {
                                    for(let s in listItemInstance.participantSources) {
                                        if(listItemInstance.participantSources[s].sourceInstance.screenSharing) continue;
                                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.showSource(listItemInstance.participantSources[s].sourceInstance);
                                        listItemInstance.switchVisibilityIcon(true);
                                        break;
                                    }
                                };
                                this.hide = function () {
                                    for(let s in listItemInstance.participantSources) {
                                        if(listItemInstance.participantSources[s].sourceInstance.screenSharing) continue;
                                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.hideSource(listItemInstance.participantSources[s].sourceInstance);
                                        listItemInstance.switchVisibilityIcon(false);
                                        break;
                                    }
                                };
                                this.switchVisibilityIcon = function (visibility) {
                                    if (visibility === true) {
                                        this.visibilityIconEl.innerHTML = _streamingIcons.visible;
                                    } else if (visibility === false) {
                                        this.visibilityIconEl.innerHTML = _streamingIcons.hidden;
                                    }
                                };
                                this.toggleVisibility = function () {
                                    for (let s in listItemInstance.participantSources) {
                                        if (listItemInstance.participantSources[s].sourceInstance.screenSharing) continue;
                                        let sourceInstance = listItemInstance.participantSources[s].sourceInstance;

                                        if (sourceInstance.active == true) {
                                            listItemInstance.hide();
                                        } else {
                                            listItemInstance.show();
                                        }
                                        break;
                                    }
                                };
                                this.toggleScreensharing = function() {
                                    let screensharingSources = listItemInstance.participantSources.filter(function(s){
                                        return s.sourceInstance.screenSharing ? true : false;
                                    });

                                    if(screensharingSources.length > 1) {
                                        listItemInstance.screenIconEl.innerHTML = _streamingIcons.participantsEnabledScreenSource;
                                        return;
                                    } else if(screensharingSources.length == 1){
                                        screensharingSources[0].toggleVisibility();

                                        log('toggleScreensharing', screensharingSources[0].sourceInstance.active)
                                        if(screensharingSources[0].sourceInstance.active) {
                                            listItemInstance.screenIconEl.innerHTML = _streamingIcons.participantsEnabledScreenSource;
                                        } else {
                                            listItemInstance.screenIconEl.innerHTML = _streamingIcons.participantsDisabledScreenSource;
                                        }
                                    }
                                };
                                this.toggleAudio = function () {         
                                    if (!listItemInstance.participantInstance.audioIsMuted) {
                                        listItemInstance.muteAudio();
                                    } else {
                                        listItemInstance.unmuteAudio();
                                    }
                                };
                                this.muteAudio = function () {
                                    if (this.participantInstance.audioIsMuted == true) return;
                                    this.participantInstance.muteAudio();
                                    this.audioIconEl.innerHTML = _streamingIcons.participantsDisabledMic;
                                };
                                this.unmuteAudio = function () {
                                    if (this.participantInstance.audioIsMuted == false) return;
                                    this.participantInstance.unmuteAudio();
                                    this.audioIconEl.innerHTML = _streamingIcons.participantsEnabledMic;
                                };
                                this.remove = function () {
                                    log('ParticipantsList: ListItem: remove');

                                    if (this.listItemEl.parentNode != null) this.listItemEl.parentNode.removeChild(this.listItemEl);
                                    for(let e = _participantsList.length - 1; e >= 0; e--) {
                                        if(_participantsList[e].participantInstance == this) {
                                            _participantsList.splice(e, 1);
                                            break;
                                        }
                                    }
            
                                };
                                Object.defineProperty(this, "sourceInstance", {
                                    get() {
                                      for(let i in this.participantSources) {
                                        if(!this.participantSources[i].sourceInstance.screenSharing) {
                                            return this.participantSources[i].sourceInstance;
                                        }
                                      }
                                    }
                                  });
                            }
                            var userId = participantInstance.identity != null ? participantInstance.identity.split('\t')[0] : Q.Users.loggedInUser.id;
                            
                            let listItemInstance = new ListItem(participantInstance);

                            let participantItemContainer = document.createElement('DIV');
                            participantItemContainer.className = 'live-editor-participants-item-con';
                            let participantItemInnerCon = document.createElement('DIV');
                            participantItemInnerCon.className = 'live-editor-participants-item-inner';
                            participantItemContainer.appendChild(participantItemInnerCon);
                            let participantItemAvatar = document.createElement('DIV');
                            participantItemAvatar.className = 'live-editor-participants-item-avatar';
                            participantItemInnerCon.appendChild(participantItemAvatar);

                            let participantItemAvatarTool = document.createElement('DIV');
                            participantItemAvatarTool.className = 'live-editor-participants-item-avatar-tool';
                            participantItemAvatar.appendChild(participantItemAvatarTool);

                            Q.activate(
                                Q.Tool.setUpElement(
                                    participantItemAvatarTool, // or pass an existing element
                                    "Users/avatar",
                                    {
                                        userId: userId,
                                        contents: false
                                    }
                                )
                            );


                            let participantItemAvatarText = document.createElement('DIV');
                            participantItemAvatarText.className = 'live-editor-participants-item-avatar-texttool';
                            
                            participantItemAvatar.appendChild(participantItemAvatarText);
                            Q.activate(
                                Q.Tool.setUpElement(
                                    participantItemAvatarText, // or pass an existing element
                                    "Users/avatar",
                                    {
                                        userId: userId,
                                        icon: false
                                    }
                                )
                            );

                            let participantItemControls = document.createElement('DIV');
                            participantItemControls.className = 'live-editor-participants-item-controls';
                            participantItemInnerCon.appendChild(participantItemControls);


                            let audioBtnCon = document.createElement('DIV');
                            audioBtnCon.className = 'live-editor-participants-item-btn live-editor-participants-item-audio-btn';
                            participantItemControls.appendChild(audioBtnCon);
                            let audioBtnIcon = document.createElement('DIV');
                            audioBtnIcon.className = 'live-editor-participants-item-icon live-editor-participants-item-audio-icon';
                            audioBtnIcon.innerHTML = _streamingIcons.participantsDisabledMic;
                            audioBtnCon.appendChild(audioBtnIcon);

                            if (participantInstance.isLocal /*&& !Q.info.useTouchEvents*/) {
                                /*listItemInstance.audioSettingsPopup = new PopupDialog(audioBtnCon, {
                                    content: [_audioTool.audioOutputListEl, _audioTool.audioinputListEl]
                                })*/

                                Q.activate(
                                    Q.Tool.setUpElement(
                                        audioBtnCon,
                                        "Streams/webrtc/popupDialog",
                                        {
                                            content: [_audioTool.audioOutputListEl, _audioTool.audioinputListEl]
                                        }
                                    ),
                                    {},
                                    function () {
                                        listItemInstance.audioSettingsPopup = this;
                                    }
                                );
                            } else if (!participantInstance.isLocal) {
                                audioBtnCon.addEventListener('click', listItemInstance.toggleAudio);
                            }
                            
                            if(participantInstance.isLocal) {
                                let videoBtnCon = document.createElement('DIV');
                                videoBtnCon.className = 'live-editor-participants-item-btn live-editor-participants-item-camera-btn';
                                participantItemControls.appendChild(videoBtnCon);
                                let videoBtnIcon = document.createElement('DIV');
                                videoBtnIcon.className = 'live-editor-participants-item-icon live-editor-participants-item-camera-icon';
                                videoBtnIcon.innerHTML = _streamingIcons.participantsDisabledCamera;
                                videoBtnCon.appendChild(videoBtnIcon);
                                listItemInstance.videoIconEl = videoBtnIcon;

                                //if (!Q.info.useTouchEvents) {
                                    /*listItemInstance.videoSettingsPopup = new PopupDialog(videoBtnCon, {
                                        className: 'live-editor-participants-item-camera-btn-popup',
                                        content: _videoTool.videoinputListEl
                                    })*/

                                    Q.activate(
                                        Q.Tool.setUpElement(
                                            videoBtnCon,
                                            "Streams/webrtc/popupDialog",
                                            {
                                                content: _videoTool.videoinputListEl,
                                                className: 'live-editor-participants-item-camera-btn-popup'
                                            }
                                        ),
                                        {},
                                        function () {
                                            listItemInstance.videoSettingsPopup = this;
                                        }
                                    );
                                //}
                            }
                            
                            let screenBtnCon = document.createElement('DIV');
                            screenBtnCon.className = 'live-editor-participants-item-btn live-editor-participants-item-screen-btn';
                            if(!(participantInstance.isLocal && Q.info.isMobile)) participantItemControls.appendChild(screenBtnCon);
                            let screenBtnIcon = document.createElement('DIV');
                            screenBtnIcon.className = 'live-editor-participants-item-icon live-editor-participants-item-screen-icon';
                            screenBtnIcon.innerHTML = _streamingIcons.participantsEnabledScreenSource;
                            screenBtnCon.appendChild(screenBtnIcon);
                            let participantSourcesCon = document.createElement('DIV');
                            participantSourcesCon.className = 'live-editor-participants-item-sources';
                            screenBtnIcon.addEventListener('click', listItemInstance.toggleScreensharing);

                            let visibilityBtnCon = document.createElement('DIV');
                            visibilityBtnCon.className = 'live-editor-participants-item-btn live-editor-participants-item-visibility-btn';
                            participantItemControls.appendChild(visibilityBtnCon);
                            let visibilityBtnIcon = document.createElement('DIV');
                            visibilityBtnIcon.className = 'live-editor-participants-item-icon live-editor-participants-item-visibility-icon';
                            visibilityBtnIcon.innerHTML = _streamingIcons.visible;
                            visibilityBtnCon.appendChild(visibilityBtnIcon);

                            _participantsListEl.appendChild(participantItemContainer);
                
                            listItemInstance.listItemEl = participantItemContainer;
                            listItemInstance.visibilityIconEl = visibilityBtnIcon;
                            listItemInstance.audioIconEl = audioBtnIcon;
                            listItemInstance.sourcesContainerEl = participantSourcesCon;
                            listItemInstance.screenIconEl = screenBtnIcon;
                            if(participantInstance.isLocal) {
                                _participantsList.unshift(listItemInstance);
                            } else {
                                _participantsList.push(listItemInstance);
                            }

                            visibilityBtnCon.addEventListener('click', function(){
                                let sourceInstance = _allParticipantsListInstance.sourceInstance;
                                if(sourceInstance != null) {
                                    log('visibilityBtnCon change 1.1');
                                    listItemInstance.toggleVisibility();                                
                                } else {
                                    log('visibilityBtnCon change 1.2');
                                    addTeleconferenceSource();
                                    listItemInstance.toggleVisibility();
                                }
                            });

                            participantItemContainer.addEventListener('click', function(){
                                selectSource(listItemInstance);
                            });

                            if (participantInstance.isLocal) {
                                /*listItemInstance.screensharingsPopup = new PopupDialog(listItemInstance.screenIconEl.parentElement, {
                                    className: 'live-editor-participants-item-screen-btn-popup',
                                    content: [listItemInstance.sourcesContainerEl, _videoTool.videoinputListEl]
                                })*/

                                Q.activate(
                                    Q.Tool.setUpElement(
                                        listItemInstance.screenIconEl.parentElement,
                                        "Streams/webrtc/popupDialog",
                                        {
                                            content: [listItemInstance.sourcesContainerEl, _videoTool.videoinputListEl],
                                            className: 'live-editor-participants-item-screen-btn-popup'
                                        }
                                    ),
                                    {},
                                    function () {
                                        listItemInstance.screensharingsPopup = this;
                                    }
                                );
                            }

                            var sourceResizingEl = listItemInstance.resizingElement = document.createElement('DIV');
                            sourceResizingEl.className = 'live-editor-canvas-preview-resizing';
                            activeDialog.previewBoxEl.appendChild(sourceResizingEl);
                            
                            Q.activate(
                                Q.Tool.setUpElement(
                                    sourceResizingEl,
                                    "Q/resize",
                                    {
                                        move: false,
                                        resize: false,
                                        active: true,
                                        showResizeHandles: false,
                                    }
                                ),
                                {},
                                function () {
                                    listItemInstance.resizingElementTool = this;
                                }
                            );

                            updateParticipantItem(participantInstance);
                        }

                        function removeParticipantItem(participant) {
                            log('ParticipantsList: removeParticipantItem', participant);
                            log('ParticipantsList: removeParticipantItem: _participantsList', _participantsList);
                            var item = _participantsList.filter(function (listItem) {
                                log('listItem', listItem.participantInstance)
                                return listItem.participantInstance.sid == participant.sid;
                            })[0];
                            log('ParticipantsList: removeParticipantItem: item', item);

                            if (item != null) item.remove();
                        }


                        function updateParticipantItem(participantOrListItem) {
                            function AdditionalListItem(sourceInstance) {
                                var _listItemContext = this;
                                this.sourceInstance = sourceInstance;
                                this.sourceEl = null;
                                this.visibilityIconEl = null;
                                this.listType = 'additionalParticipantVideo';
                                this.show = function () {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.showSource(_listItemContext.sourceInstance);
                                    _listItemContext.switchVisibilityIcon(true);
                                };
                                this.hide = function () {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.hideSource(_listItemContext.sourceInstance);
                                    _listItemContext.switchVisibilityIcon(false);
                                };
                                this.switchVisibilityIcon = function (visibility) {
                                    if (visibility === true) {
                                        this.visibilityIconEl.innerHTML = _streamingIcons.visible;
                                    } else if (visibility === false) {
                                        this.visibilityIconEl.innerHTML = _streamingIcons.hidden;
                                    }
                                };
                                this.toggleVisibility = function () {
                                    if (_listItemContext.sourceInstance.active == true) {
                                        _listItemContext.hide();
                                    } else {
                                        _listItemContext.show();
                                    }
                                };
                            }
                            log('ParticipantsList: updateParticipantItem');
                            var item;
                            if(participantOrListItem.constructor.name == 'ListItem') {
                                item = participantOrListItem;
                            } else {
                                item = _participantsList.filter(function (listItem) {
                                    return listItem.participantInstance.sid == participantOrListItem.sid;
                                })[0];
                            }

                            if(!item) return;
                            
                            var participant = item.participantInstance;
                            var webrtcSources = _scene.sceneInstance.webrtcSources;

                            //remove inactive source
                            for(let i = item.participantSources.length - 1; i >= 0; i--) {
                                let sourceIsRemoved = true;
                                for (let c in webrtcSources) {
                                    if(item.participantSources[i].sourceInstance == webrtcSources[c]) {
                                        sourceIsRemoved = false;
                                        break;
                                    }
                                }
                                if(sourceIsRemoved) {
                                    if(item.participantSources[i].sourceEl != null && item.participantSources[i].sourceEl.parentElement != null) {
                                        item.participantSources[i].sourceEl.parentElement.removeChild(item.participantSources[i].sourceEl);
                                    }
                                    item.participantSources.splice(i, 1);
                                }
                            }

                            let numberOfScreensharings = 0;
                            //add new source to sources list under participant
                            for (let i in webrtcSources) {
                                if(webrtcSources[i].participant == participant && webrtcSources[i].screenSharing) {
                                    var sourceExists = item.participantSources.filter(function (source) {
                                        return source.sourceInstance == webrtcSources[i];
                                    })[0];

                                    numberOfScreensharings++;
                                    
                                    if(sourceExists) continue;

                                    let screensharingSourceCon = document.createElement('DIV');
                                    screensharingSourceCon.className = 'live-editor-participants-list-source';
                                    screensharingSourceCon.dataset.sourceId = webrtcSources[i].id;

                                    let sourceDescription = document.createElement('DIV');
                                    sourceDescription.className = 'live-editor-participants-list-source-desc';
                                    screensharingSourceCon.appendChild(sourceDescription);

                                    let sourceDescriptionIcon = document.createElement('DIV');
                                    sourceDescriptionIcon.className = 'live-editor-participants-list-source-icon';
                                    sourceDescriptionIcon.innerHTML = _streamingIcons.participantsEnabledScreenSource;
                                    sourceDescription.appendChild(sourceDescriptionIcon);

                                    let sourceDescriptionText = document.createElement('DIV');
                                    sourceDescriptionText.className = 'live-editor-participants-list-source-text';
                                    sourceDescriptionText.innerHTML = 'Screen';
                                    sourceDescription.appendChild(sourceDescriptionText);

                                    let sourceVisibilityIcon = document.createElement('DIV');
                                    sourceVisibilityIcon.className = 'live-editor-participants-list-source-visibility';
                                    sourceVisibilityIcon.innerHTML = _streamingIcons.visible;
                                    screensharingSourceCon.appendChild(sourceVisibilityIcon);

                                    item.sourcesContainerEl.appendChild(screensharingSourceCon);

                                    let listInstance = new AdditionalListItem(webrtcSources[i]);
                                    listInstance.sourceEl = screensharingSourceCon;
                                    listInstance.visibilityIconEl = sourceVisibilityIcon;
                                    item.participantSources.push(listInstance);

                                    sourceVisibilityIcon.addEventListener('click', listInstance.toggleVisibility);

                                } else if(webrtcSources[i].participant == participant) {
                                    let listInstance = new AdditionalListItem(webrtcSources[i]);
                                    item.participantSources.push(listInstance);
                                }
                            }

                            if(item.sourceInstance != null) {
                                log('ParticipantsList: updateParticipantItem: switchVisibilityIcon 1');
                                if(item.sourceInstance.active) {
                                    log('ParticipantsList: updateParticipantItem: switchVisibilityIcon 1.1');
                                    item.switchVisibilityIcon(true);
                                } else {
                                    log('ParticipantsList: updateParticipantItem: switchVisibilityIcon 1.2');
                                    item.switchVisibilityIcon(false);
                                }
                            } else {
                                log('ParticipantsList: updateParticipantItem: switchVisibilityIcon 2');

                                item.switchVisibilityIcon(false);
                            }

                            if(!item.participantInstance.isLocal) {
                                if (!item.screensharingsPopup) {
                                    log('make screensharingsPopup 2', numberOfScreensharings);
                                    if (numberOfScreensharings > 1) {
                                        log('make screensharingsPopup 3');

                                        /*item.screensharingsPopup = new PopupDialog(item.screenIconEl.parentElement, {
                                            className: 'live-editor-participants-item-screen-btn-popup',
                                            content: item.sourcesContainerEl
                                        })*/
                                        Q.activate(
                                            Q.Tool.setUpElement(
                                                item.screenIconEl.parentElement,
                                                "Streams/webrtc/popupDialog",
                                                {
                                                    className: 'live-editor-participants-item-screen-btn-popup',
                                                    content: item.sourcesContainerEl
                                                }
                                            ),
                                            {},
                                            function () {
                                                item.screensharingsPopup = this;
                                            }
                                        );
                                    }
                                } else if (item.screensharingsPopup) {
                                    if (numberOfScreensharings < 2) {
                                        item.screensharingsPopup.destroy();
                                    }
                                }

                                if(item.sourcesContainerEl.childNodes.length == 0) {
                                    item.screenIconEl.parentElement.style.display = 'none';
                                    /*let noScreensharingTextCon = document.createElement('DIV');
                                    noScreensharingTextCon.className = 'live-editor-participants-list-no-screensharing';
                                    noScreensharingTextCon.innerHTML = 'No screensharings';
                                    item.sourcesContainerEl.appendChild(noScreensharingTextCon);*/
                                } else {
                                    item.screenIconEl.parentElement.style.display = '';
                                    /*let noScreensharingTextCon =  item.sourcesContainerEl.querySelector('.live-editor-participants-list-no-screensharing');
                                    if(noScreensharingTextCon && noScreensharingTextCon.parentElement) noScreensharingTextCon.parentElement.removeChild(noScreensharingTextCon);*/
                                }

                                if(!item.participantInstance.audioIsMuted) {
                                    item.audioIconEl.innerHTML = _streamingIcons.participantsEnabledMic;
                                } else {
                                    item.audioIconEl.innerHTML = _streamingIcons.participantsDisabledMic;
                                }
                            }
                            
                        }

                        function updateLocalControlsButtonsState() {
                            log('updateLocalControlsButtonsState');
    
                            for(let i in _participantsList) {
                                if (!_participantsList[i].participantInstance.isLocal) continue;
                                if(!_participantsList[i].videoIconEl || !_participantsList[i].audioIconEl) continue;

                                let listItemInstance = _participantsList[i];
                                var localParticipant = tool.webrtcSignalingLib.localParticipant();
                                var localMediaControls = tool.webrtcSignalingLib.localMediaControls;
    
                                var enabledVideoTracks = localParticipant.tracks.filter(function (t) {
                                    return t.kind == 'video' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                                }).length;
    
                                if (_webrtcUserInterface.getOptions().audioOnlyMode) {
                                    log('updateLocalControlsButtonsState v1');
                                    listItemInstance.videoIconEl.innerHTML = _streamingIcons.participantsDisabledCamera;
                                } else if (enabledVideoTracks == 0 && tool.webrtcSignalingLib.localParticipant().videoStream == null) {
                                    log('updateLocalControlsButtonsState v2');
                                    listItemInstance.videoIconEl.innerHTML = _streamingIcons.participantsDisabledCamera;
                                } else if (!localMediaControls.cameraIsEnabled()) {
                                    log('updateLocalControlsButtonsState v3');
                                    listItemInstance.videoIconEl.innerHTML = _streamingIcons.participantsDisabledCamera;
                                } else if (localMediaControls.cameraIsEnabled()) {
                                    log('updateLocalControlsButtonsState v4');
                                    listItemInstance.videoIconEl.innerHTML = _streamingIcons.participantsEnabledCamera;
                                }
    
                                var enabledAudioTracks = localParticipant.tracks.filter(function (t) {
                                    return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                                }).length;
    
                                if (enabledAudioTracks == 0 && tool.webrtcSignalingLib.localParticipant().audioStream == null) {
                                    log('updateLocalControlsButtonsState a1');
                                    listItemInstance.audioIconEl.innerHTML = _streamingIcons.participantsDisabledMic;
                                } else if (!localMediaControls.micIsEnabled()) {
                                    log('updateLocalControlsButtonsState a2');
                                    listItemInstance.audioIconEl.innerHTML = _streamingIcons.participantsDisabledMic;
                                } else if (localMediaControls.micIsEnabled()) {
                                    log('updateLocalControlsButtonsState a3');
                                    listItemInstance.audioIconEl.innerHTML = _streamingIcons.participantsEnabledMic;
                                }
                            }
                        }

                        function updateRemoteParticipantControlsButtonsState() {
                            log('updateRemoteParticipantControlsButtonsState');
    
                            for(let i in _participantsList) {
                                updateParticipantItem(_participantsList[i]);
                            }
                        }

                        function getListElement() {
                            log('ParticipantsList: getListElement');
                            return _participantsListEl;
                        }
                        function getListContainer() {
                            log('ParticipantsList: getListContainer');
                            return _participantsContainerEl;
                        }
                        function getWebrtcGroupInstance() {
                            log('ParticipantsList: getListContainer');
                            return _allParticipantsListInstance.sourceInstance;
                        }

                        function getWebrtcGroupListItem() {
                            log('ParticipantsList: getWebrtcGroupListItem');
                            return _allParticipantsListInstance;
                        }

                        return {
                            refreshList: refreshList,
                            getListElement: getListElement,
                            getListContainer: getListContainer,
                            getWebrtcGroupInstance: getWebrtcGroupInstance,
                            getWebrtcGroupListItem: getWebrtcGroupListItem,
                            addTeleconferenceSource: addTeleconferenceSource
                        }
                    }

                    //if user turns his mic off on main controls, all his mic audio in livestream should be also turned off
                    function declareOrRefreshEventHandlers() {
                        var webrtcSignalingLib = tool.webrtcSignalingLib;
                        
                        webrtcSignalingLib.event.on('beforeSwitchRoom', function (e) {
                            tool.updateWebrtcSignalingLibInstance(e.newWebrtcSignalingLibInstance);
                            declareOrRefreshEventHandlers();
                        });

                        if(_controlsTool != null && webrtcSignalingLib != null) {
                            webrtcSignalingLib.event.on('trackAdded', function (e) {
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('cameraEnabled', function () {
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('cameraDisabled', function () {
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('cameraToggled', function () {
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('micEnabled', function () {
                                updateLocalControlsButtonsState();
                            });
                            webrtcSignalingLib.event.on('micDisabled', function () {
                                updateLocalControlsButtonsState();
                            });
                        }
                    }

                    declareOrRefreshEventHandlers();

                    _scene.sceneInstance.eventDispatcher.on('sourceAdded', function (source) {
                        log('SCENE EVENT: SOURCE ADDED', source)
                        let activeScene = scenesInterface.getActive();
                        if(_scene == activeScene && source.screenSharing) {
                            log('SCENE EVENT: CHANGE LAYOUT', source)
                            _layoutsListCustomSelect.value = _selectedLayout = 'sideScreenSharing';
                            _autoSwitchToScreensharingLayoutAndBack = true;
                        }
                    })
                    _scene.sceneInstance.eventDispatcher.on('sourceRemoved', function (source) {
                        log('SCENE EVENT: SOURCE REMOVED', source)
                        if(source.sourceType != 'webrtc') {
                            return;
                        }
                        let webrtcGroup = source.parentGroup;
                        let allWebrtcSources = webrtcGroup.getChildSources('webrtc');

                        let anotherScreensharingExists = false;
                        for (let i in allWebrtcSources) {
                            if(allWebrtcSources[i].screenSharing) {
                                anotherScreensharingExists = true;
                                break;
                            }
                        }

                        if(!anotherScreensharingExists && _autoSwitchToScreensharingLayoutAndBack) {
                            _layoutsListCustomSelect.value = webrtcGroup.prevLayout;
                        }
                    })
                    _scene.sceneInstance.eventDispatcher.on('sourceMoved', function (source) {
                        log('SCENE EVENT: SOURCE MOVED')
                        //updateSourceControlPanelButtons(); 
                    })

                    function syncList() {
                        var sources = _scene.sceneInstance.sources;
                        log('visual: syncList _scene', _scene);
                        log('visual: syncList _sourcesList', _sourcesList.length);
                        log('visual: syncList sources', sources.length);
                        log('visual: syncList _id', _id);
                        try {
                            var err = (new Error);
                            log(err.stack);
                        } catch (e) {
        
                        }
                        for (let i = _sourcesList.length - 1; i >= 0; i--) {
                            log('visual: syncList _sourcesList', _sourcesList[i]);
                            if(_sourcesList[i] == null) continue;

                            if(_sourcesList[i].isActive() == false) {
                                log('visual: syncList remove',  _sourcesList[i]);

                                _sourcesList[i].remove();
                                continue;
                            }
                            if(_sourcesList[i].listType == 'visual') {
                                if(_sourcesList[i].sourceInstance.active === true) {
                                    _sourcesList[i].switchVisibilityIcon(true);
                                } else if(_sourcesList[i].sourceInstance.active === false) {
                                    _sourcesList[i].switchVisibilityIcon(false);
                                }
                            } else {
                                if(_sourcesList[i].sourceInstance.active === true) {
                                    _sourcesList[i].switchAudioActivenessIcon(true);
                                } else if(_sourcesList[i].sourceInstance.active === false) {
                                    _sourcesList[i].switchAudioActivenessIcon(false);
                                }
                            }
                        }

                        for (let s in sources) {
                            if(sources[s].sourceType == 'webrtcrect' || sources[s].sourceType == 'webrtctext') continue;
                            let newSource = true;
                            for (let i in _sourcesList) {
                                if(sources[s] == _sourcesList[i].sourceInstance) {
                                    newSource = false;
                                    break;
                                }
                            }

                            if(newSource) {
                                if ((sources[s].sourceType == 'group' && sources[s].groupType == 'webrtc') || sources[s].sourceType == 'webrtc' || sources[s].sourceType == 'video' || sources[s].sourceType == 'videoInput' || sources[s].sourceType == 'image') {
                                    var listItem = new VisualListItem(sources[s]);
                                    listItem.sourceInstance = sources[s];
                                    log('visual: syncList add', listItem);
                                    if (sources[s].active === true) {
                                        listItem.switchVisibilityIcon(true);
                                    } else if (sources[s].active === false) {
                                        listItem.switchVisibilityIcon(false);
                                    }

                                    var sourceResizingEl = listItem.resizingElement = document.createElement('DIV');
                                    sourceResizingEl.className = 'live-editor-canvas-preview-resizing';
                                    activeDialog.previewBoxEl.appendChild(sourceResizingEl);
        
                                    Q.activate(
                                        Q.Tool.setUpElement(
                                            sourceResizingEl,
                                            "Q/resize",
                                            {
                                                move: true,
                                                resize: true,
                                                active: true,
                                                //elementPosition: 'fixed',
                                                showResizeHandles: true,
                                                moveWithinArea: 'parent',
                                                allowOverresizing: true,
                                                negativeMoving: true,
                                                onMoving: function () {
                
                                                }
                                            }
                                        ),
                                        {},
                                        function () {
                                            listItem.resizingElementTool = this;
                                        }
                                    );
                                    
                                    addItem(listItem);
                                } else if ((sources[s].sourceType == 'group' && sources[s].groupType == 'webrtcaudio') || sources[s].sourceType == 'webrtcaudio' || sources[s].sourceType == 'audio' || sources[s].sourceType == 'audioInput') {
                                    var listItem = new AudioListItem(sources[s]);
                                    log('audio: syncList add', listItem, listItem.sourceInstance);
                                    if (sources[s].active === true) {
                                        listItem.switchAudioActivenessIcon(true);
                                    } else if (sources[s].active === false) {
                                        listItem.switchAudioActivenessIcon(false);
                                    }
                                    addItem(listItem);
                                }
                            }
                        }

                        sortList('visual');
                        updateSourceControlPanelButtons(); 
                    }

                    function sortList(type) {
                        var listArr, listEl, sources;

                        if(type == 'visual') {
                            listArr = _sourcesList;
                            listEl = _visualSourcesListEl;
                            sources = scenesInterface.getActive().sceneInstance.sources;
                        } else {
                            listArr = _audioList;
                            listEl = _audioSourcesListEl;
                            sources = scenesInterface.getActive().sceneInstance.audioSources;
                        }
                        log('sortList: sources', sources, listArr);

                        if(sources.length !== listArr.length) {
                            return;
                        }

                        listArr.sort((a, b) => {
                            return sources.findIndex(p => p === a.sourceInstance) - sources.findIndex(p => p === b.sourceInstance);
                        });

                        log('sortList: listArr', listArr.map(el => { return el.itemEl.innerText }));
                        log('sortList: NOT sortedElements', Array.from(listEl.childNodes).map(el => { return el.innerText }))

                        //listEl.innerHTML == '';
                        for (let e = 0; e < listArr.length; e++) {
                            listEl.appendChild(listArr[e].itemEl)
                        }
                        for(let i in listArr) {
                            log('source level for', i)
                            log('source level parentGroup', listArr[i].sourceInstance.parentGroup)

                            let level = 0;
                            let currentListItem = listArr[i].sourceInstance.parentGroup;
                            while (currentListItem) {
                                log('source level for f', currentListItem,  listArr[i].sourceInstance)

                                currentListItem = currentListItem.parentGroup ? currentListItem.parentGroup.parentGroup : null;
                                level++;
                            }
                            if(level != 0) listArr[i].itemEl.style.paddingLeft = 20*level + 'px';
                            log('source level', level)
                        }
                    }

                    function addItem(item) {
                        if(item == null || _visualSourcesListEl == null) return;
                        log('visual: addItem', item)
                        log('visual: addItem itemEl', item.itemEl)
                    
                        _sourcesList.push(item)
                        log('visual: addItem element', _visualSourcesListEl)

                        _visualSourcesListEl.insertBefore(item.itemEl, _visualSourcesListEl.firstChild);
                        
                        if(item.sourceInstance.sourceType == 'webrtc' && item.sourceInstance.participant.isLocal) {
                            updateLocalControlsButtonsState();
                        }
                    }

                    function loadList(sourcesList) {
                        if(sourcesList == null) return;
                        log('loadList', sourcesList)
                        for(let s in sourcesList) {
                            log('loadList for', sourcesList[s])
                            if(sourcesList[s].sourceType == 'webrtc' || sourcesList[s].sourceType == 'video' || sourcesList[s].sourceType == 'videoInput' || sourcesList[s].sourceType == 'image') {
                                var listItem = new VisualListItem(sourcesList[s].title);
                                listItem.sourceInstance = sourcesList[s];
                                addItem(listItem, _visualSourcesListEl);
                            } else if (sourcesList[s].sourceType == 'webrtcaudio' || sourcesList[s].sourceType == 'audio' || sourcesList[s].sourceType == 'audioInput') {
                                var listItem = new AudioListItem(sourcesList[s]);
                                addItem(listItem, _visualSourcesListEl);
                            }
                        }
                    }

                    function addWatermark(e, options) {
                        log('addWatermark');
                        if(options.type == 'image') {
                            if (typeof e == 'string') {
                                var pathhInfo = e.split('/');
                                var title = pathhInfo[pathhInfo.length - 1];

                                var img = new Image();
                                img.src = e;
                                img.onload = function () {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                        sourceType: 'imageOverlay',
                                        imageInstance: img,
                                        position: options.position,
                                        opacity: options.opacity
                                    });
                                };
                            } else {
                                var tgt = e.target || window.event.srcElement,
                                    files = tgt.files;

                                function loadImage(fileReader) {
                                    var img = new Image();
                                    img.src = fileReader.result;
                                    img.onload = function () {
                                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                            sourceType: 'imageOverlay',
                                            title: files[0].name,
                                            imageInstance: img,
                                        });
                                    };

                                }

                                if (FileReader && files && files.length) {
                                    var fr = new FileReader();
                                    fr.onload = () => loadImage(fr);
                                    fr.readAsDataURL(files[0]);
                                }
                            }
                        } else {

                        }
                    }

                    function addBackground(e, options) {
                        log('addBackground');
                        if(options.type == 'image') {
                            if (typeof e == 'string') {
                                var img = new Image();
                                img.src = e;
                                img.onload = function () {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                        sourceType: 'imageBackground',
                                        imageInstance: img
                                    });
                                };
                            } else {
                                var tgt = e.target || window.event.srcElement,
                                    files = tgt.files;

                                function loadImage(fileReader) {
                                    var img = new Image();
                                    img.src = fileReader.result;
                                    img.onload = function () {
                                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                            sourceType: 'img',
                                            title: files[0].name,
                                            imageInstance: img,
                                        });
                                    };

                                }

                                if (FileReader && files && files.length) {
                                    var fr = new FileReader();
                                    fr.onload = () => loadImage(fr);
                                    fr.readAsDataURL(files[0]);
                                }
                            }
                        } else {
                            if(typeof e == 'string') {

                                var pathhInfo = e.split('/');
                                var title = pathhInfo[pathhInfo.length - 1];
                                tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                    sourceType: 'videoBackground',
                                    title: title,
                                    url: e,
                                });
                            } else {


                            }
                        }
                    }

                    function addVideoInputSource(e) {
                        log('addVideoInputSource', e);
                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                            sourceType: 'videoInput',
                            title: e.name,
                            mediaStreamInstance: e.stream,
                            originalSize: e.originalSize,
                            frameRate: e.frameRate,
                            screensharing: e.screensharing
                        });
                    }

                    function addImageSource(e) {
                        log('addImageSource');
                        if(typeof e == 'string') {
                            var pathhInfo = e.split('/');
                            var title = pathhInfo[pathhInfo.length - 1];

                            var img = new Image();
                            img.src = e;
                            img.onload = function () {
                                tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                    sourceType: 'image',
                                    title: title,
                                    imageInstance: img,
                                });
                            };
                        } else {
                            var tgt = e.target || window.event.srcElement,
                                files = tgt.files;

                            function loadImage(fileReader) {
                                var img = new Image();
                                img.src = fileReader.result;
                                img.onload = function () {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                        sourceType: 'image',
                                        title: files[0].name,
                                        imageInstance: img,
                                    });
                                };

                            }

                            if (FileReader && files && files.length) {
                                var fr = new FileReader();
                                fr.onload = () => loadImage(fr);
                                fr.readAsDataURL(files[0]);
                            }
                        }
                    }

                    function addVideoSource(e) {
                        if(typeof e == 'string') {

                            var pathhInfo = e.split('/');
                            var title = pathhInfo[pathhInfo.length - 1];
                            tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                sourceType: 'video',
                                title: title,
                                url: e,
                            });
                        } else {
                            var tgt = e.target || window.event.srcElement,
                                files = tgt.files;

                            if (FileReader && files && files.length) {
                                let file = files[0], mime = file.type;
                                let reader = new  FileReader();
                                reader.readAsArrayBuffer(file);
                                reader.addEventListener('loadstart', loadStartHandler);
                                reader.addEventListener('load', loadHandler);
                                reader.addEventListener('loadend', loadEndHandler);
                                reader.addEventListener('progress', updateProgress);
                                reader.addEventListener('error', errorHandler);
                                reader.addEventListener('abort', abortHandler);

                                var loadProgressBar = new ProgressBar();
                                loadProgressBar.show();

                                function loadHandler(e) {
                                    // The file reader gives us an ArrayBuffer:
                                    let buffer = e.target.result;

                                    // We have to convert the buffer to a blob:
                                    let videoBlob = new Blob([new Uint8Array(buffer)], { type: mime });

                                    // The blob gives us a URL to the video file:
                                    let url = window.URL.createObjectURL(videoBlob);

                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                                        sourceType: 'video',
                                        title: files[0].name,
                                        url: url,
                                    }, function () {
                                        loadProgressBar.updateTextStatus('loaded');
                                        loadProgressBar.hide();
                                    }, function (e) {
                                        loadProgressBar.updateTextStatus('<span style="color:#ff9f9f;">' + e.message + '</span>');
                                    });

                                    loadProgressBar.updateProgress(100);


                                }

                                function loadStartHandler(evt) {

                                }

                                function loadEndHandler(evt) {

                                }

                                function abortHandler(evt) {
                                    loadProgressBar.updateTextStatus('<span style="color:#ff9f9f;">File read cancelled</span>');
                                }

                                function errorHandler(evt) {
                                    log('errorHandler',  evt.target.error)

                                    switch (evt.target.error.code) {
                                        case evt.target.error.NOT_FOUND_ERR:
                                            loadProgressBar.updateTextStatus('<span style="color:#ff9f9f;">File Not Found!</span>');
                                            break;
                                        case evt.target.error.NOT_READABLE_ERR:
                                            loadProgressBar.updateTextStatus('<span style="color:#ff9f9f;">File is not readable</span>');
                                            break;
                                        case evt.target.error.ABORT_ERR:
                                            break; // noop
                                        default:
                                            loadProgressBar.updateTextStatus('<span style="color:#ff9f9f;">An error occurred reading this file.</span>');
                                    };
                                }

                                function updateProgress(evt) {
                                    // evt is an ProgressEvent.
                                    if (evt.lengthComputable) {
                                        var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                        // Increase the progress bar length.
                                        if (percentLoaded < 100) {
                                            loadProgressBar.updateProgress(percentLoaded);
                                        }
                                    }
                                }

                                function ProgressBar() {
                                    var _progrssBarPopup = null;
                                    var _barProggressEl = null;
                                    var _progressText = null;
                                    var _isHidden = true;
                                    var _barWidth = 300;
                                    var _barheight = 100;

                                    log('createProgressBar')
                                    var dialog=document.createElement('DIV');
                                    dialog.className = 'live-editor-popup-progress-bar-popup';
                                    dialog.style.width = _barWidth + 'px';
                                    dialog.style.height = _barheight + 'px';
                                    _progrssBarPopup = dialog;

                                    var dialogInner=document.createElement('DIV');
                                    dialogInner.className = 'live-editor-popup-progress-bar-popup-inner';
                                    var boxContent=document.createElement('DIV');
                                    boxContent.className = 'live-editor-popup-streaming-box live-editor-popup-box';
                                    var boxContentText = _progressText = document.createElement('DIV');
                                    boxContentText.innerHTML = 'loading...';
                                    var progressBar = document.createElement('DIV');
                                    progressBar.className = 'live-editor-popup-progress-bar';
                                    var progressEl = _barProggressEl = document.createElement('SPAN');
                                    progressEl.className = 'live-editor-popup-progress-el';


                                    progressBar.appendChild(progressEl);
                                    boxContent.appendChild(boxContentText);
                                    boxContent.appendChild(progressBar);

                                    var close=document.createElement('div');
                                    close.className = 'live-editor-close-dialog-sign';
                                    close.innerHTML = '&#10005;';
                                    var popupinstance = this;
                                    close.addEventListener('click', function() {
                                        popupinstance.hide();
                                    });
                                    dialog.appendChild(close);

                                    dialogInner.appendChild(boxContent);
                                    dialog.appendChild(dialogInner);

                                    this.show = function() {
                                        var boxRect = activeDialog.dialogEl.getBoundingClientRect();
                                        var x = (boxRect.width / 2) - (_barWidth / 2);
                                        var y = (boxRect.height / 2) - (_barheight / 2);
                                        _progrssBarPopup.style.top = y + 'px';
                                        _progrssBarPopup.style.left = x + 'px';
                                        activeDialog.dialogEl.appendChild(_progrssBarPopup);
                                    }

                                    this.hide = function() {
                                        if(!activeDialog.dialogEl.contains(_progrssBarPopup)) return;
                                        activeDialog.dialogEl.removeChild(_progrssBarPopup);
                                    }

                                    this.updateProgress = function(percemt) {
                                        _barProggressEl.style.width = percemt + '%';
                                        _barProggressEl.innerHTML = percemt + '%';
                                    }

                                    this.updateTextStatus = function(text) {
                                        _progressText.innerHTML = text;
                                    }
                                }

                            }

                        }
                    }

                    function addTeleconferenceSource(name) {
                        log('addTeleconferenceSource START');
                        var webrtcGroup = tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.addSource({
                            sourceType: 'webrtcGroup',
                            title: name ? name : 'Participants'
                        });

                        //webrtcGroup.currentLayout = _layoutsListSelect.value;
                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.updateWebRTCLayout(webrtcGroup, _layoutsListSelect.value, null);

                    }

                    function addAudioSource(e) {
                        log('addAudioSource', e)
                        if(typeof e == 'string') {
                            var pathhInfo = e.split('/');
                            var title = pathhInfo[0] + '//.../' + pathhInfo[pathhInfo.length - 1];
                            tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.addSource({
                                sourceType: 'audio',
                                title: title,
                                url: e,
                            });
                        } else {
                            var tgt = e.target || window.event.srcElement,
                                files = tgt.files;
                            log('addAudioSource 2')

                            if (FileReader && files && files.length) {
                                let file = files[0], mime = file.type;
                                let reader = new  FileReader();
                                reader.readAsArrayBuffer(file);
                                reader.onload = function(e) {
                                    // The file reader gives us an ArrayBuffer:
                                    let buffer = e.target.result;

                                    // We have to convert the buffer to a blob:
                                    let audioBlob = new Blob([new Uint8Array(buffer)], { type: mime });
                                    log('addAudioSource onload', audioBlob)

                                    // The blob gives us a URL to the video file:
                                    let url = window.URL.createObjectURL(audioBlob);

                                    tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.addSource({
                                        sourceType: 'audio',
                                        title: files[0].name,
                                        url: url,
                                    });
                                }

                            }

                        }
                    }

                    function addAudioInputSource(e) {
                        log('addAudioInputSource', e);
                        tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.addSource({
                            sourceType: 'audioInput',
                            title: e.name,
                            mediaStreamInstance: e.stream
                        });
                    }

                    function hideResizingElement() {
                        _resizingElement.style.display = 'none';
                    }

                    function showResizingElement() {
                        _resizingElement.style.display = '';
                    }

                    function selectSource(sourceItem) {
                        log('selectSource START', sourceItem)

                        if(sourceItem.listType == 'allParticipants' || sourceItem.listType == 'mainParticipantVideo' || sourceItem.listType == 'additionalParticipantVideo') {
                            deselctAll();

                            if(sourceItem.listItemEl && !sourceItem.listItemEl.classList.contains('live-editor-popup-sources-item-active')) {   
                                sourceItem.listItemEl.classList.add('live-editor-popup-sources-item-active');
                            }
                            _selectedSource = sourceItem;
                        } else {
                            deselctAll();
                            if(sourceItem.itemEl && !sourceItem.itemEl.classList.contains('live-editor-popup-sources-item-active')) {
                                sourceItem.itemEl.classList.add('live-editor-popup-sources-item-active');
                            }
                            _selectedSource = sourceItem;
                        
                        }

                        function deselctAll() {
                            let currentlySelectedEls = _sceneSourcesColumnEl.querySelectorAll('.live-editor-popup-sources-item-active');
                            let i, selectedElsNum = currentlySelectedEls.length;
                            for(i = 0; i < selectedElsNum; i++) {
                                if(currentlySelectedEls[i].classList.contains('live-editor-popup-sources-item-active')) {   
                                    currentlySelectedEls[i].classList.remove('live-editor-popup-sources-item-active');
                                }  
                            }
                            let resizingEls = activeDialog.previewBoxParent.querySelectorAll('.live-editor-canvas-preview-resizing');
                            let a, resizingElsNum = resizingEls.length;
                            for(a = 0; a < resizingElsNum; a++) {
                                resizingEls[a].style.display = '';
                            }
                        }

                        _eventDispatcher.dispatch('sourceSelected', _selectedSource);
                        if(!_selectedSource.sourceInstance) return;
                        log('selectSource _selectedSource', _selectedSource)

                        var left = 0, top = 0;
                        if(_streamingCanvas != null) {
                            left = _streamingCanvas.offsetLeft;
                            top = _streamingCanvas.offsetTop;
                        }
                        var canvasSize = tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.getCanvasSize();
                        var prmtr1 = canvasSize.width * 2 + canvasSize.height * 2
                        var realcanvasSize = _streamingCanvas.getBoundingClientRect();
                        var prmtr2 = realcanvasSize.width * 2 + realcanvasSize.height * 2
                        var timesBigger = prmtr1 >= prmtr2 ? prmtr1 / prmtr2 : prmtr2 / prmtr1;
                        log('selectSource timesbigger', prmtr1, prmtr2, timesBigger)
                        if (sourceItem.resizingElementTool != null) {
                            sourceItem.resizingElementTool.events.removeAllHandlers('moving');
                            sourceItem.resizingElementTool.events.removeAllHandlers('resizing');
                        }
                        if(_selectedSource.sourceInstance.sourceType == 'group' && _selectedSource.sourceInstance.groupType == 'webrtc') {
                            var groupRect = _selectedSource.sourceInstance.rect;
                            log('selectSource if1')

                            sourceItem.resizingElement.style.display = 'block';
                            sourceItem.resizingElement.style.width = groupRect.width / timesBigger + 'px';
                            sourceItem.resizingElement.style.height = groupRect.height / timesBigger + 'px';
                            sourceItem.resizingElement.style.top = top + groupRect.y / timesBigger + 'px';
                            sourceItem.resizingElement.style.left = left + groupRect.x / timesBigger + 'px';
                            sourceItem.resizingElement.style.border = '1px solid red';

                            sourceItem.resizingElementTool.state.keepRatioBasedOnElement = {
                                width: groupRect.width,
                                height: groupRect.height
                            };

                            sourceItem.resizingElementTool.events.on('moving', function (e) {
                                let leftPos = (e.x - left);
                                let topPos = (e.y - top);
                                _selectedSource.sourceInstance.rect.x = leftPos * timesBigger;
                                _selectedSource.sourceInstance.rect.y = topPos * timesBigger;
                            });

                            sourceItem.resizingElementTool.events.on('resizing', function (e) {
                                let leftPos = (e.x - left);
                                let topPos = (e.y - top);
                                if (e.width != null) {
                                    _selectedSource.sourceInstance.rect.width = e.width * timesBigger;
                                }
                                if (e.height != null) {
                                    _selectedSource.sourceInstance.rect.height = e.height * timesBigger;
                                }
                                if (e.x != null) {
                                    _selectedSource.sourceInstance.rect.x = leftPos * timesBigger;
                                }
                                if (e.y != null) {
                                    _selectedSource.sourceInstance.rect.y = topPos * timesBigger;
                                }
                            });
                        } else if(_selectedSource.sourceInstance.sourceType == 'webrtc') {  
                            log('SELECT WEBRTC', sourceItem)
                            var sourceRect = _selectedSource.sourceInstance.rect;
                            log('SELECT WEBRTC sourceRect', sourceRect)

                            let scaledWidth = sourceRect.width / timesBigger;
                            let scaledHeight = sourceRect.height / timesBigger;
                            let scaledTop = top + sourceRect.y / timesBigger;
                            let scaledLeft = left + sourceRect.x / timesBigger;

                            log('SELECT WEBRTC size', scaledWidth, scaledHeight, scaledTop, scaledLeft)
                            sourceItem.resizingElement.style.display = 'block';
                            sourceItem.resizingElement.style.width = scaledWidth + 'px';
                            sourceItem.resizingElement.style.height = scaledHeight + 'px';
                            sourceItem.resizingElement.style.top = scaledTop + 'px';
                            sourceItem.resizingElement.style.left = scaledLeft + 'px';
                            sourceItem.resizingElement.style.border = '1px solid red';
                            sourceItem.resizingElement.style.boxSizing = 'border-box';
                            //hideResizingElement();
                        } else if(_selectedSource.sourceInstance.sourceType == 'image' || _selectedSource.sourceInstance.sourceType == 'video' || _selectedSource.sourceInstance.sourceType == 'videoInput') {
                            log('selectSource if2')
                            //showResizingElement();
                            var sourceRect = _selectedSource.sourceInstance.rect;
                            log('selectSource sourceRect', sourceRect)
                            log('selectSource sourceRect 1', sourceRect.width,  sourceRect.height,  sourceRect.x,  sourceRect.y)
                            
                            if (_selectedSource.sourceInstance.sourceType == 'image' && !sourceItem.resizingElementTool.state.keepRatioBasedOnElement) {
                                sourceItem.resizingElementTool.state.keepRatioBasedOnElement = {
                                    width: _selectedSource.sourceInstance.imageInstance.naturalWidth,
                                    height: _selectedSource.sourceInstance.imageInstance.naturalHeight
                                };
                            } else if (_selectedSource.sourceInstance.sourceType == 'video' && !sourceItem.resizingElementTool.state.keepRatioBasedOnElement) {
                                sourceItem.resizingElementTool.state.keepRatioBasedOnElement = {
                                    width: _selectedSource.sourceInstance.videoInstance.videoWidth,
                                    height: _selectedSource.sourceInstance.videoInstance.videoHeight
                                };
                            }

                            let scaledWidth = sourceRect._width / timesBigger;
                            let scaledHeight = sourceRect._height / timesBigger;
                            let scaledTop = top + sourceRect._y / timesBigger;
                            let scaledLeft = left + sourceRect._x / timesBigger;
                            sourceItem.resizingElement.style.display = 'block';
                            sourceItem.resizingElement.style.width = scaledWidth + 'px';
                            sourceItem.resizingElement.style.height = scaledHeight + 'px';
                            sourceItem.resizingElement.style.top = scaledTop + 'px';
                            sourceItem.resizingElement.style.left = scaledLeft + 'px';
                            sourceItem.resizingElement.style.border = '1px solid red';
                            sourceItem.resizingElement.style.boxSizing = 'border-box';

                            sourceItem.resizingElementTool.events.on('moving', function (e) {
                                let leftPos = (e.x - left);
                                let topPos = (e.y - top);
                                _selectedSource.sourceInstance.rect.x = leftPos * timesBigger;
                                _selectedSource.sourceInstance.rect.y = topPos * timesBigger;
                            });

                            sourceItem.resizingElementTool.events.on('resizing', function (e) {
                                let leftPos = (e.x - left);
                                let topPos = (e.y - top);
                                if (e.width != null) {
                                    _selectedSource.sourceInstance.rect.width = e.width * timesBigger;
                                }
                                if (e.height != null) {
                                    _selectedSource.sourceInstance.rect.height = e.height * timesBigger;              
                                }
                                if (e.x != null) {
                                    _selectedSource.sourceInstance.rect.x = leftPos * timesBigger;
                                }
                                if (e.y != null) {
                                    _selectedSource.sourceInstance.rect.y = topPos * timesBigger;
                                }

                                _selectedSource.sourceInstance.rect.currentWidth = e.originalWidth / _selectedSource.sourceInstance.rect._width;
                                //_selectedSource.sourceInstance.rect.currentHeight = _selectedSource.sourceInstance.rect._height;

                            });
        
                            sourceItem.resizingElementTool.events.on('resized', function (e) {
                             
                            });

                        }

                        optionsColumn.update();
                        updateSourceControlPanelButtons();
                    }

                    function moveForward() {
                        log('moveForward');
                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.moveSourceForward(_selectedSource.sourceInstance);

                        sortList('visual');
                        return false;
                    }

                    function moveBackward() {
                        log('moveBackward', _selectedSource);
                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.moveSourceBackward(_selectedSource.sourceInstance);

                        sortList('visual');
                        return false;
                    }

                    function getSelectedSource() {
                        return _selectedSource;
                    }

                    function removeSource() {
                        if(_selectedSource != null) {

                            let sourceToRemove = _selectedSource;
                            _selectedSource = null;
                            if(sourceToRemove.listType == 'visual' || sourceToRemove.listType == 'allParticipants') {
                                tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.removeSource(sourceToRemove.sourceInstance);
                            } else if(sourceToRemove.listType == 'audio') {
                                tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.removeSource(sourceToRemove.sourceInstance);
                            }
                            syncList();
                        };
                        var activeScene = scenesInterface.getActive();
                        //activeScene.sourcesInterface.hideResizingElement()
                        optionsColumn.update();
                    }

                    function createAddSourceMenu() {
                        var dropUp = _addVisualSourceDropUpMenuEl = document.createElement('DIV');
                        dropUp.className = 'live-editor-popup-sources-add-menu';

                        /*var conferenceItem = document.createElement('DIV');
                        conferenceItem.className = 'live-editor-popup-sources-add-menu-item live-editor-popup-sources-add-conference';
                        conferenceItem.dataset.menuName = 'add-conference';
                        var conferenceItemIcon = document.createElement('DIV');
                        conferenceItemIcon.className = 'live-editor-popup-sources-add-menu-icon';
                        var conferenceItemIconText = document.createElement('DIV');
                        conferenceItemIconText.className = 'live-editor-popup-sources-add-menu-text';
                        conferenceItemIconText.innerHTML = 'Teleconference';
                        conferenceItem.addEventListener('click', function (e) {
                            addTeleconferencePopup.showDialog(e);
                        })
                        conferenceItem.appendChild(conferenceItemIcon);
                        conferenceItem.appendChild(conferenceItemIconText);
                        dropUp.appendChild(conferenceItem);*/

                        var cameraItem = document.createElement('DIV');
                        cameraItem.className = 'live-editor-popup-sources-add-menu-item live-editor-popup-sources-add-camera';
                        cameraItem.dataset.menuName = 'add-camera';
                        var cameraItemIcon = document.createElement('DIV');
                        cameraItemIcon.className = 'live-editor-popup-sources-add-menu-icon';
                        var cameraItemIconText = document.createElement('DIV');
                        cameraItemIconText.className = 'live-editor-popup-sources-add-menu-text';
                        cameraItemIconText.innerHTML = 'Camera';
                        cameraItem.addEventListener('click', function (e) {
                            addCameraPopup.showDialog({
                                onOk: function (e) {
                                    if (!e.stream) {
                                        alert('No media stream added');
                                        return;
                                    }
                                    if(e.sourceType == 'separate') {
                                        log('add camera source: separate', e);

                                        addVideoInputSource({
                                            name: e.name,
                                            stream: e.stream,
                                            originalSize: e.originalSize,
                                            frameRate: e.frameRate
                                        });
                                    } else {
                                        log('add camera source: webrtc');
                                        let videoTracks = e.stream.getVideoTracks();
                                        for (let t in videoTracks) {
                                            videoTracks[t].stop();
                                        }
                                        tool.webrtcSignalingLib.localMediaControls.toggleCameras({deviceId:e.deviceId});
                                    }
                                    
                                },
                                onClose: function () {
        
                                }
                            });
                        })
                        cameraItem.appendChild(cameraItemIcon);
                        cameraItem.appendChild(cameraItemIconText);
                        dropUp.appendChild(cameraItem);

                        var imageItem = document.createElement('DIV');
                        imageItem.className = 'live-editor-popup-sources-add-menu-item live-editor-popup-sources-add-image';
                        imageItem.dataset.menuName = 'add-image';
                        var imageItemIcon = document.createElement('DIV');
                        imageItemIcon.className = 'live-editor-popup-sources-add-menu-icon';
                        var imageItemIconText = document.createElement('DIV');
                        imageItemIconText.className = 'live-editor-popup-sources-add-menu-text';
                        imageItemIconText.innerHTML = 'Image';
                        imageItem.addEventListener('click', function (e) {
                            addImagePopup.showDialog(e);
                        })
                        imageItem.appendChild(imageItemIcon);
                        imageItem.appendChild(imageItemIconText);
                        dropUp.appendChild(imageItem);

                        var videoItem = document.createElement('DIV');
                        videoItem.className = 'live-editor-popup-sources-add-menu-item';
                        cameraItem.dataset.menuName = 'add-video';
                        var videoItemIcon = document.createElement('DIV');
                        videoItemIcon.className = 'live-editor-popup-sources-add-menu-icon';
                        var videoItemIconText = document.createElement('DIV');
                        videoItemIconText.className = 'live-editor-popup-sources-add-menu-text';
                        videoItemIconText.innerHTML = 'Video';
                        videoItem.addEventListener('click', function (e) {
                            addVideoPopup.showDialog(e);
                        })
                        /*var videoItemInput = document.createElement('INPUT');
                            videoItemInput.className = 'live-editor-popup-sources-add-menu-file';
                            videoItemInput.type = 'file';
                            videoItemInput.name = 'fileVideoSource';
                            videoItemInput.addEventListener('change', function (e) {
                                addVideoSource(e);
                            })*/
                        videoItem.appendChild(videoItemIcon);
                        videoItem.appendChild(videoItemIconText);
                        //videoItem.appendChild(videoItemInput);
                        dropUp.appendChild(videoItem);

                        var audioItem = document.createElement('DIV');
                        audioItem.className = 'live-editor-popup-sources-add-menu-item';
                        cameraItem.dataset.menuName = 'add-video';
                        var audioItemIcon = document.createElement('DIV');
                        audioItemIcon.className = 'live-editor-popup-sources-add-menu-icon';
                        var audioItemIconText = document.createElement('DIV');
                        audioItemIconText.className = 'live-editor-popup-sources-add-menu-text';
                        audioItemIconText.innerHTML = 'Audio';
                        audioItem.addEventListener('click', function (e) {
                            addAudioPopup.showDialog(e);
                        })
                        audioItem.appendChild(audioItemIcon);
                        audioItem.appendChild(audioItemIconText);
                        dropUp.appendChild(audioItem);

                        var micItem = document.createElement('DIV');
                        micItem.className = 'live-editor-popup-sources-add-menu-item live-editor-popup-sources-add-mic';
                        var micItemIcon = document.createElement('DIV');
                        micItemIcon.className = 'live-editor-popup-sources-add-menu-icon';
                        var micItemIconText = document.createElement('DIV');
                        micItemIconText.className = 'live-editor-popup-sources-add-menu-text';
                        micItemIconText.innerHTML = 'Audio Input';
                        micItem.addEventListener('click', function (e) {
                            addMicrophoneAudioPopup.showDialog({
                                onOk: function (e) {
                                    log('addMicrophoneAudioPopup: ', e);

                                    if (!e.stream) {
                                        alert('No media stream added');
                                        return;
                                    }
                                    if(e.sourceType == 'separate') {
                                        addAudioInputSource({
                                            name: e.name,
                                            stream: e.stream
                                        });
                                    } else {
                                        log('add camera source: webrtc');
                                        let audioTracks = e.stream.getAudioTracks();
                                        for (let t in audioTracks) {
                                            audioTracks[t].stop();
                                        }
                                        tool.webrtcSignalingLib.localMediaControls.toggleAudioInputs({deviceId:e.deviceId});
                                    }
                                    
                                },
                                onClose: function () {
        
                                }
                            });
                        })

                        micItem.appendChild(micItemIcon);
                        micItem.appendChild(micItemIconText);
                        dropUp.appendChild(micItem);

                        var savedMedia = document.createElement('DIV');
                        savedMedia.className = 'live-editor-popup-sources-add-menu-item';
                        savedMedia.dataset.menuName = 'add-saved';
                        var savedMediaIcon = document.createElement('DIV');
                        savedMediaIcon.className = 'live-editor-popup-sources-add-menu-icon';
                        var savedMediaIconText = document.createElement('DIV');
                        savedMediaIconText.className = 'live-editor-popup-sources-add-menu-text';
                        savedMediaIconText.innerHTML = 'Saved Media';
                        savedMedia.addEventListener('click', function (e) {
                            log('_fileManagerTool', _fileManagerTool)
                            if(!_fileManagerTool) return;

                            _fileManagerTool.showDialog();

                            _fileManagerTool.state.onSelect.set(function (stream) {
                                log('Streams/fileManager onSelect', stream)
                                if(stream.fields.attributes == '' && stream.fields.icon == '') {
                                    console.error('Q.file.url is missing')
                                    return;
                                }
                                var link;
                                if(attributes) {
                                    var attributes = JSON.parse(stream.fields.attributes);
                                    link = Q.url(attributes['Q.file.url']);
                                } else {
                                    link = Q.url(stream.fields.icon) + '/original.png';
                                }
                                log('Streams/fileManager attributes', link)
                                if(stream.fields.type == 'Streams/video') {
                                    addVideoSource(link);
                                } else if(stream.fields.type == 'Streams/image') {
                                    addImageSource(link);
                                } else if(stream.fields.type == 'Streams/audio') {
                                    addAudioSource(link);
                                } else {
                                    alert('Wrong type of file')
                                }

                                _fileManagerTool.closeDialog();
                            }, 'importVisual')
                        })

                        savedMedia.appendChild(savedMediaIcon);
                        savedMedia.appendChild(savedMediaIconText);
                        dropUp.appendChild(savedMedia);

                        //_dialogEl.appendChild(dropUp);
                        return dropUp;
                    }

                    function checkIfOtherWebrtcVideoGroupExist() {
                        let sources = _scene.sceneInstance.sources;
                        let otherWebrtcGroupExist = false;
                        for(let i in sources) {
                            if(sources[i].sourceType == 'group' && sources[i].groupType == 'webrtc') {
                                otherWebrtcGroupExist = true;
                                break;
                            }
                        }
                        return otherWebrtcGroupExist;
                    }

                    function createSourcesList() {
                        if(_visualSourcesEl != null) return _visualSourcesEl;
                        var dialogBody = document.createElement('DIV');
                        dialogBody.className = 'live-editor-popup-sources-visual-body';
                        var dialogBodyInner = document.createElement('DIV');
                        dialogBodyInner.className = 'live-editor-popup-sources-body-inner';
                        dialogBody.appendChild(dialogBodyInner)
                        _visualSourcesEl = dialogBody;
                        _visualSourcesListEl = dialogBodyInner;

                        var sourcesColumnControl = document.createElement('DIV');
                        sourcesColumnControl.className = 'live-editor-popup-sources-control';
                        dialogBody.appendChild(sourcesColumnControl)

                        var dropUpMenu = createAddSourceMenu();

                        var sourcesColumnControlAddBtn = document.createElement('DIV');
                        sourcesColumnControlAddBtn.className = 'live-editor-popup-sources-control-btn live-editor-popup-sources-control-btn-add';
                        if(!tool.state.managingVisualSources) sourcesColumnControlAddBtn.classList.add('live-editor-inactive');
                        sourcesColumnControlAddBtn.innerHTML = _streamingIcons.addItem;
                        sourcesColumnControlAddBtn.appendChild(dropUpMenu);

                        sourcesColumnControlAddBtn.addEventListener('click', function() {
                            showDropUpMenu(dropUpMenu, sourcesColumnControlAddBtn);
                        });

                        sourcesColumnControl.appendChild(sourcesColumnControlAddBtn);
                        _sourceControlButtons.push({
                            name: 'addSource',
                            buttonEl: sourcesColumnControlAddBtn
                        });

                        var sourcesColumnControlBtn = document.createElement('DIV');
                        sourcesColumnControlBtn.className = 'live-editor-popup-sources-control-btn live-editor-popup-sources-control-btn-remove';
                        if(!tool.state.managingVisualSources) sourcesColumnControlBtn.classList.add('live-editor-inactive');
                        sourcesColumnControlBtn.innerHTML = _streamingIcons.removeItem;
                        sourcesColumnControlBtn.addEventListener('click', function () {
                            removeSource();
                        })
                        sourcesColumnControl.appendChild(sourcesColumnControlBtn);

                        _sourceControlButtons.push({
                            name: 'removeSource',
                            buttonEl: sourcesColumnControlBtn
                        });

                        var sourcesColumnControlBtn = document.createElement('DIV');
                        sourcesColumnControlBtn.className = 'live-editor-popup-sources-control-btn';
                        sourcesColumnControlBtn.innerHTML = _streamingIcons.moveUp;
                        sourcesColumnControlBtn.addEventListener('click', function () {
                            moveForward();
                        })
                        sourcesColumnControl.appendChild(sourcesColumnControlBtn);
                        _sourceControlButtons.push({
                            name: 'moveForward',
                            buttonEl: sourcesColumnControlBtn
                        });
                        
                        var sourcesColumnControlBtn = document.createElement('DIV');
                        sourcesColumnControlBtn.className = 'live-editor-popup-sources-control-btn';
                        sourcesColumnControlBtn.innerHTML = _streamingIcons.moveDown;
                        sourcesColumnControlBtn.addEventListener('click', function () {
                            moveBackward();
                        })
                        sourcesColumnControl.appendChild(sourcesColumnControlBtn);
                        _sourceControlButtons.push({
                            name: 'moveBackward',
                            buttonEl: sourcesColumnControlBtn
                        });

                        var sourcesColumnControlBtn = document.createElement('DIV');
                        sourcesColumnControlBtn.className = 'live-editor-popup-sources-control-btn';
                        sourcesColumnControlBtn.innerHTML = _streamingIcons.settings;
                        sourcesColumnControlBtn.addEventListener('click', function () {
                            let streamingControlsEl = document.querySelector('.live-editor-popup-streaming-controls');
                            let titleEl = document.querySelector('.live-editor-dialog-header');
                            let titleElRect = titleEl.getBoundingClientRect();
                            let rectangleToShowIn = streamingControlsEl ? streamingControlsEl.getBoundingClientRect() : null;
                            let settingsDialogEl = optionsColumn.getSettingsDialog();
                            let title = "Source's settings";
                            if(_selectedSource && _selectedSource.sourceInstance && _selectedSource.sourceInstance.sourceType == 'group' && _selectedSource.sourceInstance.groupType == 'webrtc') {
                                title = "Layout's settings";
                            }
                            let settingsDialog = new SimpleDialog({
                                content: settingsDialogEl, 
                                rectangleToShowIn: new DOMRect(rectangleToShowIn.x, rectangleToShowIn.y - titleElRect.height, rectangleToShowIn.width, rectangleToShowIn.height + titleElRect.height),
                                title: title
                            });
                        })

                        sourcesColumnControl.appendChild(sourcesColumnControlBtn);
                        
                        _sourceControlButtons.push({
                            name: 'sourceSettings',
                            buttonEl: sourcesColumnControlBtn
                        });

                        var inviteBtnCon = document.createElement('DIV');
                        inviteBtnCon.className = 'live-editor-popup-sources-control-btn-invite-con'
                        sourcesColumnControl.appendChild(inviteBtnCon);

                        var inviteBtn = document.createElement('DIV');
                        inviteBtn.className = 'live-editor-popup-sources-control-btn live-editor-popup-sources-control-btn-invite';
                        inviteBtnCon.appendChild(inviteBtn);
                        var inviteBtnIcon = document.createElement('DIV');
                        inviteBtnIcon.className = 'live-editor-popup-sources-control-btn-icon';
                        inviteBtnIcon.innerHTML = _streamingIcons.plusIcon;
                        inviteBtn.appendChild(inviteBtnIcon);
                        var inviteBtnText = document.createElement('DIV');
                        inviteBtnText.className = 'live-editor-popup-sources-control-btn-text';
                        inviteBtnText.innerHTML = 'Invite';
                        inviteBtn.appendChild(inviteBtnText);
                        
                        inviteBtn.addEventListener('click', function () {
                            //invitePopup.show();
                            Q.Streams.invite(tool.roomStream.fields.publisherId, tool.roomStream.fields.name, {
                                appUrl: Q.url("meeting"),
                                title: 'Invite to Teleconference'
                            });
                        })

                        _sourceControlButtons.push({
                            name: 'invite',
                            buttonEl: inviteBtn
                        });

                        var shareBtn = document.createElement('DIV');
                        shareBtn.className = 'live-editor-popup-sources-control-btn live-editor-popup-sources-control-btn-share';
                        inviteBtnCon.appendChild(shareBtn);
                        var shareBtnIcon = document.createElement('DIV');
                        shareBtnIcon.className = 'live-editor-popup-sources-control-btn-icon';
                        shareBtnIcon.innerHTML = _streamingIcons.shareIcon;
                        shareBtn.appendChild(shareBtnIcon);
                        
                        shareBtn.addEventListener('click', function () {
                            if(tool.livestreamStream) {
                                Q.Streams.invite(tool.livestreamStream.fields.publisherId, tool.livestreamStream.fields.name, { title: 'Share Livestream' });
                            }
                        })
                        _sourceControlButtons.push({
                            name: 'invite',
                            buttonEl: shareBtn
                        });

                        updateSourceControlPanelButtons();
                        return dialogBody;
                    }

                    function updateSourceControlPanelButtons() {
                        log('updateSourceControlPanelButtons START', _selectedSource);
                        let selectedSourceInstance = _selectedSource ? _selectedSource.sourceInstance : null;
                        let indexOfSelectedSource = _sourcesList.findIndex(function(x){
                            return x == _selectedSource;
                        });
                        let numberOfSources = _sourcesList.length;
                        log('updateSourceControlPanelButtons', indexOfSelectedSource);

                        for (let i in _sourceControlButtons) {
                            let condition = true;
                            if(_sourceControlButtons[i].name == 'addSource') {

                            } else if(_sourceControlButtons[i].name == 'removeSource') {
                                condition = _selectedSource != null && _selectedSource.listType != 'allParticipants' && _selectedSource.listType != 'mainParticipantVideo';
                            } else if(_sourceControlButtons[i].name == 'moveForward') {
                                condition = _selectedSource != null 
                                && _selectedSource.listType != 'allParticipants' && _selectedSource.listType != 'mainParticipantVideo' 
                                && numberOfSources > 1 && indexOfSelectedSource != 0;
                            } else if(_sourceControlButtons[i].name == 'moveBackward') {
                                condition = _selectedSource != null 
                                && _selectedSource.listType != 'allParticipants' && _selectedSource.listType != 'mainParticipantVideo' 
                                && numberOfSources > 1 && indexOfSelectedSource != numberOfSources - 1;
                            } else if(_sourceControlButtons[i].name == 'sourceSettings') {
                                condition = _selectedSource != null && selectedSourceInstance;
                            }

                            if(!condition) {
                                if(!_sourceControlButtons[i].buttonEl.classList.contains('live-editor-inactive')) {
                                    _sourceControlButtons[i].buttonEl.classList.add('live-editor-inactive');
                                }
                            } else {
                                _sourceControlButtons[i].buttonEl.classList.remove('live-editor-inactive');
                            }

                        }
                    }

                    function createLayoutListDropDown() {
                        var listContainer = document.createElement('DIV');
                        listContainer.className = 'live-editor-layouts-list-con';

                        var listSelect = _layoutsListSelect = document.createElement('SELECT');
                        listSelect.className = 'live-editor-layouts-list-select';
                        listContainer.appendChild(listSelect);
                        listSelect.addEventListener('change', function (e) {
                            if(!_participantsList) return;
                            selectLayout(e.target.value);
                            _autoSwitchToScreensharingLayoutAndBack = false;
                        });

                        var tiledLayout = document.createElement('OPTION');
                        tiledLayout.value = 'tiledStreamingLayout';
                        tiledLayout.innerHTML = 'Tiled';
                        listSelect.appendChild(tiledLayout);

                        var fullScreenLayout = document.createElement('OPTION');
                        fullScreenLayout.value = 'screenSharing';
                        fullScreenLayout.innerHTML = 'Screen sharing';
                        listSelect.appendChild(fullScreenLayout);

                        var sideScreensharing = document.createElement('OPTION');
                        sideScreensharing.value = 'sideScreenSharing';
                        sideScreensharing.innerHTML = 'Side screen sharing';
                        listSelect.appendChild(sideScreensharing);

                        var audioOnlyLayout = document.createElement('OPTION');
                        audioOnlyLayout.value = 'audioOnly';
                        audioOnlyLayout.innerHTML = 'Audio only';
                        listSelect.appendChild(audioOnlyLayout);

                        var audioScreenLayout = document.createElement('OPTION');
                        audioScreenLayout.value = 'audioScreenSharing';
                        audioScreenLayout.innerHTML = 'Audio only + screen sharing';
                        listSelect.appendChild(audioScreenLayout);

                        var customSelect = _layoutsListCustomSelect = new CustomSelect(listSelect);
                        customSelect.customSelectDropDownEl.classList.add('live-editor-popup-layouts-list');
                        customSelect.syncOptionsList = function () {
                            log('syncOptionsList START');
                           
                            let originalSelect = customSelect.originalSelect;
                            let optionsNumber = originalSelect.options.length;
                            for(let e = customSelect.optionsList.length - 1; e >= 0; e--) {
                                let option = customSelect.optionsList[e];
                                let sourceIsRemoved = true;
                                for (let h = 0; h < optionsNumber; h++) {
                                    if(option.originalOptionEl == originalSelect.options[h]) {
                                        sourceIsRemoved = false;
                                        break;
                                    }
                                }
                                if(sourceIsRemoved) {
                                    if (option.customOptionEl != null && option.customOptionEl.parentElement != null) {
                                        option.customOptionEl.parentElement.removeChild(option.customOptionEl);
                                    }
                                    customSelect.optionsList.splice(e, 1);
                                }
                            }

                            for (let j = 0; j < optionsNumber; j++) {
                                let optionAlreadyExists = false;
                                for(let l in customSelect.optionsList) {
                                    if(customSelect.optionsList[l].originalOptionEl == originalSelect.options[j]) {
                                        optionAlreadyExists = customSelect.optionsList[l];
                                    }
                                }

                                if(optionAlreadyExists != false) {
                                    customSelect.customSelectListEl.appendChild(optionAlreadyExists.customOptionEl);
                                    continue;
                                } else if (optionAlreadyExists == false) {
                                    let optionElementCon = document.createElement("DIV");
                                    optionElementCon.className = 'live-editor-custom-select-option';
                                    optionElementCon.dataset.selectValue = originalSelect.options[j].value;
                                    customSelect.customSelectListEl.appendChild(optionElementCon);
    
                                    optionElementCon.addEventListener("click", function(e) {
                                        customSelect.selectOption(e.currentTarget);
                                    });
    
                                    let optionElementText = document.createElement("DIV");
                                    optionElementText.className = 'live-editor-custom-select-option-text';
                                    optionElementText.innerHTML = originalSelect.options[j].innerHTML;
                                    optionElementCon.appendChild(optionElementText);
    
                                    customSelect.optionsList.push({
                                        originalOptionEl: originalSelect.options[j],
                                        customOptionEl: optionElementCon,
                                        value: originalSelect.options[j].value
                                    });
                                }
                            }
                            
                        };

                        return listContainer;
                    }

                    function getSelectedLayout() {
                        if(!_layoutsListSelect) return 'tiledStreamingLayout';
                        return _layoutsListSelect.value;
                    }

                    function selectLayout(layoutKey) {
                        log('selectLayout START', layoutKey)
                        let teleconferenceSource = _participantsList.getWebrtcGroupInstance();
                        if(!teleconferenceSource) {
                            console.warn('No webrtc group (teleconference) source found')
                            return;
                        }
                       
                        _selectedLayout = layoutKey;

                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.updateWebRTCLayout(teleconferenceSource, layoutKey, null);
                    }

                    function getSourcesList() {
                        return _sourcesList;
                    }

                    function getWebrtcGroupListItem() {
                        return _participantsList.getWebrtcGroupListItem();
                    }

                    function showVisualSources() {
                        _sourcesListEl.innerHTML = '';
                        _sourcesListEl.appendChild(createSourcesList());
                        syncList();
                    }

                    function createSourcesCol() {
                        log('createSourcesCol');
                        if(_sceneSourcesColumnEl != null) return _sceneSourcesColumnEl;
                        
                        var sourcesColumnInner = document.createElement('DIV');
                        sourcesColumnInner.className = 'live-editor-popup-sources-inner';

                        var layoutsListDropDownCon = _layoutsListDropDownCon = document.createElement('DIV');
                        layoutsListDropDownCon.className = 'live-editor-popup-sources-layouts-con';
                        layoutsListDropDownCon.appendChild(createLayoutListDropDown());
                        sourcesColumnInner.appendChild(layoutsListDropDownCon);

                        var sourcesColumnBody = document.createElement('DIV');
                        sourcesColumnBody.className = 'live-editor-popup-sources-body';
                        sourcesColumnInner.appendChild(sourcesColumnBody);
                        _sourcesListEl = sourcesColumnBody;

                        _participantsList = new ParticipantsList();
                        _sourcesListEl.appendChild(_participantsList.getListContainer());
                        _sourcesListEl.appendChild(createSourcesList());
                        if(!_participantsList.getWebrtcGroupInstance()) {
                            _participantsList.addTeleconferenceSource();
                        }

                        _sceneSourcesColumnEl = sourcesColumnInner;
                        return sourcesColumnInner;
                    }

                    function update() {
                        syncList();

                        let videoChatGroupExists = checkIfOtherWebrtcVideoGroupExist();

                        var children = _addVisualSourceDropUpMenuEl.children;
                        for (var i = 0; i < children.length; i++) {
                            var menuItem = children[i];
                            if(menuItem.dataset.menuName != null && menuItem.dataset.menuName == 'add-conference' && videoChatGroupExists){
                                menuItem.style.opacity = 0.5;
                                menuItem.style.pointerEvents = 'none';
                            } else {
                                menuItem.style.opacity = '';
                                menuItem.style.pointerEvents = 'auto';
                            }
                            // Do stuff
                        }
                    }

                    function updateLocalControlsButtonsState() {
                        log('updateLocalControlsButtonsState');

                        for(let i in _sourcesList) {
                            if (_sourcesList[i]._sourceInstance.sourceType != 'webrtc' || !_sourcesList[i]._sourceInstance.participant.isLocal) continue;
                            if(!_sourcesList[i].cameraBtnIcon || !_sourcesList[i].microphoneBtnIcon) continue;
                            let listItemInstance = _sourcesList[i];
                            var localParticipant = tool.webrtcSignalingLib.localParticipant();
                            var localMediaControls = tool.webrtcSignalingLib.localMediaControls;

                            var enabledVideoTracks = localParticipant.tracks.filter(function (t) {
                                return t.kind == 'video' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                            }).length;

                            if (_webrtcUserInterface.getOptions().audioOnlyMode) {
                                log('updateLocalControlsButtonsState v1');
                                listItemInstance.cameraBtnIcon.innerHTML = _controlsToolIcons.moreOptions;
                            } else if (enabledVideoTracks == 0 && tool.webrtcSignalingLib.localParticipant().videoStream == null) {
                                log('updateLocalControlsButtonsState v2');
                                listItemInstance.cameraBtnIcon.innerHTML = _controlsToolIcons.disabledCamera;
                            } else if (!localMediaControls.cameraIsEnabled()) {
                                log('updateLocalControlsButtonsState v3');
                                listItemInstance.cameraBtnIcon.innerHTML = _controlsToolIcons.disabledCamera;
                            } else if (localMediaControls.cameraIsEnabled()) {
                                log('updateLocalControlsButtonsState v4');
                                listItemInstance.cameraBtnIcon.innerHTML = _controlsToolIcons.camera;
                            }

                            var enabledAudioTracks = localParticipant.tracks.filter(function (t) {
                                return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
                            }).length;

                            if (enabledAudioTracks == 0 && tool.webrtcSignalingLib.localParticipant().audioStream == null) {
                                log('updateLocalControlsButtonsState a1');
                                listItemInstance.microphoneBtnIcon.innerHTML = _controlsToolIcons.disabledMicrophone;
                            } else if (!localMediaControls.micIsEnabled()) {
                                log('updateLocalControlsButtonsState a2');
                                listItemInstance.microphoneBtnIcon.innerHTML = _controlsToolIcons.disabledMicrophone;
                            } else if (localMediaControls.micIsEnabled()) {
                                log('updateLocalControlsButtonsState a3');
                                listItemInstance.microphoneBtnIcon.innerHTML = _controlsToolIcons.microphone;
                            }
                        }
                    }

                    function getSelectedSource() {
                        return _selectedSource;
                    }

                    var addVideoPopup = (function () {
                        var _dialogEl = null;
                        var _popupDialog = null;

                        log('addVideoPopup')
                
                        var boxContent = _dialogEl = document.createElement('DIV');
                        boxContent.className = 'live-editor-dialog-window-content live-editor-dialog-window-add-file';

                        var boxContentText = document.createElement('DIV');
                        boxContentText.innerHTML = 'Please choose file from your computer or enter the link.';  
                        boxContent.appendChild(boxContentText);

                        var videoItemInput = document.createElement('INPUT');
                        videoItemInput.className = 'live-editor-dialog-window-add-file-file';
                        videoItemInput.type = 'file';
                        videoItemInput.name = 'fileVideoSource';
                        videoItemInput.accept = 'video/mp4, video/*';
                        boxContent.appendChild(videoItemInput);

                        videoItemInput.addEventListener('change', function (e) {
                            addVideoSource(e);
                            hideDialog();
                        })

                        var boxContentText2=document.createElement('DIV');
                        boxContentText2.innerHTML = 'OR';
                        boxContent.appendChild(boxContentText2);

                        var linkInput = document.createElement('INPUT');
                        linkInput.className = 'live-editor-dialog-window-add-file-link';
                        linkInput.type = 'text';
                        linkInput.placeholder = 'Enter the link';
                        linkInput.name = 'fileImageLink';
                        boxContent.appendChild(linkInput);

                        var dialogButtonsCon = document.createElement('DIV');
                        dialogButtonsCon.className = 'live-editor-dialog-window-add-file-buttons';
                        boxContent.appendChild(dialogButtonsCon);

                        var dialogOkButton = document.createElement('BUTTON');
                        dialogOkButton.className = 'live-editor-dialog-window-add-file-ok';
                        dialogOkButton.innerHTML = 'OK';
                        dialogButtonsCon.appendChild(dialogOkButton);

                        dialogOkButton.addEventListener('click', function (e) {
                            addVideoSource(linkInput.value);
                            hideDialog();
                        })

                        function showDialog(e) {
                            videoItemInput.value = '';
                            linkInput.value = '';
                            if(_popupDialog && !_popupDialog.active) {
                                _popupDialog.show();
                                return;
                            } else if(_popupDialog) {
                                return;
                            }
                            _popupDialog = new SimpleDialog({
                                content: _dialogEl, 
                                rectangleToShowIn: null,
                                title: 'Add video source'
                            });
                        }

                        function hideDialog() {
                            if(_popupDialog) _popupDialog.hide();
                        }

                        return {
                            hideDialog: hideDialog,
                            showDialog: showDialog
                        }
                    }())

                    var addImagePopup = (function () {
                        var _dialogEl = null;
                        var _popupDialog = null;

                        log('addImagePopup')
                        
                        var boxContent = _dialogEl = document.createElement('DIV');
                        boxContent.className = 'live-editor-dialog-window-content live-editor-dialog-window-add-file';
                        var boxContentText = document.createElement('DIV');
                        boxContentText.innerHTML = 'Please choose file from your computer or enter the link.';
                        boxContent.appendChild(boxContentText);

                        var imageItemInput = document.createElement('INPUT');
                        imageItemInput.className = 'live-editor-dialog-window-add-file-file';
                        imageItemInput.type = 'file';
                        imageItemInput.name = 'fileImageSource';
                        imageItemInput.accept = 'image/png, image/jpeg'
                        boxContent.appendChild(imageItemInput);

                        imageItemInput.addEventListener('change', function (e) {
                            addImageSource(e);
                            hideDialog();
                        })

                        var boxContentText2=document.createElement('DIV');
                        boxContentText2.innerHTML = 'OR';
                        boxContent.appendChild(boxContentText2);

                        var imageItemLinkInput = document.createElement('INPUT');
                        imageItemLinkInput.className = 'live-editor-dialog-window-add-file-link';
                        imageItemLinkInput.type = 'text';
                        imageItemLinkInput.placeholder = 'Enter the link';
                        imageItemLinkInput.name = 'fileImageLink';
                        boxContent.appendChild(imageItemLinkInput);

                        var dialogButtonsCon = document.createElement('DIV');
                        dialogButtonsCon.className = 'live-editor-dialog-window-add-file-buttons';
                        boxContent.appendChild(dialogButtonsCon);

                        var dialogOkButton = document.createElement('BUTTON');
                        dialogOkButton.className = 'live-editor-dialog-window-add-file-ok';
                        dialogOkButton.innerHTML = 'OK';
                        dialogButtonsCon.appendChild(dialogOkButton);

                        dialogOkButton.addEventListener('click', function (e) {
                            addImageSource(imageItemLinkInput.value);
                            hideDialog();
                        })

                        function showDialog(e) {
                            imageItemInput.value = '';
                            imageItemLinkInput.value = '';
                            if(_popupDialog && !_popupDialog.active) {
                                _popupDialog.show();
                                return;
                            } else if(_popupDialog) {
                                return;
                            }
                            _popupDialog = new SimpleDialog({
                                content: _dialogEl, 
                                rectangleToShowIn: null,
                                title: 'Add image source'
                            });
                        }

                        function hideDialog() {
                            if(_popupDialog) _popupDialog.hide();
                        }

                        return {
                            hideDialog: hideDialog,
                            showDialog: showDialog
                        }
                    }())

                    var addCameraPopup = (function () {
                        var state = {
                            _mediaStream: null,
                            _source: null,
                            rawVideoInputDevices: [],
                            devicesList: [],
                            constraints: { audio: false, video: { width: { ideal: 4096 }, height: { ideal: 2160 } } },
                            set mediaStream(value) {
                                this._mediaStream = value;
        
                                if (_okButtonEl) {
                                    _okButtonEl.classList.remove('live-editor-button-inactive');
                                }
                            },
                            get mediaStream() { return this._mediaStream; },
                            set source(source) {
                                this.mediaStream = source.sourceInstance.mediaStream;
                                this._source = source;
                                if (_nameInputEl) {
                                    _nameInputEl.value = source.sourceInstance.name;
                                }
                            },
                            get source() { return this._source; },
                        }
                        var options = null;
                        var _popupDialog = null;
                        var _dialogueEl = null;
                        var _devicesListEl = null;
                        var _cameraPreviewParentEl = null;
                        var _previewVideoEl = null;
                        var _nameInputEl = null;
                        var _okButtonEl = null;
                        var _noticesEl = null;
        
                        log('addCameraPopup')
        
                        function setDefaultSourceName() {
                            let camerasNumber = 0;
                            for (let i in _sourcesList) {
                                if (_sourcesList[i].sourceInstance.sourceType == 'videoInput') {
                                    camerasNumber++;
                                }
                            }
                            sourceNameInput.value = 'Camera ' + (camerasNumber + 1);
        
                        }
        
                        function updateDevicesList() {
                            for (let l in state.devicesList) {
                                if (state.devicesList[l].optionEl && state.devicesList[l].optionEl.parentElement) {
                                    state.devicesList[l].optionEl.parentElement.removeChild(state.devicesList[l].optionEl);
                                }
                            }
                            state.devicesList = [];
                            for (let i in state.rawVideoInputDevices) {
                                let device = state.rawVideoInputDevices[i];
                                let option = document.createElement('OPTION');
                                option.value = device.deviceId
                                option.innerHTML = device.label
                                _devicesListEl.appendChild(option);
                                state.devicesList.push({
                                    optionEl: option,
                                    id: device.deviceId,
                                    label: device.label
                                });
                            }
                        }
        
                        function updatePreview() {
                            if (_previewVideoEl != null) {
                                _previewVideoEl.srcObject = state.mediaStream;
                                _previewVideoEl.play();
                                return;
                            }
                            var video = _previewVideoEl = document.createElement('VIDEO');
                            video.srcObject = state.mediaStream;
                            video.muted = true;
                            video.play();
                            _cameraPreviewParentEl.appendChild(video);
                        }
                        function getVideoInputAfterSelectedOptions() {
                            if (state.mediaStream != null && !options.source) {
                                let tracks = state.mediaStream.getTracks();
                                tracks.forEach(function (track) {
                                    track.stop();
                                });
                            }
        
                            let selectedDeviceId = getSelectedCameraOption();
                            state.constraints.video.deviceId = { exact: selectedDeviceId };
    
                            delete state.constraints.video.width;
                            delete state.constraints.video.height;
        
                            delete state.constraints.video.frameRate;
        
                            log('getVideoInputAfterSelectedOptions', state.constraints.video);
                            return navigator.mediaDevices.getUserMedia(state.constraints)
                                .then(function (mediaStream) {
                                    state.mediaStream = mediaStream;
                                })
                                .catch(onErrorHandler);
                        }
        
                        function updateSelectedOption() {
                            log('updateSelectedOption');
                            if (state.mediaStream) {
                                let deviceId = state.mediaStream.getVideoTracks()[0].getSettings().deviceId;
                                for (let i in state.devicesList) {
                                    if (state.devicesList[i].id == deviceId) {
                                        log('updateSelectedOption: selected');
                                        state.devicesList[i].optionEl.selected = true;
                                    }
                                }
                            }
                        }
        
                        function getSelectedCameraOption() {
                            let selectedCameraId = _devicesListEl.value;
                            if (!selectedCameraId || selectedCameraId == '') {
                                selectedCameraId = state.devicesList[0].id;
                            }
                            return selectedCameraId;
                        }
        
                        function loadInputDevicesAndGetStream() {
                            state.rawVideoInputDevices = [];
                            log('loadInputDevicesAndGetStream', state);
                            return navigator.mediaDevices.getUserMedia(state.constraints)
                                .then(function (mediaStream) {
                                    state.mediaStream = mediaStream;
                                    log('loadInputDevicesAndGetStream 2', state, state.mediaStream);

                                    return navigator.mediaDevices.enumerateDevices()
                                        .then(function (devices) {
                                            devices.forEach(function (device) {
                                                if (device.kind == 'videoinput') state.rawVideoInputDevices.push(device);
                                            });
                                        })
                                        .catch(onErrorHandler);
                                })
                                .catch(onErrorHandler);
        
        
                        }
        
                        function loadDialog() {
                            if (state.rawVideoInputDevices.length != 0) {
                                if (options.source != null) {
                                    state.source = options.source;
                                    updatePreview();
                                    updateSelectedOption();
                                } else {
                                    state.mediaStream = null;
                                    state._source = null;
                                    state.constraints = { audio: false, video: { width: { ideal: 4096 }, height: { ideal: 2160 } } };
                                    loadInputDevicesAndGetStream().then(function () {
                                        updateDevicesList();
                                        updatePreview();
                                        updateSelectedOption();
                                        setDefaultSourceName();
                                    })
                                }
        
                            } else {
                                //load dialogue first time
                                return navigator.mediaDevices.enumerateDevices()
                                    .then(function (devices) {
                                        let videoInputDevices = 0;
                                        devices.forEach(function (device) {
                                            if (device.kind == 'videoinput') videoInputDevices++
                                        });
                                        if (videoInputDevices != 0) {
                                            loadInputDevicesAndGetStream().then(function () {
                                                updateDevicesList();
                                                updatePreview();
                                                updateSelectedOption();
                                                setDefaultSourceName();
                                            })
                                        } else {
                                            showNotice('No video input devices detected');
                                        }
                                    })
                                    .catch(onErrorHandler);
        
                            }
                        }
        
                        function showDialog(optns) {
                            options = optns;
                            if(_popupDialog && !_popupDialog.active) {
                                _popupDialog.show();
                                return;
                            } else if(_popupDialog) {
                                return;
                            }
                            _popupDialog = new SimpleDialog({
                                content: _dialogueEl, 
                                rectangleToShowIn: null,
                                className: 'live-editor-popup-add-media-input',
                                title: 'Add camera source'
                            });

                            loadDialog();
                        }
        
                        function onErrorHandler(error) {
                            log(error);
                            _noticesEl.innerHTML = error.message;
                        }
        
                        function showNotice(notice) {
                            _noticesEl.innerHTML = notice;
                        }
        
                        function hideDialog(okBtnClicked) {        
                            if (!okBtnClicked && state.mediaStream != null && !options.source) {
        
                                let tracks = state.mediaStream.getTracks();
        
                                for (let t in tracks) {
                                    tracks[t].stop();
                                }
                            }
                            
                            if(_popupDialog) _popupDialog.hide();
                            
                        }
                    
                        var boxContent = _dialogueEl = document.createElement('DIV');
                        boxContent.className = 'live-editor-dialog-window-content';
                        var cameraPreviewBox = document.createElement('DIV');
                        cameraPreviewBox.className = 'live-editor-dialog-camera-preview';
                        boxContent.appendChild(cameraPreviewBox);

                        var cameraPreviewInner = _cameraPreviewParentEl = document.createElement('DIV');
                        cameraPreviewInner.className = 'live-editor-dialog-camera-preview-inner';
                        cameraPreviewBox.appendChild(cameraPreviewInner);

                        var cameraPreviewNotices = _noticesEl = document.createElement('DIV');
                        cameraPreviewNotices.className = 'live-editor-dialog-notices';
                        cameraPreviewBox.appendChild(cameraPreviewNotices);

                        var addSourceControls = document.createElement('DIV');
                        addSourceControls.className = 'live-editor-dialog-add-source-controls';
                        boxContent.appendChild(addSourceControls);

                        var addSourceControlsInner = document.createElement('DIV');
                        addSourceControlsInner.className = 'live-editor-dialog-add-source-controls-inner';
                        addSourceControls.appendChild(addSourceControlsInner);
        
                        var videoInputDevicesCon = document.createElement('DIV');
                        videoInputDevicesCon.className = 'live-editor-dialog-add-source-controls-item live-editor-dialog-add-source-controls-devices';
                        addSourceControlsInner.appendChild(videoInputDevicesCon);

                        var addSourceControlsDevicesCaption = document.createElement('DIV');
                        addSourceControlsDevicesCaption.className = 'live-editor-dialog-add-source-controls-caption';
                        addSourceControlsDevicesCaption.innerHTML = 'Devices ';
                        videoInputDevicesCon.appendChild(addSourceControlsDevicesCaption);

                        var addSourceControlsDevicesReload = document.createElement('DIV');
                        addSourceControlsDevicesReload.className = 'live-editor-dialog-add-source-controls-reload';
                        addSourceControlsDevicesReload.innerHTML = _streamingIcons.reload;
                        addSourceControlsDevicesCaption.appendChild(addSourceControlsDevicesReload);

                        var videoInputDevicesListCon = document.createElement('DIV');
                        videoInputDevicesListCon.className = 'live-editor-dialog-add-source-controls-config live-editor-dialog-add-source-list-con';
                        videoInputDevicesCon.appendChild(videoInputDevicesListCon);

                        var videoInputDevicesList = _devicesListEl = document.createElement('SELECT');
                        videoInputDevicesList.className = 'live-editor-dialog-add-source-devices-list';
                        videoInputDevicesListCon.appendChild(videoInputDevicesList);
        
                        var sourceNameCon = document.createElement('DIV');
                        sourceNameCon.className = 'live-editor-dialog-add-source-controls-item live-editor-dialog-add-source-controls-name';
                        addSourceControlsInner.appendChild(sourceNameCon);

                        var sourceNameCaption = document.createElement('DIV');
                        sourceNameCaption.className = 'live-editor-dialog-add-source-controls-caption';
                        sourceNameCaption.innerHTML = 'Name';
                        sourceNameCon.appendChild(sourceNameCaption);

                        var sourceNameInputCon = document.createElement('DIV');
                        sourceNameInputCon.className = 'live-editor-dialog-add-source-controls-config live-editor-dialog-add-source-name-con';
                        sourceNameCon.appendChild(sourceNameInputCon);
                        
                        var sourceNameInput = _nameInputEl = document.createElement('INPUT');
                        sourceNameInput.className = 'live-editor-dialog-add-source-name-input';
                        sourceNameInput.type = 'text';
                        sourceNameInputCon.appendChild(sourceNameInput);
        
                        var sourceTypeCon = document.createElement('DIV');
                        sourceTypeCon.className = 'live-editor-dialog-add-source-controls-item live-editor-dialog-add-source-controls-type';  
                        addSourceControlsInner.appendChild(sourceTypeCon);
                        
                        var sourceTypeCaption = document.createElement('DIV');
                        sourceTypeCaption.className = 'live-editor-dialog-add-source-controls-caption';
                        sourceTypeCaption.innerHTML = '';
                        sourceTypeCon.appendChild(sourceTypeCaption);
                        
                        var sourceTypeInputCon = document.createElement('DIV');
                        sourceTypeInputCon.className = 'live-editor-dialog-add-source-controls-config live-editor-dialog-add-source-type-con';
                        sourceTypeCon.appendChild(sourceTypeInputCon);
                        
                        var separateSourceTypeLabel = document.createElement('LABEL');
                        separateSourceTypeLabel.className = 'live-editor-dialog-add-source-type-label';
                        sourceTypeInputCon.appendChild(separateSourceTypeLabel);
                        
                        var separateSourceTypeInput = document.createElement('INPUT');
                        separateSourceTypeInput.className = 'live-editor-dialog-add-source-type-input';
                        separateSourceTypeInput.name = 'live-editor-video_input_type';
                        separateSourceTypeInput.type = 'radio';
                        separateSourceTypeInput.value = 'separate';
                        separateSourceTypeInput.checked = 'true';
                        separateSourceTypeLabel.appendChild(separateSourceTypeInput);
                        
                        var separateSourceTypeLabelText = document.createElement('SPAN');
                        separateSourceTypeLabelText.className = 'live-editor-dialog-add-source-type-label-text';
                        separateSourceTypeLabelText.innerHTML = 'Visible only in livestream';
                        separateSourceTypeLabel.appendChild(separateSourceTypeLabelText);
                        
                        var webrtcSourceTypeLabel = document.createElement('LABEL');
                        webrtcSourceTypeLabel.className = 'live-editor-dialog-add-source-type-label';
                        sourceTypeInputCon.appendChild(webrtcSourceTypeLabel);
                        
                        var webrtcSourceTypeInput = document.createElement('INPUT');
                        webrtcSourceTypeInput.className = 'live-editor-dialog-add-source-type-input';
                        webrtcSourceTypeInput.name = 'live-editor-video_input_type';
                        webrtcSourceTypeInput.type = 'radio';
                        webrtcSourceTypeInput.value = 'webrtc';
                        webrtcSourceTypeLabel.appendChild(webrtcSourceTypeInput);
                        
                        var webrtcSourceTypeLabelText = document.createElement('SPAN');
                        webrtcSourceTypeLabelText.className = 'live-editor-dialog-add-source-type-label-text';
                        webrtcSourceTypeLabelText.innerHTML = 'Visible to chat and in a livestream';
                        webrtcSourceTypeLabel.appendChild(webrtcSourceTypeLabelText);
        
                        var dialogButtonsCon = document.createElement('DIV');
                        dialogButtonsCon.className = 'live-editor-dialog-add-source-buttons-con';
                        addSourceControls.appendChild(dialogButtonsCon);
                        var okButton = _okButtonEl = document.createElement('BUTTON');
                        okButton.innerHTML = 'OK';
                        okButton.className = 'live-editor-dialog-add-source-ok-btn live-editor-button live-editor-button-inactive';
                        dialogButtonsCon.appendChild(okButton);
        
                        _devicesListEl.addEventListener('change', function (e) {
                            getVideoInputAfterSelectedOptions().then(function () {
                                updatePreview();
                            });
                        })
        
                        addSourceControlsDevicesReload.addEventListener('click', function (e) {
                            if (state.mediaStream != null && !options.source) {
                                let tracks = state.mediaStream.getTracks();
                                for (let t in tracks) {
                                    tracks[t].stop();
                                }
                            }
                            loadDialog();
                        })
        
                        okButton.addEventListener('click', function (e) {
                            let width = 'default', height = 'default', frameRate = 'default';
                            if (state.constraints.video.width != null) {
                                if (typeof state.constraints.video.width == 'object') {
                                    width = state.constraints.video.width.exact;
                                } else {
                                    width = state.constraints.video.width;
                                }
                            }
                            if (state.constraints.video.height != null) {
                                if (typeof state.constraints.video.height == 'object') {
                                    height = state.constraints.video.height.exact;
                                } else {
                                    height = state.constraints.video.height;
                                }
                            }
                            if (state.constraints.video.frameRate != null) {
                                if (typeof state.constraints.video.frameRate == 'object') {
                                    frameRate = state.constraints.video.frameRate.exact;
                                } else {
                                    frameRate = state.constraints.video.frameRate;
                                }
                            }
                            log('onok state', state.mediaStream);
                            if (options && options.onOk != null) {
                                let selectedDeviceId = getSelectedCameraOption();

                                options.onOk({
                                    stream: state.mediaStream,
                                    name: sourceNameInput.value,
                                    originalSize: { width: width, height: height },
                                    frameRate: frameRate,
                                    deviceId: selectedDeviceId,
                                    sourceType: separateSourceTypeInput.checked ? 'separate' : 'webrtc'
                                });
                            }
                            hideDialog(true);
                        })
        
                        return {
                            hideDialog: hideDialog,
                            showDialog: showDialog,
                        }
                    }())

                    /*var addTeleconferencePopup = (function () {
                        var _dialogEl = null;
                        var _isHidden = true;

                        log('addTeleconferencePopup')
                        var dialog=document.createElement('DIV');
                        dialog.className = 'live-editor-dialog-box live-editor-dialog-box-add-new-s live-editor-popup-add-tc live-editor-hidden';
                        _dialogEl = dialog;
                        var dialogTitle=document.createElement('H3');
                        dialogTitle.innerHTML = 'Add teleconference';
                        dialogTitle.className = 'live-editor-dialog-header Q_dialog_title';

                        var dialogInner=document.createElement('DIV');
                        dialogInner.className = 'live-editor-dialog-inner';
                        var boxContent=document.createElement('DIV');
                        boxContent.className = 'live-editor-popup-streaming-box live-editor-popup-box';

                        var sourceNameCon = document.createElement('DIV');
                        sourceNameCon.className = 'live-editor-popup-sources-add-source-name-con';
                        var sourceName = document.createElement('INPUT');
                        sourceName.className = 'live-editor-popup-sources-add-source-name';
                        sourceName.type = 'text';
                        sourceName.placeholder = 'Teleconference Source Name';
                        sourceName.value = 'Video Chat';
                        sourceName.name = 'sourceName';
                        sourceNameCon.appendChild(sourceName);

                        boxContent.appendChild(sourceNameCon);

                        var close=document.createElement('div');
                        close.className = 'live-editor-close-dialog-sign';
                        close.style.backgroundImage = 'url("' + Q.url("{{Q}}/img/apply.png") + '"';
                        close.style.backgroundRepeat = 'no-repeat';
                        close.style.backgroundSize = 'cover';
                        close.addEventListener('click', function() {
                            if(sourceName.value != '') {
                                var val = sourceName.value;
                                addTeleconferenceSource(val);
                                hideDialog();
                                sourceName.value = '';
                            }
                        });
                        dialogInner.appendChild(dialogTitle);

                        dialog.appendChild(close);
                        dialogInner.appendChild(boxContent);
                        dialog.appendChild(dialogInner);

                        _webrtcUserInterface.roomsMediaContainer().appendChild(dialog);
                        setTimeout(function () {
                            Q.activate(
                                Q.Tool.setUpElement(
                                    dialog, // or pass an existing element
                                    "Q/resize",
                                    {
                                        move: true,
                                        activateOnElement: dialogTitle,
                                        resize: false,
                                        active: true,
                                        moveWithinArea: 'window',
                                    }
                                ),
                                {},
                                function () {

                                }
                            );
                        }, 3000)

                        var controlsRect = _controlsTool.controlBar.getBoundingClientRect();
                        var dialogWidth = 400;
                        dialog.style.width = dialogWidth + 'px';
                        log('dialogWidth', dialogWidth);
                        if(Q.info.isMobile) {
                            dialog.style.left = (window.innerWidth / 2) - (dialogWidth / 2) + 'px';
                            dialog.style.bottom = (controlsRect.height + 10) + 'px';
                        } else {
                            dialog.style.left = (window.innerWidth / 2) - (dialogWidth / 2) + 'px';
                            dialog.style.top = (window.innerHeight/ 2 - 100) + 'px';
                        }

                        close.addEventListener('click', function () {
                            hideDialog();
                        });

                        function showDialog(e) {
                            if(_dialogEl.classList.contains('live-editor-hidden')) {
                                _dialogEl.classList.remove('live-editor-hidden');
                                var _clientX = e.clientX;
                                var _clientY = e.clientY;

                                _isHidden = false;

                                var controlsRect = _controlsTool.controlBar.getBoundingClientRect();
                                if(Q.info.isMobile) {
                                    dialog.style.left = (window.innerWidth / 2) - (dialogWidth / 2) + 'px';
                                    dialog.style.top = (controlsRect.height + 10) + 'px';
                                } else {
                                    dialog.style.left = (_clientX + 50) + 'px';
                                    dialog.style.top = (_clientY - 200) + 'px';
                                }
                            }
                        }

                        function hideDialog() {
                            if(!_dialogEl.classList.contains('live-editor-hidden')){
                                _dialogEl.classList.add('live-editor-hidden');
                                _isHidden = true;
                            }
                        }

                        function toggle(e) {
                            if(_isHidden) {
                                showDialog(e);
                            } else hideDialog(e);
                        }

                        return {
                            hideDialog: hideDialog,
                            showDialog: showDialog,
                            toggle: toggle
                        }
                    }())*/

                    var addAudioPopup = (function () {
                        var _popupDialog = null;
                        var _dialogEl = null;

                        log('addAudioPopup')
                        
                        var boxContent = _dialogEl = document.createElement('DIV');
                        boxContent.className = 'live-editor-dialog-window-content live-editor-dialog-window-add-file';
                        var boxContentText = document.createElement('DIV');
                        boxContentText.innerHTML = 'Please choose file from your computer or enter the link.';
                        boxContent.appendChild(boxContentText);
                        
                        var videoItemInput = document.createElement('INPUT');
                        videoItemInput.className = 'live-editor-dialog-window-add-file-file';
                        videoItemInput.type = 'file';
                        videoItemInput.name = 'fileAudioSource';
                        videoItemInput.accept = 'audio/mp3, audio/*'
                        boxContent.appendChild(videoItemInput);

                        videoItemInput.addEventListener('change', function (e) {
                            addAudioSource(e);
                            hideDialog();
                        })

                        var boxContentText2=document.createElement('DIV');
                        boxContentText2.innerHTML = 'OR';
                        boxContent.appendChild(boxContentText2);
                        
                        var linkInput = document.createElement('INPUT');
                        linkInput.className = 'live-editor-dialog-window-add-file-file';
                        linkInput.type = 'text';
                        linkInput.placeholder = 'Enter the link';
                        linkInput.name = 'fileImageLink';
                        boxContent.appendChild(linkInput);

                        var dialogButtonsCon = document.createElement('DIV');
                        dialogButtonsCon.className = 'live-editor-dialog-window-add-file-buttons';
                        boxContent.appendChild(dialogButtonsCon);

                        var dialogOkButton = document.createElement('BUTTON');
                        dialogOkButton.className = 'live-editor-dialog-window-add-file-ok';
                        dialogOkButton.innerHTML = 'OK';
                        dialogButtonsCon.appendChild(dialogOkButton);

                        dialogOkButton.addEventListener('click', function (e) {
                            addAudioSource(linkInput.value);
                            hideDialog();
                        })

                        function showDialog(e) {
                            videoItemInput.value = '';
                            linkInput.value = '';
                            if(_popupDialog && !_popupDialog.active) {
                                _popupDialog.show();
                                return;
                            } else if(_popupDialog) {
                                return;
                            }
                            _popupDialog = new SimpleDialog({
                                content: _dialogEl, 
                                rectangleToShowIn: null,
                                className: 'live-editor-popup-add-audio',
                                title: 'Add audio source'
                            });
                        }

                        function hideDialog() {
                            if(_popupDialog) _popupDialog.hide();
                        }

                        return {
                            hideDialog: hideDialog,
                            showDialog: showDialog
                        }
                    }())

                    var addMicrophoneAudioPopup = (function () {
                        var state = {
                            _mediaStream: null,
                            _source: null,
                            rawAudioInputDevices: [],
                            devicesList: [],
                            constraints: { audio: true, video: false },
                            set mediaStream(value) {
                                this._mediaStream = value;
        
                                if (_okButtonEl) {
                                    _okButtonEl.classList.remove('live-editor-button-inactive');
                                }
                            },
                            get mediaStream() { return this._mediaStream; },
                            set source(source) {
                                this.mediaStream = source.sourceInstance.mediaStream;
                                this._source = source;
                                if (_nameInputEl) {
                                    _nameInputEl.value = source.sourceInstance.name;
                                }
                            },
                            get source() { return this._source; },
                        }
                        var options = null;
                        var _popupDialog = null;
                        var _dialogueEl = null;
                        var _devicesListEl = null;
                        var _nameInputEl = null;
                        var _okButtonEl = null;
                        var _noticesEl = null;
        
                        log('addMicrophoneAudioPopup')
        
                        function setDefaultSourceName() {
                            let micsNumber = 0;
                            for (let i in _sourcesList) {
                                if (_sourcesList[i].sourceInstance.sourceType == 'audioInput') {
                                    micsNumber++;
                                }
                            }
                            sourceNameInput.value = 'Audio Input ' + (micsNumber + 1);
        
                        }
        
                        function updateDevicesList() {
                            log('addMicrophoneAudioPopup: updateDevicesList');
                            for (let l in state.devicesList) {
                                if (state.devicesList[l].optionEl && state.devicesList[l].optionEl.parentElement) {
                                    state.devicesList[l].optionEl.parentElement.removeChild(state.devicesList[l].optionEl);
                                }
                            }
                            state.devicesList = [];
                            for (let i in state.rawAudioInputDevices) {
                                let device = state.rawAudioInputDevices[i];
                                let option = document.createElement('OPTION');
                                option.value = device.deviceId
                                option.innerHTML = device.label
                                _devicesListEl.appendChild(option);
                                state.devicesList.push({
                                    optionEl: option,
                                    id: device.deviceId,
                                    label: device.label
                                });
                            }
                        }
        
                        function getAudioInputAfterSelectedOptions() {
                            if (state.mediaStream != null && !options.source) {
                                let tracks = state.mediaStream.getTracks();
                                tracks.forEach(function (track) {
                                    track.stop();
                                });
                            }
        
                            let selectedDeviceId = getSelectedMicOption();
                            state.constraints.video.deviceId = { exact: selectedDeviceId };
    
                            return navigator.mediaDevices.getUserMedia(state.constraints)
                                .then(function (mediaStream) {
                                    state.mediaStream = mediaStream;
                                })
                                .catch(onErrorHandler);
                        }
        
                        function updateSelectedOption() {
                            log('updateSelectedOption');
                            if (state.mediaStream) {
                                let deviceId = state.mediaStream.getAudioTracks()[0].getSettings().deviceId;
                                for (let i in state.devicesList) {
                                    if (state.devicesList[i].id == deviceId) {
                                        log('updateSelectedOption: selected');
                                        state.devicesList[i].optionEl.selected = true;
                                    }
                                }
                            }
                        }
        
                        function getSelectedMicOption() {
                            let selectedCameraId = _devicesListEl.value;
                            if (!selectedCameraId || selectedCameraId == '') {
                                selectedCameraId = state.devicesList[0].id;
                            }
                            return selectedCameraId;
                        }
        
                        function loadInputDevicesAndGetStream() {
                            state.rawAudioInputDevices = [];
                            log('loadInputDevicesAndGetStream', state.constraints.video.frameRate);
                            return navigator.mediaDevices.getUserMedia(state.constraints)
                                .then(function (mediaStream) {
                                    state.mediaStream = mediaStream;
                                    return navigator.mediaDevices.enumerateDevices()
                                        .then(function (devices) {
                                            devices.forEach(function (device) {
                                                if (device.kind == 'audioinput') state.rawAudioInputDevices.push(device);
                                            });
                                        })
                                        .catch(onErrorHandler);
                                })
                                .catch(onErrorHandler);
        
        
                        }
        
                        function loadDialog() {
                            if (state.rawAudioInputDevices.length != 0) {
                                if (options.source != null) {
                                    state.source = options.source;
                                    updateSelectedOption();
                                } else {
                                    loadInputDevicesAndGetStream().then(function () {
                                        updateDevicesList();
                                        updateSelectedOption();
                                        setDefaultSourceName();
                                    })
                                }
        
                            } else {
                                //load dialogue first time
                                return navigator.mediaDevices.enumerateDevices()
                                    .then(function (devices) {
                                        let audioInputDevices = 0;
                                        devices.forEach(function (device) {
                                            if (device.kind == 'audioinput') audioInputDevices++
                                        });
                                        if (audioInputDevices != 0) {
                                            loadInputDevicesAndGetStream().then(function () {
                                                updateDevicesList();
                                                updateSelectedOption();
                                                setDefaultSourceName();
                                            })
                                        } else {
                                            showNotice('No audio input devices detected');
                                        }
                                    })
                                    .catch(onErrorHandler);
        
                            }
                        }
        
                        function showDialog(optns) {
                            options = optns;
                            if(_popupDialog && !_popupDialog.active) {
                                _popupDialog.show();
                                return;
                            } else if(_popupDialog) {
                                return;
                            }
                            _popupDialog = new SimpleDialog({
                                content: _dialogueEl, 
                                rectangleToShowIn: null,
                                className: 'live-editor-popup-add-media-input live-editor-popup-add-audio-input',
                                title: 'Add input audio source'
                            });

                            loadDialog();
                        }
        
                        function onErrorHandler(error) {
                            log(error);
                            //_noticesEl.innerHTML = error.message;
                        }
        
                        function showNotice(notice) {
                            log('addMicrophoneAudioPopup', notice);
                            //_noticesEl.innerHTML = notice;
                        }
        
                        function hideDialog(okBtnClicked) {
        
                            if (!okBtnClicked && state.mediaStream != null && !options.source) {
        
                                let tracks = state.mediaStream.getTracks();
        
                                for (let t in tracks) {
                                    tracks[t].stop();
                                }
                            }
                            if(_popupDialog) _popupDialog.hide();
        
                            state.mediaStream = null;
                            state._source = null;
                            state.constraints = { audio: true, video: false};
                        }
                        
                        var boxContent = _dialogueEl = document.createElement('DIV');
                        boxContent.className = 'live-editor-dialog-window-content live-editor-dialog-window-add-mic';
        
                        var addSourceControls = document.createElement('DIV');
                        addSourceControls.className = 'live-editor-dialog-add-source-controls';
                        boxContent.appendChild(addSourceControls);
                        
                        var addSourceControlsInner = document.createElement('DIV');
                        addSourceControlsInner.className = 'live-editor-dialog-add-source-controls-inner';
                        addSourceControls.appendChild(addSourceControlsInner);

                        var audioInputDevicesCon = document.createElement('DIV');
                        audioInputDevicesCon.className = 'live-editor-dialog-add-source-controls-item live-editor-dialog-add-source-controls-devices';
                        addSourceControlsInner.appendChild(audioInputDevicesCon);
                        
                        var addSourceControlsDevicesCaption = document.createElement('DIV');
                        addSourceControlsDevicesCaption.className = 'live-editor-dialog-add-source-controls-caption';
                        addSourceControlsDevicesCaption.innerHTML = 'Devices ';
                        audioInputDevicesCon.appendChild(addSourceControlsDevicesCaption);
                        
                        var addSourceControlsDevicesReload = document.createElement('DIV');
                        addSourceControlsDevicesReload.className = 'live-editor-dialog-add-source-controls-reload';
                        addSourceControlsDevicesReload.innerHTML = _streamingIcons.reload;
                        addSourceControlsDevicesCaption.appendChild(addSourceControlsDevicesReload);
                        
                        var audioInputDevicesListCon = document.createElement('DIV');
                        audioInputDevicesListCon.className = 'live-editor-dialog-add-source-controls-config live-editor-dialog-add-source-list-con';
                        audioInputDevicesCon.appendChild(audioInputDevicesListCon);
                        
                        var audioInputDevicesList = _devicesListEl = document.createElement('SELECT');
                        audioInputDevicesList.className = 'live-editor-dialog-add-source-devices-list';
                        audioInputDevicesListCon.appendChild(audioInputDevicesList);
        
                        var sourceNameCon = document.createElement('DIV');
                        sourceNameCon.className = 'live-editor-dialog-add-source-controls-item live-editor-dialog-add-source-controls-name';
                        addSourceControlsInner.appendChild(sourceNameCon);
                        
                        var sourceNameCaption = document.createElement('DIV');
                        sourceNameCaption.className = 'live-editor-dialog-add-source-controls-caption';
                        sourceNameCaption.innerHTML = 'Name';
                        sourceNameCon.appendChild(sourceNameCaption);
                        
                        var sourceNameInputCon = document.createElement('DIV');
                        sourceNameInputCon.className = 'live-editor-dialog-add-source-controls-config live-editor-dialog-add-source-name-con';
                        sourceNameCon.appendChild(sourceNameInputCon);
                        
                        var sourceNameInput = _nameInputEl = document.createElement('INPUT');
                        sourceNameInput.className = 'live-editor-dialog-add-source-name-input';
                        sourceNameInput.type = 'text';
                        sourceNameInputCon.appendChild(sourceNameInput);
        
                        var sourceTypeCon = document.createElement('DIV');
                        sourceTypeCon.className = 'live-editor-dialog-add-source-controls-item live-editor-dialog-add-source-controls-type';
                        addSourceControlsInner.appendChild(sourceTypeCon);
                        var sourceTypeCaption = document.createElement('DIV');
                        sourceTypeCaption.className = 'live-editor-dialog-add-source-controls-caption';
                        sourceTypeCaption.innerHTML = '';
                        sourceTypeCon.appendChild(sourceTypeCaption);
                        
                        var sourceTypeInputCon = document.createElement('DIV');
                        sourceTypeInputCon.className = 'live-editor-dialog-add-source-controls-config live-editor-dialog-add-source-type-con';
                        sourceTypeCon.appendChild(sourceTypeInputCon);
                        
                        var separateSourceTypeLabel = document.createElement('LABEL');
                        separateSourceTypeLabel.className = 'live-editor-dialog-add-source-type-label';
                        sourceTypeInputCon.appendChild(separateSourceTypeLabel);
                        
                        var separateSourceTypeInput = document.createElement('INPUT');
                        separateSourceTypeInput.className = 'live-editor-dialog-add-source-type-input';
                        separateSourceTypeInput.name = 'live-editor-audio_input_type';
                        separateSourceTypeInput.type = 'radio';
                        separateSourceTypeInput.value = 'separate';
                        separateSourceTypeInput.checked = 'true';
                        separateSourceTypeLabel.appendChild(separateSourceTypeInput);
                        
                        var separateSourceTypeLabelText = document.createElement('SPAN');
                        separateSourceTypeLabelText.className = 'live-editor-dialog-add-source-type-label-text';
                        separateSourceTypeLabelText.innerHTML = 'Only livestream viewers will hear this source';
                        separateSourceTypeLabel.appendChild(separateSourceTypeLabelText);
                        
                        var webrtcSourceTypeLabel = document.createElement('LABEL');
                        webrtcSourceTypeLabel.className = 'live-editor-dialog-add-source-type-label';
                        sourceTypeInputCon.appendChild(webrtcSourceTypeLabel);
                        
                        var webrtcSourceTypeInput = document.createElement('INPUT');
                        webrtcSourceTypeInput.className = 'live-editor-dialog-add-source-type-input';
                        webrtcSourceTypeInput.name = 'live-editor-audio_input_type';
                        webrtcSourceTypeInput.type = 'radio';
                        webrtcSourceTypeInput.value = 'webrtc';
                        webrtcSourceTypeLabel.appendChild(webrtcSourceTypeInput);

                        var webrtcSourceTypeLabelText = document.createElement('SPAN');
                        webrtcSourceTypeLabelText.className = 'live-editor-dialog-add-source-type-label-text';
                        webrtcSourceTypeLabelText.innerHTML = 'Evryone will hear this source';
                        webrtcSourceTypeLabel.appendChild(webrtcSourceTypeLabelText);
        
                        var dialogButtonsCon = document.createElement('DIV');
                        dialogButtonsCon.className = 'live-editor-dialog-add-source-buttons-con';
                        boxContent.appendChild(dialogButtonsCon);
                        var okButton = _okButtonEl = document.createElement('BUTTON');
                        okButton.innerHTML = 'OK';
                        okButton.className = 'live-editor-dialog-add-source-ok-btn live-editor-button live-editor-button-inactive';
                        dialogButtonsCon.appendChild(okButton);

                        _devicesListEl.addEventListener('change', function (e) {
                            getAudioInputAfterSelectedOptions().then(function () {

                            });
                        })
        
                        addSourceControlsDevicesReload.addEventListener('click', function (e) {
                            if (state.mediaStream != null && !options.source) {
                                let tracks = state.mediaStream.getTracks();
                                for (let t in tracks) {
                                    tracks[t].stop();
                                }
                            }
                            loadDialog();
                        })
        
                        okButton.addEventListener('click', function (e) {
                            if (options && options.onOk != null) {
                                let selectedDeviceId = getSelectedMicOption();
                                options.onOk({
                                    stream: state.mediaStream,
                                    name: sourceNameInput.value,
                                    deviceId: selectedDeviceId,
                                    sourceType: separateSourceTypeInput.checked ? 'separate' : 'webrtc'
                                });
                            }
                            hideDialog(true);
                        })
        
                        return {
                            hideDialog: hideDialog,
                            showDialog: showDialog,
                        }
                    }())

                    var invitePopup = (function () {
                        var _popupEl = null;
                        var _popupDialog = null;

                        function createPopup() {
                            var popupContainer = _popupEl = document.createElement('DIV');
                            popupContainer.className = 'live-editor-dialog-window-content live-editor-invite-popup';
                            
                            var linkCon = document.createElement('DIV');
                            linkCon.className = 'live-editor-invite-popup-link-con';
                            popupContainer.appendChild(linkCon);
                            
                            var linkInputCon = document.createElement('LABEL');
                            linkInputCon.className = 'live-editor-invite-popup-label';
                            linkCon.appendChild(linkInputCon);
                            var linkInput = document.createElement('INPUT');
                            linkInput.disabled = true;
                            let livestreamId = (tool.livestreamStream.fields.name).replace('Streams/webrtc/livestream/', '');
                            linkInput.value = location.origin + '/livestream/' + tool.livestreamStream.fields.publisherId + '/' + livestreamId;
                            linkInputCon.appendChild(linkInput);
                            var linkCopyBtn = document.createElement('BUTTON');
                            linkCopyBtn.innerHTML = Q.getObject("webrtc.settingsPopup.copy", tool.text);
                            linkCon.appendChild(linkCopyBtn);

                            linkCopyBtn.addEventListener('click', function () {
                                copyToClipboard(linkInput);
                                tool.webrtcUserInterface.notice.show(Q.getObject("webrtc.notices.linkCopiedToCb", tool.text));
                            })
                            
                        }

                        function show() {
                            if(_popupDialog && !_popupDialog.active) {
                                _popupDialog.show();
                                return;
                            } else if(_popupDialog) {
                                return;
                            }

                            if(!_popupEl) {
                                tool.getOrCreateLivestreamStream().then(function () {
                                    createPopup();
                                    let streamingControlsEl = document.querySelector('.live-editor-dialog_advanced_streaming');
                                    let rectangleToShowIn = streamingControlsEl ? streamingControlsEl.getBoundingClientRect() : null;
                                    _popupDialog = new SimpleDialog({
                                        content: _popupEl,
                                        rectangleToShowIn: rectangleToShowIn,
                                        title: 'Share livestream'
                                    });
                                });
                            }                            
                        }

                        return {
                            show: show
                        }
                    }());

                    var contextMenu = function (type) {
                        let _type = type
                        let _contextMenu = null

                        _contextMenu = document.createElement('DIV');
                        _contextMenu.className = 'live-editor-context-menu';

                        function loadContextItems() {
                            if (_type == 'visualSource') {
                                var activeScene = scenesInterface.getActive();
                                let selectedSource = activeScene.sourcesInterface.getSelectedSource();
                                if (selectedSource.sourceInstance.sourceType == 'videoInput' && !selectedSource.sourceInstance.isScreensharing) {
                                    let preferencesItem = document.createElement('DIV');
                                    preferencesItem.className = 'live-editor-context-item';
                                    preferencesItem.innerHTML = 'Preferences';
                                    _contextMenu.appendChild(preferencesItem);
                                    preferencesItem.addEventListener('click', function () {
                                        addCameraPopup.showDialog({
                                            source: selectedSource,
                                            onOk: function (e) {
                                                if (!e.stream) {
                                                    alert('No media stream added');
                                                }

                                                if(e.sourceType == 'separate') {
                                                    selectedSource.sourceInstance.update({
                                                        stream: e.stream,
                                                        name: e.name,
                                                        originalSize: e.originalSize,
                                                        frameRate: e.frameRate
                                                    });
                                                } else {
                                                    log('add camera source: webrtc');
                                                    let videoTracks = e.stream.getVideoTracks();
                                                    for (let t in videoTracks) {
                                                        videoTracks[t].stop();
                                                    }
                                                    activeScene.sourcesInterface.removeSource();
                                                    tool.webrtcSignalingLib.localMediaControls.toggleCameras({deviceId:e.deviceId});
                                                }

                                                
                                            },
                                            onClose: function () {

                                            }
                                        });
                                    });
                                } else if (selectedSource.sourceInstance.sourceType == 'videoInput' && selectedSource.sourceInstance.isScreensharing) {
                                    let preferencesItem = document.createElement('DIV');
                                    preferencesItem.className = 'live-editor-context-item';
                                    preferencesItem.innerHTML = 'Preferences';
                                    _contextMenu.appendChild(preferencesItem);
                                    preferencesItem.addEventListener('click', function () {
                                        addScreensharingInputPopup.showDialog({
                                            source: selectedSource,
                                            onOk: function (e) {
                                                if (!e.stream) {
                                                    alert('No media stream added');
                                                }
                                                selectedSource.sourceInstance.update({
                                                    stream: e.stream,
                                                    name: e.name
                                                });
                                            },
                                            onClose: function () {

                                            }
                                        });
                                    });
                                } else if (selectedSource.sourceInstance.sourceType == 'video') {
                                    let preferencesItem = document.createElement('DIV');
                                    preferencesItem.className = 'live-editor-context-item';
                                    preferencesItem.innerHTML = 'Preferences';
                                    _contextMenu.appendChild(preferencesItem);
                                    preferencesItem.addEventListener('click', function () {
                                        filtersPopup(selectedSource);
                                    });
                                }

                            }
                        }

                        function hide(e) {
                            if (e.target.offsetParent != _contextMenu) {
                                if (_contextMenu.parentElement) _contextMenu.parentElement.removeChild(_contextMenu);
                                window.removeEventListener('click', hide);
                            }
                        }

                        function show(e) {
                            existingContextMenu = document.querySelector('.live-editor-context-menu');
                            if (existingContextMenu && existingContextMenu.parentElement) existingContextMenu.parentElement.removeChild(existingContextMenu);
                            let clientX = e.clientX;
                            let clientY = e.clientY;
                            _contextMenu.style.top = clientY + 'px';
                            _contextMenu.style.left = clientX + 'px';

                            loadContextItems();

                            document.body.appendChild(_contextMenu);

                            window.addEventListener('click', hide);
                        }

                        return {
                            show: show
                        }
                    }

                    function on(eventName, handlerFunction) {
                        _eventDispatcher.on(eventName, handlerFunction);
                    }

                    return {
                        createSourcesCol: createSourcesCol,
                        update: update,
                        updateLocalControlsButtonsState: updateLocalControlsButtonsState,
                        selectSource: selectSource,
                        getSelectedSource: getSelectedSource,
                        getSelectedLayout: getSelectedLayout,
                        syncList: syncList,
                        loadList: loadList,
                        getSourcesList: getSourcesList,
                        hideResizingElement: hideResizingElement,
                        moveForward: moveForward,
                        moveBackward: moveBackward,
                        removeSource: removeSource,
                        addVideoInputSource: addVideoInputSource,
                        addImageSource: addImageSource,
                        addWatermark: addWatermark,
                        addBackground: addBackground,
                        addVideoSource: addVideoSource,
                        checkIfOtherWebrtcVideoGroupExist: checkIfOtherWebrtcVideoGroupExist,
                        getWebrtcGroupListItem: getWebrtcGroupListItem,
                        on: on
                    }
                }

                var optionsColumn = (function () {
                    var _activeView = null;
                    var _optionsParentEl = document.createElement('DIV');
                    _optionsParentEl.className = 'live-editor-options-dialog';

                    function hideActiveView() {
                        log('optionsColumn: hideActiveView', _activeView)
                        if(_activeView != null) {
                            _activeView.hide();
                        }
                    }

                    function createMediaControls(source) {
                        log('createMediaControls',  source.params);

                        var mediaElement = source.sourceInstance.audioInstance || source.sourceInstance.videoInstance;

                        var dialogControlsBody = document.createElement('DIV');
                        dialogControlsBody.className = 'live-editor-popup-options-params-mediacontrols';

                        var seektimeCon = document.createElement('DIV');
                        seektimeCon.className = 'live-editor-popup-options-params-seekbar-con';
                        var seektimeEl = document.createElement('DIV');
                        seektimeEl.className = 'live-editor-popup-options-params-seekbar';
                        var seektimeProgress = document.createElement('span');
                        seektimeProgress.className = 'live-editor-popup-options-params-seekbar-btn';
                        seektimeEl.appendChild(seektimeProgress);
                        seektimeCon.appendChild(seektimeEl);
                        dialogControlsBody.appendChild(seektimeCon);

                        var audioControlsCon = document.createElement('DIV');
                        audioControlsCon.className = 'live-editor-popup-options-params-controls-con';
                        var playPauseCon = document.createElement('DIV');
                        playPauseCon.className = 'live-editor-popup-options-params-controls-con';
                        var playPauseInner = document.createElement('DIV');
                        playPauseInner.className = 'live-editor-popup-options-params-controls-inner';
                        var playPauseBtn = document.createElement('DIV');
                        playPauseBtn.className = 'live-editor-popup-options-params-controls-btn';
                        playPauseBtn.innerHTML = mediaElement.paused ? _streamingIcons.playIcon : _streamingIcons.pauseIcon;
                        playPauseInner.appendChild(playPauseBtn);
                        playPauseCon.appendChild(playPauseInner);
                        audioControlsCon.appendChild(playPauseCon);


                        var volumeCon = document.createElement('DIV');
                        volumeCon.className = 'live-editor-popup-options-params-controls-volume-con';
                        var volumeIcon = document.createElement('DIV');
                        volumeIcon.className = 'live-editor-popup-options-params-controls-volume-icon'
                        volumeIcon.innerHTML = _streamingIcons.disabledEnabledSpeaker;
                        var volumeSliderCon = document.createElement('DIV');
                        volumeSliderCon.className = 'live-editor-popup-options-params-volume-slider-con';
                        var volume = document.createElement('DIV');
                        volume.className = 'live-editor-popup-options-params-controls-volume'
                        var volumeSlider = document.createElement('SPAN');
                        volumeSlider.className = 'live-editor-popup-options-params-controls-volume-slider';
                        volumeSlider.style.width = source.sourceInstance.gainNode.gain.value * 100 + '%';
                        volume.appendChild(volumeSlider);
                        volumeSliderCon.appendChild(volume);
                        volumeCon.appendChild(volumeIcon);
                        volumeCon.appendChild(volumeSliderCon);
                        audioControlsCon.appendChild(volumeCon);

                        var audioTimeCon = document.createElement('DIV');
                        audioTimeCon.className = 'live-editor-popup-options-params-audio-time-con';
                        var audioTimeInner = document.createElement('DIV');
                        audioTimeInner.className = 'live-editor-popup-options-params-audio-time-inner';
                        var audioTimeCurrent = document.createElement('SPAN');
                        audioTimeCurrent.className = 'live-editor-popup-options-params-audio-time-cur';
                        var audioTimeSpliter = document.createElement('SPAN');
                        audioTimeSpliter.className = 'live-editor-popup-options-params-audio-time-split';
                        audioTimeSpliter.innerHTML = '/';
                        var audioTimeDuration = document.createElement('SPAN');
                        audioTimeDuration.className = 'live-editor-popup-options-params-audio-time-dur';
                        audioTimeInner.appendChild(audioTimeCurrent);
                        audioTimeInner.appendChild(audioTimeSpliter);
                        audioTimeInner.appendChild(audioTimeDuration);
                        audioTimeCon.appendChild(audioTimeInner);
                        audioControlsCon.appendChild(audioTimeCon);


                        var loopAndLocalPlayCon = document.createElement('DIV');
                        loopAndLocalPlayCon.className = 'live-editor-popup-options-params-loopplay-con';
                        var loopAudioCon = document.createElement('DIV');
                        loopAudioCon.className = 'live-editor-popup-options-params-loopaudio-con';
                        var loopAudioLabel = document.createElement('LABEL');
                        loopAudioLabel.className = 'live-editor-popup-options-params-looplabel';
                        var loopPlayCheckbox = document.createElement('INPUT');
                        loopPlayCheckbox.type = 'checkbox';
                        loopPlayCheckbox.name = 'loopAudio';
                        loopPlayCheckbox.checked = source.params.loop;
                        var loopPlayCheckboxText = document.createTextNode('Loop');
                        loopAudioLabel.appendChild(loopPlayCheckbox);
                        loopAudioLabel.appendChild(loopPlayCheckboxText);
                        loopAudioCon.appendChild(loopAudioLabel);
                        loopAndLocalPlayCon.appendChild(loopAudioCon);

                        var PlayLocallyCon = document.createElement('DIV');
                        PlayLocallyCon.className = 'live-editor-popup-options-params-playlocally-con';
                        var playLocallyLabel = document.createElement('LABEL');
                        playLocallyLabel.className = 'live-editor-popup-options-params-playlocally-label';
                        var playLocallyCheckbox = document.createElement('INPUT');
                        playLocallyCheckbox.type = 'checkbox';
                        playLocallyCheckbox.name = 'loopAudio';
                        playLocallyCheckbox.checked = source.params.localOutput;
                        var playLocCheckboxText = document.createTextNode('Local output');
                        playLocallyLabel.appendChild(playLocallyCheckbox);
                        playLocallyLabel.appendChild(playLocCheckboxText);
                        PlayLocallyCon.appendChild(playLocallyLabel);
                        loopAndLocalPlayCon.appendChild(PlayLocallyCon);

                        dialogControlsBody.appendChild(audioControlsCon);
                        dialogControlsBody.appendChild(loopAndLocalPlayCon);

                        seektimeCon.addEventListener('mouseenter', function(){
                            if(!seektimeProgress.classList.contains("live-editor-popup-options-seekbar-hover")) {
                                seektimeProgress.classList.add("live-editor-popup-options-seekbar-hover");
                            }
                        })
                        seektimeCon.addEventListener('mouseleave', function(){
                            if(seektimeProgress.classList.contains("live-editor-popup-options-seekbar-hover")) {
                                seektimeProgress.classList.remove("live-editor-popup-options-seekbar-hover");
                            }
                        })

                        function getOffsetLeft(elem) {
                            var offsetLeft = 0;
                            do {
                                if ( !isNaN( elem.offsetLeft ) )
                                {
                                    offsetLeft += elem.offsetLeft;
                                }
                            } while( elem = elem.offsetParent );
                            return offsetLeft;
                        }

                        mediaElement.addEventListener('timeupdate', function () {
                            var percentage = ( mediaElement.currentTime / mediaElement.duration ) * 100;
                            seektimeProgress.style.width = percentage+'%';
                            updateSeekTime();
                        })
                        function updateSeekTime(){
                            var nt = mediaElement.currentTime * (100 / mediaElement.duration);
                            var curmins = Math.floor(mediaElement.currentTime / 60);
                            var cursecs = Math.floor(mediaElement.currentTime - curmins * 60);
                            var durmins = Math.floor(mediaElement.duration / 60);
                            var dursecs = Math.floor(mediaElement.duration - durmins * 60);
                            if(cursecs < 10){ cursecs = "0"+cursecs; }
                            if(dursecs < 10){ dursecs = "0"+dursecs; }
                            //if(curmins < 10){ curmins = "0"+curmins; }
                            //if(durmins < 10){ durmins = "0"+durmins; }
                            audioTimeCurrent.innerHTML = curmins+":"+cursecs;
                            audioTimeDuration.innerHTML = durmins+":"+dursecs;
                        }

                        function dragTimeSlider(e) {
                            var offsetLeft = getOffsetLeft(seektimeEl)
                            var left = (e.pageX - offsetLeft);

                            var totalWidth = seektimeEl.offsetWidth;
                            var percentage = ( left / totalWidth );
                            var timeToSet = mediaElement.duration * percentage;
                            mediaElement.currentTime = timeToSet;
                        }
                        seektimeEl.addEventListener("mousedown", function(){
                            log('mousedown')

                            window.addEventListener('mousemove', dragTimeSlider)

                            function removeListener() {
                                window.removeEventListener('mousemove', dragTimeSlider)
                                window.removeEventListener('mouseup', removeListener)
                            }
                            window.addEventListener('mouseup', removeListener)
                        });


                        seektimeEl.addEventListener("mouseup", function(e){
                            var offsetLeft = getOffsetLeft(seektimeEl)
                            var left = (e.pageX - offsetLeft);
                            var totalWidth = seektimeEl.offsetWidth;
                            var percentage = ( left / totalWidth );
                            var timeToSet = mediaElement.duration * percentage;
                            mediaElement.currentTime = timeToSet;
                        });

                        playPauseBtn.addEventListener("click", function(e){
                            log('mediaElement', mediaElement)
                            if(mediaElement.paused){
                                mediaElement.play();
                                playPauseBtn.innerHTML = _streamingIcons.pauseIcon;
                            } else {
                                mediaElement.pause();
                                playPauseBtn.innerHTML = _streamingIcons.playIcon;
                            }
                        });

                        if(mediaElement.muted) {
                            volumeSlider.style.width = '0%';
                        }

                        source.sourceInstance.on('volumeChanged', function () {
                            log('volumeChanged', source.sourceInstance.gainNode.gain.value)
                            var percentage = source.sourceInstance.gainNode.gain.value * 100;
                            volumeSlider.style.width = percentage + '%';
                            updateVolumeIcons(source.sourceInstance.gainNode.gain.value);
                        })

                        mediaElement.addEventListener('pause', function (e) {
                            log('mediaElement pause', mediaElement)
                        })

                        mediaElement.addEventListener('play', function (e) {
                            log('mediaElement play', mediaElement)
                        })

                        function dragVolumeSlider(e) {
                            var offsetLeft = getOffsetLeft(volume)
                            var left = (e.pageX - offsetLeft);
                            if (Math.sign(left) == -1) {
                                left = 0;
                            }
                            var totalWidth = volume.offsetWidth;

                            if (left > totalWidth) {
                                left = totalWidth;
                            }
                            var volumeToSet = (left / totalWidth);
                            source.sourceInstance.setVolume(volumeToSet);
                        }

                        function updateVolumeIcons(volumeToSet) {
                            log('updateVolumeIcons', volumeToSet, mediaElement.muted)
                            var waves = volumeIcon.querySelector('#StreamsWebrtcWaves');
                            var disabledWaves = volumeIcon.querySelectorAll('.StreamsWebrtcDisabledparts.StreamsWebrtcWaves1 .StreamsWebrtcDisabledparts.StreamsWebrtcWaves2');
                            var secondWaveParts = volumeIcon.querySelectorAll('.StreamsWebrtcWaves2');
                            var disabledPartOfSpeaker = volumeIcon.querySelector('polygon.StreamsWebrtcDisabledparts');
                            var crossline = volumeIcon.querySelector('#StreamsWebrtcCrossline');

                            function toggleSecondWave(value) {
                                for (let i = 0; i < secondWaveParts.length; ++i) {
                                    secondWaveParts[i].style.opacity = value;
                                }
                            }
                            function toggleDisabledIcon(value) {
                                for (let i = 0; i < disabledWaves.length; ++i) {
                                    disabledWaves[i].style.opacity = (value === 1 ? 0 : 1);
                                }
                                disabledPartOfSpeaker.style.opacity = (value === 1 ? 0 : 1);
                                crossline.style.opacity = (value === 1 ? 1 : 0);
                            }

                            if(volumeToSet <= 0.5 && volumeToSet > 0 && !mediaElement.muted) {
                                log('updateVolumeIcons 1');
                                toggleDisabledIcon(0);
                                toggleSecondWave(0);
                            } else if (volumeToSet > 0.5 && !mediaElement.muted) {
                                log('updateVolumeIcons 2');
                                toggleDisabledIcon(0);
                                toggleSecondWave(1);
                            } else {
                                log('updateVolumeIcons 3');
                                toggleSecondWave(1);
                                toggleDisabledIcon(1);
                            }
                        }
                        updateVolumeIcons(mediaElement.muted ? 0 : source.sourceInstance.gainNode.gain.value)

                        source.sourceInstance.on('volumeChanged', function () {
                            var percentage = source.sourceInstance.gainNode.gain.value * 100;
                            volumeSlider.style.width = percentage + '%';
                            updateVolumeIcons(source.sourceInstance.gainNode.gain.value);
                        })

                        volumeIcon.addEventListener("click", function () {
                            log('speaker', mediaElement.volume, mediaElement.muted)

                            if (!source.sourceInstance.gainNode) return;
                            if (source.sourceInstance.gainNode.gain.value == 0 || mediaElement.muted) {
                                log('speaker 1', source.params.lastVolumeValue)

                                if (mediaElement.muted) mediaElement.muted = false;
                                source.sourceInstance.setVolume(source.params.lastVolumeValue != null ? source.params.lastVolumeValue : 1);
                            } else {
                                source.params.lastVolumeValue = source.sourceInstance.gainNode.gain.value;
                                source.sourceInstance.setVolume(0);
                            }
                        });


                        volume.addEventListener("mousedown", function(){
                            window.addEventListener('mousemove', dragVolumeSlider)

                            function removeListener() {
                                window.removeEventListener('mousemove', dragVolumeSlider)
                                window.removeEventListener('mouseup', removeListener)
                            }
                            window.addEventListener('mouseup', removeListener)
                        });


                        volume.addEventListener("click", dragVolumeSlider);

                        loopPlayCheckbox.addEventListener("click", function (e) {
                            if(this.checked) {
                                (source.sourceInstance.audioInstance || source.sourceInstance.videoInstance).loop = true;
                            } else {
                                (source.sourceInstance.audioInstance || source.sourceInstance.videoInstance).loop = false;
                            }
                        });

                        playLocallyCheckbox.addEventListener("click", function (e) {
                            if(this.checked) {
                                tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.unmuteSourceLocally(source.sourceInstance);
                            } else {
                                tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.muteSourceLocally(source.sourceInstance);
                            }
                        });


                        source.params.loop = loopPlayCheckbox;
                        source.params.localOutput = playLocallyCheckbox;

                        return dialogControlsBody;
                    }

                    var canvasLayoutOptions = (function () {
                        let _selectedSource = null;
                        var _dialogEl = null;
                        var _dialogBody = null;
                        var _generatedLayoutsParamsDialogs = {};

                        
                        function createParamsList() {
                            let activeScene = scenesInterface.getActive();
                            let selectedLayout = activeScene.sourcesInterface.getSelectedLayout();

                            log('createParamsList', selectedLayout)
                            if(_generatedLayoutsParamsDialogs[_selectedSource.sourceInstance.id] != null && _generatedLayoutsParamsDialogs[_selectedSource.sourceInstance.id][selectedLayout] != null) {
                                return _generatedLayoutsParamsDialogs[_selectedSource.sourceInstance.id][selectedLayout];
                            }
                            var dialogBodyInner = document.createElement('DIV');
                            dialogBodyInner.className = 'live-editor-popup-options-body-inner live-editor-popup-options-params-body';

                            if (selectedLayout == 'tiledStreamingLayout') {
                                var marginsCon = document.createElement('DIV');
                                marginsCon.className = 'live-editor-popup-options-params-margins';
                                var marginsInput = document.createElement('INPUT');
                                marginsInput.type = 'number';
                                marginsInput.id = 'layoutMargins';
                                marginsInput.name = 'layoutMargins';
                                marginsInput.min = 0;
                                marginsInput.value = _selectedSource.sourceInstance.params.tiledLayoutMargins;
                                var marginsInputLabel = document.createElement('Label');
                                marginsInputLabel.appendChild(document.createTextNode("Layout margins:"));
                                marginsCon.appendChild(marginsInputLabel);
                                marginsCon.appendChild(marginsInput);
                                dialogBodyInner.appendChild(marginsCon);

                                marginsInput.addEventListener('input', function () {
                                    _selectedSource.sourceInstance.params.tiledLayoutMargins = marginsInput.value;
                                    updateWebrtcRect();
                                })
                            }

                            var webrtcLayoutRect = _selectedSource.sourceInstance.rect;

                            //size
                            var sizeAndPositionCon = document.createElement('DIV');
                            sizeAndPositionCon.className = 'live-editor-popup-options-params-size-pos';

                            var sizeCon = document.createElement('DIV');
                            sizeCon.className = 'live-editor-popup-options-params-size';
                            sizeAndPositionCon.appendChild(sizeCon);

                            var sizeWidthCon = document.createElement('DIV');
                            sizeWidthCon.className = 'live-editor-popup-options-params-size-width';
                            sizeCon.appendChild(sizeWidthCon);
                            var widthText = document.createElement('SPAN');
                            widthText.innerHTML = 'Width: ';
                            sizeWidthCon.appendChild(widthText);
                            var width = document.createElement('INPUT');
                            width.type = 'text';
                            width.value = webrtcLayoutRect.width;
                            sizeWidthCon.appendChild(width);

                            var sizeHeightCon = document.createElement('DIV');
                            sizeHeightCon.className = 'live-editor-popup-options-params-size-height';
                            sizeCon.appendChild(sizeHeightCon);
                            var heightText = document.createElement('SPAN');
                            heightText.innerHTML = 'Height: ';
                            sizeHeightCon.appendChild(heightText);
                            var height = document.createElement('INPUT');
                            height.type = 'text';
                            height.value = webrtcLayoutRect.height;
                            sizeHeightCon.appendChild(height);


                            //position
                            var positionCon = document.createElement('DIV');
                            positionCon.className = 'live-editor-popup-options-params-position';
                            sizeAndPositionCon.appendChild(positionCon);

                            var topPositionCon = document.createElement('DIV');
                            topPositionCon.className = 'live-editor-popup-options-params-position-top';
                            positionCon.appendChild(topPositionCon);
                            var topText = document.createElement('SPAN');
                            topText.innerHTML = 'Top: ';
                            topPositionCon.appendChild(topText);
                            var topPos = document.createElement('INPUT');
                            topPos.type = 'text';
                            topPos.value = webrtcLayoutRect.y;
                            topPositionCon.appendChild(topPos);

                            var leftPositionCon = document.createElement('DIV');
                            leftPositionCon.className = 'live-editor-popup-options-params-position-left';
                            positionCon.appendChild(leftPositionCon);
                            var leftText = document.createElement('SPAN');
                            leftText.innerHTML = 'Left: ';
                            leftPositionCon.appendChild(leftText);
                            var leftPos = document.createElement('INPUT');
                            leftPos.type = 'text';
                            leftPos.value = webrtcLayoutRect.x;
                            leftPositionCon.appendChild(leftPos);

                            var audioBgCon = document.createElement('DIV');
                            audioBgCon.className = 'live-editor-popup-options-params-position-audio-bg'
                            var audioBg = document.createElement('INPUT');
                            audioBg.type = 'color';
                            audioBg.id = 'audioBgColor';
                            audioBg.name = 'audioBgColor';
                            audioBg.value = _selectedSource.sourceInstance.params.audioLayoutBgColor;
                            var removeBg = document.createElement('DIV');
                            removeBg.className = 'live-editor-popup-options-params-position-audio-res'
                            removeBg.innerHTML = '&#10060;'
                            audioBgCon.appendChild(document.createTextNode("Layout background color: "));
                            audioBgCon.appendChild(audioBg);
                            audioBgCon.appendChild(removeBg);
                           
                            dialogBodyInner.appendChild(sizeAndPositionCon);
                            dialogBodyInner.appendChild(audioBgCon);

                            _layoutParamsEl = dialogBodyInner;

                            audioBg.addEventListener('input', function () {
                                _selectedSource.sourceInstance.params.audioLayoutBgColor = audioBg.value;
                            })

                            removeBg.addEventListener('click', function () {
                                _selectedSource.sourceInstance.params.audioLayoutBgColor = 'rgba(0, 0, 0, 0)';
                            })

                            function updateWebrtcRect (e) {
                                _selectedSource.sourceInstance.rect.width = width.value;
                                _selectedSource.sourceInstance.rect.height = height.value;
                                _selectedSource.sourceInstance.rect.x = leftPos.value;
                                _selectedSource.sourceInstance.rect.y = topPos.value;
                                //tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.setWebrtcLayoutRect(layoutWidth, layoutHeight, x, y);
                            }
                            width.addEventListener('blur', updateWebrtcRect);
                            height.addEventListener('blur', updateWebrtcRect);
                            topPos.addEventListener('blur', updateWebrtcRect);
                            leftPos.addEventListener('blur', updateWebrtcRect);

                            _selectedSource.sourceInstance.eventDispatcher.on('rectChanged', function () {
                                width.value = webrtcLayoutRect._width;
                                height.value = webrtcLayoutRect._height;
                                leftPos.value = webrtcLayoutRect._x;
                                topPos.value = webrtcLayoutRect._y;
                            });
                           
                            if(_generatedLayoutsParamsDialogs[_selectedSource.sourceInstance.id] == null) {
                                _generatedLayoutsParamsDialogs[_selectedSource.sourceInstance.id] = {};
                            }
                            _generatedLayoutsParamsDialogs[_selectedSource.sourceInstance.id][selectedLayout] = dialogBodyInner;

                            return dialogBodyInner;
                        }

                        function showLayoutParams() {
                            log('showLayoutParams')

                            _dialogBody.innerHTML = '';
                            _dialogBody.appendChild(createParamsList());
                        }

                        function showDialog(source) {
                            _selectedSource = source;
                            log('showDialog', _selectedSource.sourceInstance.id)
                            hideActiveView();
                            showLayoutParams();

                            _optionsParentEl.appendChild(_dialogEl);
                            _activeView = this;
                        }

                        function hideDialog() {
                            log('hideDialog', _dialogEl, _dialogEl != null, _dialogEl.parentElement != null, _dialogEl.parentElement)

                            if(_dialogEl != null && _dialogEl.parentElement != null) {
                                log('hideDialog remove')

                                _dialogEl.parentNode.removeChild(_dialogEl);
                            }
                        }

                        log('addImagePopup')
                        _dialogEl = document.createElement('DIV');
                        _dialogEl.className = 'live-editor-popup-options-dialog';
                        var dialogTitle = document.createElement('DIV');
                        dialogTitle.className = 'live-editor-popup-options-title';
                        var dialogTitleInner = _layoutTabs = document.createElement('DIV');
                        dialogTitleInner.className = 'live-editor-popup-options-title-inner';

                        var dialogBody = _dialogBody = document.createElement('DIV');
                        dialogBody.className = 'live-editor-popup-options-body';

                        //dialogBody.appendChild(createLayoutList());
                        _dialogEl.appendChild(dialogBody);

                        return {
                            hide: hideDialog,
                            show: showDialog,
                            showLayoutParams: showLayoutParams,
                        }
                    }())

                    var webrtcParticipantOptions = (function (source) {
                        var _dialogEl = null;
                        var _optionsTabs = null;
                        var _dialogBody = null;
                        var _layoutParamsEl = null;
                        var _selectedSource = null;
                        var _generatedDialogs = [];

                        function createParamsList() {

                            log('createParamsList', _selectedSource.sourceInstance)
                            for(let d in _generatedDialogs) {
                                if(_generatedDialogs[d].source == _selectedSource) {
                                    return _generatedDialogs[d].dialog;
                                }
                            }

                            var dialogBodyInner = document.createElement('DIV');
                            dialogBodyInner.className = 'live-editor-popup-options-body-inner live-editor-popup-options-params-body';

                            //size
                            var descriptionCon = document.createElement('DIV');
                            descriptionCon.className = 'live-editor-popup-options-params-webrtc-desc';

                            var descriptionInner = document.createElement('DIV');
                            descriptionInner.className = 'live-editor-popup-options-params-webrtc-desc-inner';
                            descriptionCon.appendChild(descriptionInner);

                            var displayVideoCon = document.createElement('DIV');
                            var displayVideoTitle = document.createElement('DIV');
                            displayVideoTitle.innerHTML = "Display video:";
                            displayVideoCon.appendChild(displayVideoTitle);
                            var coverFit = document.createElement('INPUT');
                            coverFit.type = 'radio';
                            coverFit.id = 'coverFit';
                            coverFit.name = 'displayVideo';
                            coverFit.value = 'cover';
                            coverFit.checked = _selectedSource.sourceInstance.params.displayVideo == 'cover' ? true : false;
                            var coverFitLabel = document.createElement('Label');
                            coverFitLabel.appendChild(coverFit);
                            coverFitLabel.appendChild(document.createTextNode("Cover"));
                            displayVideoCon.appendChild(coverFitLabel);
                            
                            var containFit = document.createElement('INPUT');
                            containFit.type = 'radio';
                            containFit.id = 'containFit';
                            containFit.name = 'displayVideo';
                            containFit.value = 'contain';
                            containFit.checked = _selectedSource.sourceInstance.params.displayVideo == 'contain' ? true : false;
                            var containFitLabel = document.createElement('Label');
                            containFitLabel.appendChild(containFit);
                            containFitLabel.appendChild(document.createTextNode("Contain"));
                            displayVideoCon.appendChild(containFitLabel);

                            dialogBodyInner.appendChild(displayVideoCon);

                            var showFlippedCon = document.createElement('DIV');
                            var showFlipped = document.createElement('INPUT');
                            showFlipped.type = 'checkbox';
                            showFlipped.id = 'showFlipped';
                            showFlipped.name = 'showFlipped';
                            showFlipped.checked = _selectedSource.sourceInstance.params.flip ? true : false;
                            var showFlippedLabel = document.createElement('Label');
                            showFlippedLabel.appendChild(showFlipped);
                            showFlippedLabel.appendChild(document.createTextNode("Flip"));
                            showFlippedCon.appendChild(showFlippedLabel);
                            dialogBodyInner.appendChild(showFlippedCon);

                            var showNameCon = document.createElement('DIV');
                            var showName = document.createElement('INPUT');
                            showName.type = 'checkbox';
                            showName.id = 'showNames';
                            showName.name = 'showNames';
                            showName.checked = false;
                            var showNameLabel = document.createElement('Label');
                            showNameLabel.appendChild(showName);
                            showNameLabel.appendChild(document.createTextNode("Show participants' name"));
                            showNameCon.appendChild(showNameLabel);
                            dialogBodyInner.appendChild(showNameCon);

                            var descNameCon = document.createElement('DIV');
                            descNameCon.className = 'live-editor-popup-options-params-webrtc-desc-name';
                            descriptionInner.appendChild(descNameCon);
                            var nameText = document.createElement('SPAN');
                            nameText.innerHTML = 'Name: ';
                            descNameCon.appendChild(nameText);
                            var nameInput = document.createElement('INPUT');
                            nameInput.type = 'text';
                            nameInput.value = _selectedSource.sourceInstance.participant.username;
                            descNameCon.appendChild(nameInput);

                            var showBorderCon = document.createElement('DIV');
                            var showBorder = document.createElement('INPUT');
                            showBorder.type = 'checkbox';
                            showBorder.id = 'showBorder';
                            showBorder.name = 'showBorder';
                            showBorder.checked = false;
                            var ShowBorderLabel = document.createElement('Label');
                            ShowBorderLabel.appendChild(showBorder);
                            ShowBorderLabel.appendChild(document.createTextNode("Show borders"));
                            showBorderCon.appendChild(ShowBorderLabel);
                            dialogBodyInner.appendChild(showBorderCon);

                            var descCaptionCon = document.createElement('DIV');
                            descCaptionCon.className = 'live-editor-popup-options-params-webrtc-desc-caption';
                            descriptionInner.appendChild(descCaptionCon);
                            var captionText = document.createElement('SPAN');
                            captionText.innerHTML = 'Caption: ';
                            descCaptionCon.appendChild(captionText);
                            var captionInput = document.createElement('INPUT');
                            captionInput.type = 'text';
                            captionInput.value = _selectedSource.sourceInstance.caption;
                            descCaptionCon.appendChild(captionInput);
                            dialogBodyInner.appendChild(descriptionCon);

                            var bgColorCon = document.createElement('DIV');
                            bgColorCon.className = 'live-editor-popup-options-params-captionbg'
                            var bgColorInput = document.createElement('INPUT');
                            bgColorInput.type = 'color';
                            bgColorInput.id = 'captionBgColor';
                            bgColorInput.name = 'captionBgColor';
                            bgColorInput.value = _selectedSource.sourceInstance.params.captionBgColor;
                            var removeBg = document.createElement('DIV');
                            removeBg.className = 'live-editor-popup-options-params-captionbg-rem'
                            removeBg.innerHTML = '&#10060;'
                            bgColorCon.appendChild(document.createTextNode("Caption background color: "));
                            bgColorCon.appendChild(bgColorInput);
                            bgColorCon.appendChild(removeBg);
                            dialogBodyInner.appendChild(bgColorCon);

                            var fontColorCon = document.createElement('DIV');
                            fontColorCon.className = 'live-editor-popup-options-params-font-color'
                            var fontColorInput = document.createElement('INPUT');
                            fontColorInput.type = 'color';
                            fontColorInput.id = 'captionFontColor';
                            fontColorInput.name = 'captionFontColor';
                            fontColorInput.value = _selectedSource.sourceInstance.params.captionFontColor;
                            var removeColor = document.createElement('DIV');
                            removeColor.className = 'live-editor-popup-options-params-font-color-rem'
                            removeColor.innerHTML = '&#10060;'
                            fontColorCon.appendChild(document.createTextNode("Caption font color: "));
                            fontColorCon.appendChild(fontColorInput);
                            fontColorCon.appendChild(removeColor);
                            dialogBodyInner.appendChild(fontColorCon);

                            _layoutParamsEl = dialogBodyInner;

                            function displayVideoHandler() {
                               let checkedValue = coverFit.checked ? 'cover' : 'contain';
                               _selectedSource.sourceInstance.params.displayVideo = checkedValue;
                            }

                            coverFit.addEventListener('click', displayVideoHandler);
                            containFit.addEventListener('click', displayVideoHandler);

                            showFlipped.addEventListener('change', function () {
                                if( showFlipped.checked) {
                                    _selectedSource.sourceInstance.params.flip = true;
                                } else {
                                    _selectedSource.sourceInstance.params.flip = false;
                                }
                            })

                            showName.addEventListener('change', function () {
                                if( showName.checked) {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.displayName(_selectedSource.sourceInstance);
                                } else {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.hideName(_selectedSource.sourceInstance);

                                }
                            })
                            showBorder.addEventListener('change', function () {
                                if( showBorder.checked) {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.displayBorder(_selectedSource.sourceInstance.participant);
                                } else {
                                    tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.hideBorder(_selectedSource.sourceInstance.participant);

                                }
                            })
                            nameInput.addEventListener('blur', function () {
                                _selectedSource.sourceInstance.name = nameInput.value.toUpperCase();
                            })
                            captionInput.addEventListener('blur', function () {
                                _selectedSource.sourceInstance.caption = captionInput.value;

                            })
                            bgColorInput.addEventListener('input', function () {
                                _selectedSource.sourceInstance.params.captionBgColor = bgColorInput.value;
                            })
                            removeBg.addEventListener('click', function () {
                                _selectedSource.sourceInstance.params.captionBgColor = bgColorInput.value = 'rgba(0, 0, 0, 0)';
                            })
                            fontColorInput.addEventListener('input', function () {
                                _selectedSource.sourceInstance.params.captionFontColor = fontColorInput.value;
                            })

                            removeColor.addEventListener('click', function () {
                                _selectedSource.sourceInstance.params.captionFontColor = fontColorInput.value = 'rgba(0, 0, 0, 0)';
                            })

                            /*_selectedSource.sourceInstance.on('rectChanged', function () {
                        width.value = _selectedSource.sourceInstance.rect._width;
                        height.value = _selectedSource.sourceInstance.rect._height;
                        leftPos.value = _selectedSource.sourceInstance.rect._x;
                        topPos.value = _selectedSource.sourceInstance.rect._y;
                    });*/

                            _generatedDialogs.push({
                                source: _selectedSource,
                                dialog:  dialogBodyInner
                            })
                            return dialogBodyInner;
                        }

                        function showParams() {
                            _dialogBody.innerHTML = '';
                            _dialogBody.appendChild(createParamsList());
                        }

                        function showDialog(source) {
                            _selectedSource = source;
                            log('showDialog', this, _activeView)
                            hideActiveView();
                            showParams();
                            _optionsParentEl.appendChild(_dialogEl);
                            _activeView = this;
                        }

                        function hideDialog() {
                            log('hideDialog', _dialogEl)

                            if(_dialogEl && _dialogEl.parentNode != null) {
                                _dialogEl.parentNode.removeChild(_dialogEl);
                            }
                        }

                        log('addImagePopup')
                        _dialogEl = document.createElement('DIV');
                        _dialogEl.className = 'live-editor-popup-options-dialog';
                        var dialogBody = _dialogBody = document.createElement('DIV');
                        dialogBody.className = 'live-editor-popup-options-body';

                        //dialogBody.appendChild(createParamsList());
                        _dialogEl.appendChild(dialogBody);

                        return {
                            hide: hideDialog,
                            show: showDialog,
                            showParams: showParams
                        }
                    }())

                    var imageSourceOptions = (function (source) {
                        var _dialogEl = null;
                        var _optionsTabs = null;
                        var _dialogBody = null;
                        var _layoutParamsEl = null;
                        var _selectedSource = null;
                        var _generatedDialogs = [];

                        function createParamsList() {

                            for(let d in _generatedDialogs) {
                                if(_generatedDialogs[d].source == _selectedSource) {
                                    return _generatedDialogs[d].dialog;
                                }
                            }

                            var dialogBodyInner = document.createElement('DIV');
                            dialogBodyInner.className = 'live-editor-popup-options-body-inner live-editor-popup-options-params-body';

                            var keepRatioCon = document.createElement('DIV');
                            var keepRatio = document.createElement('INPUT');
                            keepRatio.type = 'checkbox';
                            keepRatio.id = 'live-editor-popup-options-keep-ratio';
                            keepRatio.name = 'keepRatio';
                            keepRatio.checked = true;
                            var keepRatioLabel = document.createElement('Label');
                            keepRatioLabel.appendChild(keepRatio);
                            keepRatioLabel.appendChild(document.createTextNode("Keep ratio"));
                            keepRatioCon.appendChild(keepRatioLabel);

                            //size
                            var sizeAndPositionCon = document.createElement('DIV');
                            sizeAndPositionCon.className = 'live-editor-popup-options-params-size-pos';

                            var sizeCon = document.createElement('DIV');
                            sizeCon.className = 'live-editor-popup-options-params-size';
                            sizeAndPositionCon.appendChild(sizeCon);

                            var sizeWidthCon = document.createElement('DIV');
                            sizeWidthCon.className = 'live-editor-popup-options-params-size-width';
                            sizeCon.appendChild(sizeWidthCon);
                            var widthText = document.createElement('SPAN');
                            widthText.innerHTML = 'Width: ';
                            sizeWidthCon.appendChild(widthText);
                            var width = document.createElement('INPUT');
                            width.type = 'text';
                            width.value = _selectedSource.sourceInstance.rect._width;
                            sizeWidthCon.appendChild(width);

                            var sizeHeightCon = document.createElement('DIV');
                            sizeHeightCon.className = 'live-editor-popup-options-params-size-height';
                            sizeCon.appendChild(sizeHeightCon);
                            var heightText = document.createElement('SPAN');
                            heightText.innerHTML = 'Height: ';
                            sizeHeightCon.appendChild(heightText);
                            var height = document.createElement('INPUT');
                            height.type = 'text';
                            height.value = _selectedSource.sourceInstance.rect._height;
                            sizeHeightCon.appendChild(height);


                            //position
                            var positionCon = document.createElement('DIV');
                            positionCon.className = 'live-editor-popup-options-params-position';
                            sizeAndPositionCon.appendChild(positionCon);

                            var topPositionCon = document.createElement('DIV');
                            topPositionCon.className = 'live-editor-popup-options-params-position-top';
                            positionCon.appendChild(topPositionCon);
                            var topText = document.createElement('SPAN');
                            topText.innerHTML = 'Top: ';
                            topPositionCon.appendChild(topText);
                            var topPos = document.createElement('INPUT');
                            topPos.type = 'text';
                            topPos.value = _selectedSource.sourceInstance.rect._y;
                            topPositionCon.appendChild(topPos);

                            var leftPositionCon = document.createElement('DIV');
                            leftPositionCon.className = 'live-editor-popup-options-params-position-left';
                            positionCon.appendChild(leftPositionCon);
                            var leftText = document.createElement('SPAN');
                            leftText.innerHTML = 'Left: ';
                            leftPositionCon.appendChild(leftText);
                            var leftPos = document.createElement('INPUT');
                            leftPos.type = 'text';
                            leftPos.value = _selectedSource.sourceInstance.rect._x;
                            leftPositionCon.appendChild(leftPos);


                            dialogBodyInner.appendChild(keepRatioCon);
                            dialogBodyInner.appendChild(sizeAndPositionCon);

                            _layoutParamsEl = dialogBodyInner;

                            function updateSourceRect () {
                                var canvasSize = tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.getCanvasSize();
                                var keepAspectRatio = keepRatio.checked;
                                var currentWidth = _selectedSource.sourceInstance.rect._width;
                                var currentHeight = _selectedSource.sourceInstance.rect._height;
                                var w = parseFloat(width.value);
                                var h = parseFloat(height.value);
                                var x = parseFloat(leftPos.value);
                                var y = parseFloat(topPos.value);

                                var ratio = currentWidth / currentHeight;

                                log('updateSourceRect width', w, currentWidth)
                                log('updateSourceRect height', h, currentHeight)
                                log('updateSourceRect ratio', ratio)

                                var resWidth, resHeight;
                                if(keepAspectRatio) {
                                    if (w != currentWidth) {
                                        resWidth = w;
                                        resHeight = parseInt(resWidth / ratio);
                                        height.value = resHeight;
                                        log('updateSourceRect 1 resHeight', resHeight)
                                    } else if (h != currentHeight) {

                                        resHeight = h;
                                        resWidth = parseInt(resHeight * ratio);
                                        width.value = resWidth;
                                        log('updateSourceRect 2 resWidth', resWidth)

                                    } else {
                                        log('updateSourceRect 3')
                                        resWidth = currentWidth;
                                        resHeight = currentHeight;
                                    }
                                } else {
                                    if (w != currentWidth) {
                                        resWidth = w;
                                        resHeight = h;
                                    } else if (h != currentHeight) {
                                        resHeight = h;
                                        resWidth = w;
                                    } else {
                                        resWidth = currentWidth;
                                        resHeight = currentHeight;
                                    }
                                }

                                _selectedSource.sourceInstance.updateRect(resWidth, resHeight, x, y)
                            }
                            width.addEventListener('blur', updateSourceRect)
                            height.addEventListener('blur', updateSourceRect)
                            topPos.addEventListener('blur', updateSourceRect)
                            leftPos.addEventListener('blur', updateSourceRect)
                            _selectedSource.sourceInstance.on('rectChanged', function () {
                                width.value = _selectedSource.sourceInstance.rect._width;
                                height.value = _selectedSource.sourceInstance.rect._height;
                                leftPos.value = _selectedSource.sourceInstance.rect._x;
                                topPos.value = _selectedSource.sourceInstance.rect._y;
                            });

                            _generatedDialogs.push({
                                source: _selectedSource,
                                dialog:  dialogBodyInner
                            })
                            return dialogBodyInner;
                        }

                        function showParams() {
                            _dialogBody.innerHTML = '';
                            _dialogBody.appendChild(createParamsList());
                        }

                        function showDialog(source) {
                            _selectedSource = source;
                            log('showDialog', this, _activeView)
                            hideActiveView();
                            showParams();
                            _optionsParentEl.appendChild(_dialogEl);
                            _activeView = this;
                        }

                        function hideDialog() {
                            log('hideDialog', _dialogEl)

                            if(_dialogEl && _dialogEl.parentNode != null) {
                                _dialogEl.parentNode.removeChild(_dialogEl);
                            }
                        }

                        log('addImagePopup')
                        _dialogEl = document.createElement('DIV');
                        _dialogEl.className = 'live-editor-popup-options-dialog';
                        var dialogBody = _dialogBody = document.createElement('DIV');
                        dialogBody.className = 'live-editor-popup-options-body';

                        //dialogBody.appendChild(createParamsList());
                        _dialogEl.appendChild(dialogBody);

                        return {
                            hide: hideDialog,
                            show: showDialog,
                            showParams: showParams
                        }
                    }())

                    var videoSourceOptions = (function (source) {
                        var _dialogEl = null;
                        var _optionsTabs = null;
                        var _dialogBody = null;
                        var _layoutParamsEl = null;
                        var _selectedSource = null;
                        var _generatedDialogs = [];

                        function createParamsList() {

                            for(let d in _generatedDialogs) {
                                if(_generatedDialogs[d].source == _selectedSource) {
                                    return _generatedDialogs[d].dialog;
                                }
                            }

                            var dialogBodyInner = document.createElement('DIV');
                            dialogBodyInner.className = 'live-editor-popup-options-body-inner live-editor-popup-options-params-body';

                            var mediaControlsEl = createMediaControls(_selectedSource);

                            var keepRatioCon = document.createElement('DIV');
                            var keepRatio = document.createElement('INPUT');
                            keepRatio.type = 'checkbox';
                            keepRatio.id = 'live-editor-popup-options-keep-ratio';
                            keepRatio.name = 'keepRatio';
                            keepRatio.checked = true;
                            var keepRatioLabel = document.createElement('Label');
                            keepRatioLabel.appendChild(keepRatio);
                            keepRatioLabel.appendChild(document.createTextNode("Keep ratio"));
                            keepRatioCon.appendChild(keepRatioLabel);

                            //size
                            var sizeAndPositionCon = document.createElement('DIV');
                            sizeAndPositionCon.className = 'live-editor-popup-options-params-size-pos';

                            var sizeCon = document.createElement('DIV');
                            sizeCon.className = 'live-editor-popup-options-params-size';
                            sizeAndPositionCon.appendChild(sizeCon);

                            var sizeWidthCon = document.createElement('DIV');
                            sizeWidthCon.className = 'live-editor-popup-options-params-size-width';
                            sizeCon.appendChild(sizeWidthCon);
                            var widthText = document.createElement('SPAN');
                            widthText.innerHTML = 'Width: ';
                            sizeWidthCon.appendChild(widthText);
                            var width = document.createElement('INPUT');
                            width.type = 'text';
                            width.value = _selectedSource.sourceInstance.rect._width;
                            sizeWidthCon.appendChild(width);

                            var sizeHeightCon = document.createElement('DIV');
                            sizeHeightCon.className = 'live-editor-popup-options-params-size-height';
                            sizeCon.appendChild(sizeHeightCon);
                            var heightText = document.createElement('SPAN');
                            heightText.innerHTML = 'Height: ';
                            sizeHeightCon.appendChild(heightText);
                            var height = document.createElement('INPUT');
                            height.type = 'text';
                            height.value = _selectedSource.sourceInstance.rect._height;
                            sizeHeightCon.appendChild(height);


                            //position
                            var positionCon = document.createElement('DIV');
                            positionCon.className = 'live-editor-popup-options-params-position';
                            sizeAndPositionCon.appendChild(positionCon);

                            var topPositionCon = document.createElement('DIV');
                            topPositionCon.className = 'live-editor-popup-options-params-position-top';
                            positionCon.appendChild(topPositionCon);
                            var topText = document.createElement('SPAN');
                            topText.innerHTML = 'Top: ';
                            topPositionCon.appendChild(topText);
                            var topPos = document.createElement('INPUT');
                            topPos.type = 'text';
                            topPos.value = _selectedSource.sourceInstance.rect._y;
                            topPositionCon.appendChild(topPos);

                            var leftPositionCon = document.createElement('DIV');
                            leftPositionCon.className = 'live-editor-popup-options-params-position-left';
                            positionCon.appendChild(leftPositionCon);
                            var leftText = document.createElement('SPAN');
                            leftText.innerHTML = 'Left: ';
                            leftPositionCon.appendChild(leftText);
                            var leftPos = document.createElement('INPUT');
                            leftPos.type = 'text';
                            leftPos.value = _selectedSource.sourceInstance.rect._x;
                            leftPositionCon.appendChild(leftPos);


                            dialogBodyInner.appendChild(mediaControlsEl);
                            dialogBodyInner.appendChild(keepRatioCon);
                            dialogBodyInner.appendChild(sizeAndPositionCon);

                            _layoutParamsEl = dialogBodyInner;

                            function updateSourceRect () {
                                var canvasSize = tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.getCanvasSize();
                                var keepAspectRatio = keepRatio.checked;
                                var currentWidth = _selectedSource.sourceInstance.rect._width;
                                var currentHeight = _selectedSource.sourceInstance.rect._height;
                                var w = parseFloat(width.value);
                                var h = parseFloat(height.value);
                                var x = parseFloat(leftPos.value);
                                var y = parseFloat(topPos.value);

                                var ratio = currentWidth / currentHeight;

                                log('updateSourceRect width', w, currentWidth)
                                log('updateSourceRect height', h, currentHeight)
                                log('updateSourceRect ratio', ratio)

                                var resWidth, resHeight;
                                if(keepAspectRatio) {
                                    if (w != currentWidth) {
                                        resWidth = w;
                                        resHeight = parseInt(resWidth / ratio);
                                        height.value = resHeight;
                                        log('updateSourceRect 1 resHeight', resHeight)
                                    } else if (h != currentHeight) {

                                        resHeight = h;
                                        resWidth = parseInt(resHeight * ratio);
                                        width.value = resWidth;
                                        log('updateSourceRect 2 resWidth', resWidth)

                                    } else {
                                        log('updateSourceRect 3')
                                        resWidth = currentWidth;
                                        resHeight = currentHeight;
                                    }
                                } else {
                                    if (w != currentWidth) {
                                        resWidth = w;
                                        resHeight = h;
                                    } else if (h != currentHeight) {
                                        resHeight = h;
                                        resWidth = w;
                                    } else {
                                        resWidth = currentWidth;
                                        resHeight = currentHeight;
                                    }
                                }

                                _selectedSource.sourceInstance.updateRect(resWidth, resHeight, x, y)
                            }
                            width.addEventListener('blur', updateSourceRect)
                            height.addEventListener('blur', updateSourceRect)
                            topPos.addEventListener('blur', updateSourceRect)
                            leftPos.addEventListener('blur', updateSourceRect)
                            _selectedSource.sourceInstance.on('rectChanged', function () {
                                width.value = _selectedSource.sourceInstance.rect._width;
                                height.value = _selectedSource.sourceInstance.rect._height;
                                leftPos.value = _selectedSource.sourceInstance.rect._x;
                                topPos.value = _selectedSource.sourceInstance.rect._y;
                            });

                            _generatedDialogs.push({
                                source: _selectedSource,
                                dialog:  dialogBodyInner
                            })
                            return dialogBodyInner;
                        }

                        function showParams() {
                            _dialogBody.innerHTML = '';
                            _dialogBody.appendChild(createParamsList());
                        }

                        function showDialog(source) {
                            _selectedSource = source;
                            log('showDialog', this, _activeView)
                            hideActiveView();
                            showParams();
                            _optionsParentEl.appendChild(_dialogEl);
                            _activeView = this;
                        }

                        function hideDialog() {
                            log('hideDialog', _dialogEl)

                            if(_dialogEl && _dialogEl.parentNode != null) {
                                _dialogEl.parentNode.removeChild(_dialogEl);
                            }
                        }

                        log('addImagePopup')
                        _dialogEl = document.createElement('DIV');
                        _dialogEl.className = 'live-editor-popup-options-dialog';
            
                        var dialogBody = _dialogBody = document.createElement('DIV');
                        dialogBody.className = 'live-editor-popup-options-body';

                        //dialogBody.appendChild(createParamsList());
                        _dialogEl.appendChild(dialogBody);

                        return {
                            hide: hideDialog,
                            show: showDialog,
                            showParams: showParams
                        }
                    }())

                    var audioSourceOptions = (function (source) {
                        var _dialogEl = null;
                        var _optionsTabs = null;
                        var _dialogBody = null;
                        var _layoutParamsEl = null;
                        var _selectedSource = null;
                        var _generatedDialogs = [];

                        function createParamsList() {
                            log('audioSourceOptions: createParamsList',  _selectedSource.params);
                            for(let d in _generatedDialogs) {
                                if(_generatedDialogs[d].source == _selectedSource) {
                                    return _generatedDialogs[d].dialog;
                                }
                            }

                            var paramsBody = document.createElement('DIV')
                            paramsBody.className = 'live-editor-popup-options-body-inner live-editor-popup-options-params-body';

                            var mediaControlsEl = createMediaControls(_selectedSource);
                            paramsBody.appendChild(mediaControlsEl);

                            _generatedDialogs.push({
                                source: _selectedSource,
                                dialog:  paramsBody,
                            })
                            return paramsBody;
                        }

                        function showParams() {
                            log('showParams', this, _activeView)

                            _dialogBody.innerHTML = '';
                            _dialogBody.appendChild(createParamsList());
                        }

                        function showDialog(source) {
                            _selectedSource = source;
                            log('audioSourceOptions: showDialog', this, _activeView)
                            hideActiveView();
                            showParams();
                            _optionsParentEl.appendChild(_dialogEl);
                            _activeView = this;
                        }

                        function hideDialog() {
                            log('audioSourceOptions: hideDialog', _dialogEl)

                            if(_dialogEl && _dialogEl.parentNode != null) {
                                _dialogEl.parentNode.removeChild(_dialogEl);
                            }
                        }

                        log('audioSourceOptions pupup')
                        _dialogEl = document.createElement('DIV');
                        _dialogEl.className = 'live-editor-popup-options-dialog';
                    
                        var dialogBody = _dialogBody = document.createElement('DIV');
                        dialogBody.className = 'live-editor-popup-options-body';

                        //dialogBody.appendChild(createParamsList());
                        _dialogEl.appendChild(dialogBody);

                        return {
                            hide: hideDialog,
                            show: showDialog,
                            showParams: showParams
                        }
                    }())

                    var webrtcAudioSourceOptions = (function (source) {
                        var _dialogEl = null;
                        var _optionsTabs = null;
                        var _dialogBody = null;
                        var _selectedSource = null;
                        var _generatedDialogs = [];

                        function createParamsList() {
                            log('audioSourceOptions: createParamsList',  _selectedSource.params);
                            for(let d in _generatedDialogs) {
                                if(_generatedDialogs[d].source == _selectedSource) {
                                    return _generatedDialogs[d].dialog;
                                }
                            }

                            var paramsBody = document.createElement('DIV')
                            paramsBody.className = 'live-editor-popup-options-body-inner live-editor-popup-options-params-body';

                            var mediaControlsEl = createMediaControls(_selectedSource);
                            paramsBody.appendChild(mediaControlsEl);

                            _generatedDialogs.push({
                                source: _selectedSource,
                                dialog:  paramsBody,
                            })
                            return paramsBody;
                        }

                        function showParams() {
                            log('showParams', this, _activeView)

                            _dialogBody.innerHTML = '';
                            _dialogBody.appendChild(createParamsList());
                        }

                        function showDialog(source) {
                            _selectedSource = source;
                            log('audioSourceOptions: showDialog', this, _activeView)
                            hideActiveView();
                            showParams();
                            _optionsParentEl.appendChild(_dialogEl);
                            _activeView = this;
                        }

                        function hideDialog() {
                            log('audioSourceOptions: hideDialog', _dialogEl)

                            if(_dialogEl && _dialogEl.parentNode != null) {
                                _dialogEl.parentNode.removeChild(_dialogEl);
                            }
                        }

                        log('audioSourceOptions pupup')
                        _dialogEl = document.createElement('DIV');
                        _dialogEl.className = 'live-editor-popup-options-dialog';
                        
                        var dialogBody = _dialogBody = document.createElement('DIV');
                        dialogBody.className = 'live-editor-popup-options-body';

                        //dialogBody.appendChild(createParamsList());
                        _dialogEl.appendChild(dialogBody);

                        return {
                            hide: hideDialog,
                            show: showDialog,
                            showParams: showParams
                        }
                    }())

                    function update() {
                        var activeScene = scenesInterface.getActive();
                        var selectedSource = activeScene.sourcesInterface.getSelectedSource();
                        log('optionsColumn.update', selectedSource);

                        if (selectedSource != null) {
                            let sceneIsInactive = true;
                            let activeSceneSources = activeScene.sceneInstance.sources;
                            for (let i in activeSceneSources) {
                                if (activeSceneSources[i] == selectedSource.sourceInstance) {
                                    sceneIsInactive = false;
                                    break;
                                }                                
                            }
                            let activeSceneWebrtcSources = activeScene.sceneInstance.webrtcSources;
                            for (let i in activeSceneWebrtcSources) {
                                if (activeSceneWebrtcSources[i] == selectedSource.sourceInstance) {
                                    sceneIsInactive = false;
                                    break;
                                }                                
                            }
                            if(sceneIsInactive) {
                                optionsColumn.hideActiveView();
                                log('optionsColumn.update sceneIsInactive', selectedSource);
                                return;
                            }
                        }

                        if(selectedSource && selectedSource.listType != 'audio' && selectedSource.sourceInstance.sourceType == 'group' && selectedSource.sourceInstance.groupType == 'webrtc') {
                            log('optionsColumn.update 1');
                            optionsColumn.canvasLayoutOptions.show(selectedSource);
                        } else if(selectedSource && selectedSource.listType != 'audio' && selectedSource.sourceInstance.sourceType == 'webrtc') {
                            log('optionsColumn.update 2');
                            optionsColumn.webrtcParticipantOptions.show(selectedSource);
                        } else if(selectedSource && selectedSource.sourceInstance.sourceType == 'image') {
                            log('optionsColumn.update 3');
                            optionsColumn.imageSourceOptions.show(selectedSource);
                        } else if(selectedSource && selectedSource.sourceInstance.sourceType == 'video') {
                            log('optionsColumn.update 4');
                            optionsColumn.videoSourceOptions.show(selectedSource);
                        } else if(selectedSource && selectedSource.sourceInstance.sourceType == 'audio' && selectedSource.sourceInstance.sourceType != 'webrtc') {
                            log('optionsColumn.update 5');
                            optionsColumn.audioSourceOptions.show(selectedSource);
                        } else if(selectedSource && selectedSource.listType == 'audio' && selectedSource.sourceInstance.sourceType == 'webrtcaudio') {
                            log('optionsColumn.update 6');
                            //optionsColumn.webrtcAudioSourceOptions.show(selectedSource);
                        } else {
                            log('optionsColumn.update 7');
                            optionsColumn.hideActiveView();
                        }
                    }

                    function getSettingsDialog() {
                        return _optionsParentEl;
                    }

                    return {
                        canvasLayoutOptions: canvasLayoutOptions,
                        webrtcParticipantOptions: webrtcParticipantOptions,
                        imageSourceOptions: imageSourceOptions,
                        videoSourceOptions: videoSourceOptions,
                        audioSourceOptions: audioSourceOptions,
                        webrtcAudioSourceOptions: webrtcAudioSourceOptions,
                        hideActiveView: hideActiveView,
                        update: update,
                        getSettingsDialog: getSettingsDialog
                    }
                }())

                var globalMicAudioInterface = (function () {
                    var _audioTool;
                    var _globalMicIcon;
                    var _globalMicSource;

                    _globalMicSource = tool.livestreamingCanvasComposerTool.canvasComposer.audioComposer.addGlobalAudioSource({
                        title: 'Microphone'
                    });

                    let localAudioTracks = tool.webrtcSignalingLib.localParticipant().audioTracks(true);

                    if (localAudioTracks[0] != null && localAudioTracks[0].stream != null) {
                        log('localAudioTracks[0].stream', localAudioTracks[0].stream)
                        _globalMicSource.addStream(localAudioTracks[0].stream);
                    }


                    function declareOrRefreshEventHandlers() {
                        var webrtcSignalingLib = tool.webrtcSignalingLib;
                        webrtcSignalingLib.event.on('beforeSwitchRoom', function (e) {
                            tool.updateWebrtcSignalingLibInstance(e.newWebrtcSignalingLibInstance);
                            declareOrRefreshEventHandlers();
                        });

                        webrtcSignalingLib.event.on('trackAdded', function (e) {
                            if (!e.participant.isLocal || e.track.kind != 'audio') return;
                            _globalMicSource.addStream(e.track.stream);
                        });
    
                        webrtcSignalingLib.event.on('micEnabled', function () {
                            _globalMicSource.connect();
                        });
                        webrtcSignalingLib.event.on('micDisabled', function () {
                            _globalMicSource.disconnect();
                        });
                    }

                    declareOrRefreshEventHandlers();

                    function createControlsButtons() {
                    
                    }

                    return {
                        createControlsButtons: createControlsButtons
                    }
                }());

                var textChatsInterface = (function () {
                    var _relatedTool = null;
                    var _chatRooms = [];
                    var _publicChatRoomStream = null;
                    var _chatToolContainer = null;
                    var _currentActiveChatRoom = null;
                    var _chatEl = null;

                    function onStreamClickHandler(chatRoomData) {
                        if(_currentActiveChatRoom && _currentActiveChatRoom.chatTool) {
                            if(_currentActiveChatRoom.chatToolElement && _currentActiveChatRoom.chatToolElement.parentElement) {
                                _currentActiveChatRoom.chatToolElement.parentElement.removeChild(_currentActiveChatRoom.chatToolElement);
                                _currentActiveChatRoom.chatTool.seen(false);
                            }
                        }
                        //_chatToolContainer.innerHTML = '';
                        if(chatRoomData.chatToolElement != null) {
                            _chatToolContainer.appendChild(chatRoomData.chatToolElement);
                            _currentActiveChatRoom = chatRoomData;
                            chatRoomData.chatTool.seen(true);
                        } else {
                            var chatToolElement = document.createElement('DIV');
                            chatToolElement.className = 'live-editor-popup-chat-tool-el';
                            _chatToolContainer.appendChild(chatToolElement);
                            chatRoomData.chatToolElement = chatToolElement;
                            
                            Q.activate(
                                chatToolElement.appendChild(
                                    Q.Tool.setUpElement(
                                        "div",
                                        "Streams/chat",
                                        {
                                            publisherId: chatRoomData.publisherId,
                                            streamName: chatRoomData.streamName
                                        }
                                    )
                                ),
                                {},
                                function () {
                                    chatRoomData.chatTool = this;
                                    _currentActiveChatRoom = chatRoomData;
                                    chatRoomData.chatTool.seen(true);
                                    log('chatRoomData.chatTool', chatRoomData.chatTool);
                                }
                            );
                        }
                        

                    }
                
                    function onRelatedToolUpdate(relatedStreams) {
                        if(!_relatedTool) return;
                        let previewRelatedItems = _relatedTool.element.querySelectorAll('.Streams_related_stream');
                        let i, streamsElementsNum = previewRelatedItems.length;
                        for(i = 0; i < streamsElementsNum; i++) {
                            let roomExists = false;
                            for(let r in _chatRooms) {
                                if(previewRelatedItems[i] == _chatRooms[r].streamElement) {
                                    roomExists = true;
                                    break;
                                }
                            }
                            if(roomExists) continue;

                            let chatRoomData = {
                                streamElement: previewRelatedItems[i],
                                chatToolElement: null,
                                chatTool: null,
                                chatStream: null,
                                isPublicChat: false,
                                publisherId: previewRelatedItems[i].dataset.publisherid,
                                streamName: previewRelatedItems[i].dataset.streamname
                            };
                            _chatRooms.push(chatRoomData);

                            previewRelatedItems[i].addEventListener('click', function() {
                                onStreamClickHandler(chatRoomData);
                            });

                            let unseenMsgCounter = document.createElement('DIV');
                            unseenMsgCounter.className = 'live-editor-popup-chat-tool-msg-counter';
                            previewRelatedItems[i].appendChild(unseenMsgCounter);
                            Q.Streams.Message.Total.setUpElement(unseenMsgCounter, previewRelatedItems[i].dataset.publisherid, previewRelatedItems[i].dataset.streamname, 'Streams/chat/message', tool);                 
                        }

                        //remove closed rooms frol the list
                        for(let e = _chatRooms.length - 1; e >= 0; e--) {
                            let roomClosed = true;
                            for(let s = 0; s < streamsElementsNum; s++) {
                                if(_chatRooms[e].streamElement == previewRelatedItems[s]) {
                                    roomClosed = false;
                                    break;
                                }
                            }

                            if(roomClosed) {
                                if(_chatRooms[e].chatTool) {
                                    _chatRooms[e].chatTool.remove();
                                }
                                if(_chatRooms[e].chatToolElement && _chatRooms[e].chatToolElement.parentElement) {
                                    _chatRooms[e].chatToolElement.parentElement.removeChild(_chatRooms[e].chatToolElement);
                                }
                                _chatRooms.splice(e, 1);
                            }
                        }

                        //find stream of public chat room
                        for (var key in relatedStreams) {
                            if (relatedStreams.hasOwnProperty(key)) {
                                let publicAttr = relatedStreams[key].getAttribute('publicChat');
                                if (!_publicChatRoomStream && publicAttr == true) {
                                    _publicChatRoomStream = relatedStreams[key];
                                }

                                for(let r in _chatRooms) {
                                    if(relatedStreams[key].fields.name == _chatRooms[r].streamName && !_chatRooms[r].chatStream) {
                                        _chatRooms[r].chatStream = relatedStreams[key];
                                        if(publicAttr == true) {
                                            _chatRooms[r].isPublicChat = true; 
                                            _chatRooms[r].streamElement.classList.add('live-editor-popup-chat-tool-public-room'); 
                                            if(!_currentActiveChatRoom) {
                                                _chatRooms[r].streamElement.click();
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    function createSection() {
                        if(_chatEl != null) return;
                        var chatBoxInner = _chatEl = document.createElement('DIV');
                        chatBoxInner.className = 'live-editor-popup-chat-inner';
    
                        var chatTabsCon = document.createElement('DIV');
                        chatTabsCon.className = 'live-editor-popup-chat-tabs-con';
                        chatBoxInner.appendChild(chatTabsCon);
    
                        var chatTabs = document.createElement('DIV');
                        chatTabs.className = 'live-editor-popup-chat-tabs';
                        chatTabsCon.appendChild(chatTabs);
    
                        var chatTabsTool = document.createElement('DIV');
                        chatTabsTool.className = 'live-editor-popup-chat-tabs-tool';
                        chatTabs.appendChild(chatTabsTool);
    
                        Q.activate(
                            Q.Tool.setUpElement(chatTabsTool, 'Streams/related', {
                                publisherId: tool.livestreamStream.fields.publisherId,
                                streamName: tool.livestreamStream.fields.name,
                                relationType: 'Streams/webrtc/livestream/chat',
                                tag: 'div',
                                isCategory: true,
                                realtime: true,
                                previewOptions: {
                                    closeable: false
                                },
                                onUpdate: function (e) {
                                    log('onUpdate', e, this)
                                    onRelatedToolUpdate(e.relatedStreams);
                                },
                                beforeRenderPreview: function (e) {
                                    log('beforeRenderPreview', e, this)
                                }
                            }),
                            {},
                            function () {
                                _relatedTool = this;
                            }
                        ); 
    
                        var chatBoxCon = document.createElement('DIV');
                        chatBoxCon.className = 'live-editor-popup-chat-box';
                        chatBoxInner.appendChild(chatBoxCon);
    
                        var chatToolContainer = _chatToolContainer = document.createElement('DIV');
                        chatToolContainer.className = 'live-editor-popup-chat-tool-con';
                        chatBoxCon.appendChild(chatToolContainer);
    
                        if(_chatBoxContainer) _chatBoxContainer.appendChild(chatBoxInner);

                        return chatBoxInner;
                    }

                    return {
                        createSection: createSection
                    }
                }());

                function showDropUpMenu(dropUpMenu, buttonThatOpensDropUpMenu) {

                    function hideOnClick(e) {
                        if (!(buttonThatOpensDropUpMenu.contains(e.target) || e.target.matches('.live-editor-popup-sources-add-menu'))
                            && dropUpMenu.classList.contains('live-editor-popup-sources-add-menu-show')) {
                            dropUpMenu.classList.remove('live-editor-popup-sources-add-menu-show');
                            window.removeEventListener('click', hideOnClick)
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    }
                    log('background', dropUpMenu)
                    if (dropUpMenu.classList.contains('live-editor-popup-sources-add-menu-show')) {
                        log('background 2')
                        dropUpMenu.classList.remove('live-editor-popup-sources-add-menu-show');
                    } else {
                        log('background 3')

                        dropUpMenu.classList.add('live-editor-popup-sources-add-menu-show');
                        window.addEventListener('mousedown', hideOnClick)

                        let openDropUpBtnRect = buttonThatOpensDropUpMenu.getBoundingClientRect();
                        let dropUpRect = dropUpMenu.getBoundingClientRect();
                        if(Q.info.isMobile) {
                            if(dropUpRect.height < openDropUpBtnRect.top) {
                                dropUpMenu.style.top = (openDropUpBtnRect.top - dropUpRect.height) + 'px';
                            } else if(dropUpRect.height > openDropUpBtnRect.top) {
                                if(dropUpRect.height <= window.innerHeight) {
                                    dropUpMenu.style.top = (openDropUpBtnRect.top - (dropUpRect.height - (dropUpRect.height - openDropUpBtnRect.top))) + 'px';
                                } else {
                                    dropUpMenu.style.maxHeight = '100vh';
                                    dropUpMenu.style.overflowY = 'scroll';
                                    dropUpMenu.style.top = '0px';
                                }
                            }
                            dropUpMenu.style.left = (openDropUpBtnRect.left + openDropUpBtnRect.width) + 'px';

                        } else {
                            dropUpMenu.style.left = (openDropUpBtnRect.left + openDropUpBtnRect.width) + 'px';
                            dropUpMenu.style.top = (openDropUpBtnRect.top - dropUpRect.height) + 'px';
                        }
                    }
                }

                function EventSystem() {

                    var events = {};

                    var CustomEvent = function (eventName) {

                        this.eventName = eventName;
                        this.callbacks = [];

                        this.registerCallback = function (callback) {
                            this.callbacks.push(callback);
                        }

                        this.unregisterCallback = function (callback) {
                            const index = this.callbacks.indexOf(callback);
                            if (index > -1) {
                                this.callbacks.splice(index, 1);
                            }
                        }

                        this.fire = function (data) {
                            const callbacks = this.callbacks.slice(0);
                            callbacks.forEach((callback) => {
                                callback(data);
                            });
                        }
                    }

                    var dispatch = function (eventName, data) {
                        const event = events[eventName];
                        if (event) {
                            event.fire(data);
                        }
                    }

                    var on = function (eventName, callback) {
                        let event = events[eventName];
                        if (!event) {
                            event = new CustomEvent(eventName);
                            events[eventName] = event;
                        }
                        event.registerCallback(callback);
                    }

                    var off = function (eventName, callback) {
                        const event = events[eventName];
                        if (event && event.callbacks.indexOf(callback) > -1) {
                            event.unregisterCallback(callback);
                            if (event.callbacks.length === 0) {
                                delete events[eventName];
                            }
                        }
                    }

                    var destroy = function () {
                        events = {};
                    }

                    return {
                        dispatch: dispatch,
                        on: on,
                        off: off,
                        destroy: destroy
                    }
                }

                function SimpleDialog(options) {
                    log('SimpleDialog', options);
                    var dialogInstance = this;
                    this.content = options.content;
                    this.rectangleToShowIn = options.rectangleToShowIn ? options.rectangleToShowIn : new DOMRect(0, 0, window.innerWidth, window.innerHeight);
                    this.title = options.title;
                    this.closeButtonEl = null;
                    this.dialogEl = null;
                    this.dialogBodyEl = null;
                    this.hoverTimeout = null;
                    this.resizeObserver = null;
                    this.active = false;
                    this.isChangingPosition = {x: null, y: null};
                    this.hide = function (e) {
                        if (!e || (e && e.target.offsetParent != dialogInstance.dialogEl || e.target == this.closeButtonEl)) {
                            if (dialogInstance.dialogEl.parentElement) dialogInstance.dialogEl.parentElement.removeChild(dialogInstance.dialogEl);
                            togglePopupClassName('', false, false);
                        }
                        dialogInstance.active = false;
                        //delete this;
                    }
        
                    this.show = function (e) {
                        let rectangleToShowIn = dialogInstance.rectangleToShowIn;
                        log('rectangleToShowIn', rectangleToShowIn)
                        dialogInstance.dialogEl.style.top = '';
                        dialogInstance.dialogEl.style.left = '';
                        dialogInstance.dialogEl.style.maxHeight = '';
                        dialogInstance.dialogEl.style.maxWidth = '';
                        togglePopupClassName('', false, false);

                        //let existingPopupDialog = document.querySelector('.live-editor-dialog-window');
                        //if (existingPopupDialog && existingPopupDialog.parentElement) existingPopupDialog.parentElement.removeChild(existingPopupDialog);
                
                        dialogInstance.dialogEl.style.position = 'fixed';
                        dialogInstance.dialogEl.style.visibility = 'hidden';

                        dialogInstance.dialogEl.style.top = rectangleToShowIn.y + 'px';
                        dialogInstance.dialogEl.style.left = rectangleToShowIn.x + 'px';
                      
                        if(dialogInstance.content instanceof Array) {
                            for(let i in dialogInstance.content) {
                                dialogInstance.dialogBodyEl.appendChild(dialogInstance.content[i])
                            }
                        } else {
                            dialogInstance.dialogBodyEl.appendChild(dialogInstance.content)
                        }
                        
                        document.body.appendChild(dialogInstance.dialogEl);
        
                        updateDialogPostion();
        
                        dialogInstance.dialogEl.style.visibility = '';  
                        dialogInstance.active = true;
                    }
        
                    function togglePopupClassName(classNameToApply, addXScrollClass, addYScrollClass) {
                        let classes = [
                            'live-editor-dialog-window-fullwidth-fullheight-position',
                            'live-editor-dialog-window-fullwidth-mid-position',
                            'live-editor-dialog-window-mid-mid-position',
                            'live-editor-dialog-window-mid-fullheight-position',

                        ];
                        for (let i in classes) {
                            if (classes[i] == classNameToApply || (classes[i] == 'live-editor-dialog-window-x-scroll' && addXScrollClass) || (classes[i] == 'live-editor-dialog-window-y-scroll' && addYScrollClass)) {
                                continue;
                            }
                            dialogInstance.dialogEl.classList.remove(classes[i]);
                        }
        
                        if (classNameToApply && classNameToApply != '' && !dialogInstance.dialogEl.classList.contains(classNameToApply)) {
                            dialogInstance.dialogEl.classList.add(classNameToApply);
                        }
        
                        if (addXScrollClass) {
                            dialogInstance.dialogEl.classList.add('live-editor-dialog-window-x-scroll');
                        }
                        if (addYScrollClass) {
                            dialogInstance.dialogEl.classList.add('live-editor-dialog-window-y-scroll');
                        }
                    }

                    function updateDialogPostion(animate) {
                        dialogInstance.isChangingPosition.y = true;
                        let rectangleToShowIn = dialogInstance.rectangleToShowIn;
                        let dialogRect = dialogInstance.dialogEl.getBoundingClientRect();
        
                        let midXOfRectangleToShowIn = rectangleToShowIn.x + (rectangleToShowIn.width / 2);
                        let midYOfRectangleToShowIn = rectangleToShowIn.y + (rectangleToShowIn.height / 2);

                        if(dialogRect.width <= rectangleToShowIn.width) {
                            dialogInstance.dialogEl.style.left = midXOfRectangleToShowIn - (dialogRect.width / 2) + 'px';
                        } else {
                            dialogInstance.dialogEl.style.left = rectangleToShowIn.x + 'px';
                            dialogInstance.dialogEl.style.width = rectangleToShowIn.width + 'px';
                        }
                        
                        dialogRect = dialogInstance.dialogEl.getBoundingClientRect();
                        if(dialogRect.height <= rectangleToShowIn.height) {
                            if(!animate) {
                                dialogInstance.dialogEl.style.top = midYOfRectangleToShowIn - (dialogRect.height / 2) + 'px';
                            } else {
                                requestAnimationFrame(function(timestamp){
                                    let startTime = timestamp || new Date().getTime()
                                    moveit(timestamp, dialogInstance.dialogEl, { x: null, y: midYOfRectangleToShowIn - (dialogRect.height / 2) }, {x: null, y: dialogRect.y}, 300, startTime, function () {
                                        dialogInstance.isChangingPosition.y = false;
                                    });
                                })
                            }
                        } else {
                            if(!animate) {
                                dialogInstance.dialogEl.style.top = rectangleToShowIn.y + 'px';
                            } else {
                                requestAnimationFrame(function(timestamp){
                                    let startTime = timestamp || new Date().getTime()
                                    moveit(timestamp, dialogInstance.dialogEl, { x: null, y: rectangleToShowIn.y }, {x: null, y: dialogRect.y}, 300, startTime, function () {
                                        dialogInstance.isChangingPosition.y = false;
                                    });
                                })
                            }
                            dialogInstance.dialogEl.style.height = rectangleToShowIn.height + 'px';
                        }

                        dialogRect = dialogInstance.dialogEl.getBoundingClientRect();

                        if(dialogRect.height < rectangleToShowIn.height) {
                            if(dialogRect.width < rectangleToShowIn.width) {
                                togglePopupClassName('live-editor-dialog-window-mid-mid-position', false, false);
                            } else {
                                togglePopupClassName('live-editor-dialog-window-fullwidth-mid-position', false, false);
                            }
                        } else {
                            if(dialogRect.width < rectangleToShowIn.width) {
                                togglePopupClassName('live-editor-dialog-window-mid-fullheight-position', false, true);
                            } else {
                                togglePopupClassName('live-editor-dialog-window-fullwidth-fullheight-position', false, true);
                            }
                        }

                        if(!animate) dialogInstance.isChangingPosition.y = false;

                        function moveit(timestamp, elementToMove, distXY, startXY, duration, starttime, onAnimationEnd){
                            var timestamp = timestamp || new Date().getTime()
                            var runtime = timestamp - starttime
                            var progress = runtime / duration;
                            progress = Math.min(progress, 1);

                            if(distXY.y != null) elementToMove.style.top = (startXY.y + (distXY.y - startXY.y) * progress) + 'px';
                            if(distXY.x != null) elementToMove.style.left = (startXY.x + (distXY.x - startXY.x) * progress) + 'px';
                            if (runtime < duration){
                                requestAnimationFrame(function(timestamp){
                                    moveit(timestamp, elementToMove, distXY, startXY, duration, starttime, onAnimationEnd)
                                })
                            } else {
                                if(distXY.y != null) elementToMove.style.top = distXY.y + 'px';
                                if(distXY.x != null) elementToMove.style.left = distXY.x + 'px';
                                if(onAnimationEnd) onAnimationEnd();
                            }
                        }
                    }
        
                    this.dialogEl = document.createElement('DIV');
                    this.dialogEl.className = 'live-editor-dialog-window';
                    if(options.className != null) {
                        this.dialogEl.classList.add(...options.className.split(' '));
                    }
                    this.closeButtonEl = document.createElement('DIV');
                    this.closeButtonEl.className = 'live-editor-close-sign';
                    this.dialogEl.appendChild(this.closeButtonEl);

                    var dialogTitle = document.createElement('DIV');
                    dialogTitle.innerHTML = this.title;
                    dialogTitle.className = 'live-editor-dialog-window-header';
                    this.dialogEl.appendChild(dialogTitle);

                    this.dialogBodyEl = document.createElement('DIV');
                    this.dialogBodyEl.className = 'live-editor-dialog-window-body';
                    this.dialogEl.appendChild(this.dialogBodyEl);

                    this.closeButtonEl.addEventListener('click', function (e) {
                        dialogInstance.hide(e);
                    });

                    this.show();

                    Q.activate(
                        Q.Tool.setUpElement(
                            dialogInstance.dialogEl,
                            "Q/resize",
                            {
                                move: true,
                                elementPosition: 'fixed',
                                activateOnElement: dialogTitle,
                                keepInitialSize: true,
                                resize: false,
                                active: true,
                                moveWithinArea: 'window',
                            }
                        ),
                        {},
                        function () {

                        }
                    );

                    this.resizeObserver = new ResizeObserver(function (entries) {
                        for (const entry of entries) {
                            let width = entry.contentBoxSize && entry.contentBoxSize.length != 0 ? entry.contentBoxSize[0].inlineSize : entry.contentRect.width;
                            let height = entry.contentBoxSize  && entry.contentBoxSize.length != 0 ? entry.contentBoxSize[0].blockSize : entry.contentRect.height;
                            if(dialogInstance.isChangingPosition.x || dialogInstance.isChangingPosition.y) {
                                continue;
                            }

                            updateDialogPostion(true);
                        }
                      
                      });
                      
                      this.resizeObserver.observe(this.dialogEl);
        
                    /*this.element.addEventListener('click', function (e) {
                        dialogInstance.show(e);
                    });*/
                }

                function PopupDialog(element, options) {
                    var pupupInstance = this;
                    this.element = element;
                    this.content = options.content;
                    this.closeButtonEl = null;
                    this.popupDialogEl = null;
                    this.hoverTimeout = null;
                    this.active = false;
                    this.hide = function (e) {
                        if (!e || (e && (e.target == this.closeButtonEl || !pupupInstance.popupDialogEl.contains(e.target)))) {
                            if (pupupInstance.popupDialogEl.parentElement) pupupInstance.popupDialogEl.parentElement.removeChild(pupupInstance.popupDialogEl);
        
                            togglePopupClassName('', false, false);
                            this.active = false;     

                            if (!Q.info.useTouchEvents) {
                                window.removeEventListener('click', pupupInstance.hide);
                            } else {
                                window.removeEventListener('touchend', pupupInstance.hide);
                            }                   
                        }
                    }
        
                    this.show = function (e) {        
                        pupupInstance.popupDialogEl.style.top = '';
                        pupupInstance.popupDialogEl.style.left = '';
                        pupupInstance.popupDialogEl.style.maxHeight = '';
                        pupupInstance.popupDialogEl.style.maxWidth = '';
                        togglePopupClassName('', false, false);
                        let existingPopupDialog = document.querySelector('.live-editor-popup-dialog');
                        if (existingPopupDialog && existingPopupDialog.parentElement) existingPopupDialog.parentElement.removeChild(existingPopupDialog);
        
                        let triggeringElementRect = pupupInstance.element.getBoundingClientRect();
        
                        pupupInstance.popupDialogEl.style.position = 'fixed';
                        pupupInstance.popupDialogEl.style.visibility = 'hidden';
                        pupupInstance.popupDialogEl.style.top = triggeringElementRect.y + triggeringElementRect.height + 20 + 'px';
                        pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + (triggeringElementRect.width / 2)) + 'px';
                      
                        if(pupupInstance.content instanceof Array) {
                            for(let i in pupupInstance.content) {
                                pupupInstance.popupDialogEl.appendChild(pupupInstance.content[i])
                            }
                        } else {
                            pupupInstance.popupDialogEl.appendChild(pupupInstance.content)
                        }
                        
                        document.body.appendChild(pupupInstance.popupDialogEl);

                        let popupRect = pupupInstance.popupDialogEl.getBoundingClientRect();
                        pupupInstance.popupDialogEl.style.left = ((triggeringElementRect.x + (triggeringElementRect.width / 2)) - (popupRect.width / 2)) + 'px';
        
                        //if ther is no room below (bottom) of button, show dialog above if there is enough room
        
                        let roomBelowButton = window.innerHeight - (triggeringElementRect.y + triggeringElementRect.height);
                        let roomBelowStartOfButton = window.innerHeight - triggeringElementRect.y;
                        let roomBelowMidOfButton = window.innerHeight - (triggeringElementRect.y + (triggeringElementRect.height / 2));
                        let roomAboveButton = triggeringElementRect.y;
                        let roomAboveEndOfButton = triggeringElementRect.y + triggeringElementRect.height;
                        let roomAboveMidOfButton = triggeringElementRect.y + (triggeringElementRect.height / 2);
                        let roomToLeftOfButton = triggeringElementRect.x;
                        let roomToRightOfStartOfButton = (window.innerWidth - triggeringElementRect.x);
                        let roomToLeftOfMidButton = triggeringElementRect.x + (triggeringElementRect.x / 2);
                        let roomToRightOfButton = (window.innerWidth - (triggeringElementRect.x + triggeringElementRect.width));
                        let roomToRightOfMidButton = (window.innerWidth - (triggeringElementRect.x + (triggeringElementRect.width / 2)));
                        let roomToLeftOfEndOfButton = triggeringElementRect.x + triggeringElementRect.width;
                        let midYOfTriggeringElement = triggeringElementRect.y + triggeringElementRect.height / 2;
                        let midXOfTriggeringElement = triggeringElementRect.x + triggeringElementRect.width / 2;
        
                        if (roomBelowButton >= popupRect.height + 20) {
                            //log('show 1');
                            if (roomToLeftOfMidButton >= (popupRect.width / 2) && roomToRightOfMidButton >= (popupRect.width / 2)) {
                                //log('show 1.1');
                                pupupInstance.popupDialogEl.style.top = triggeringElementRect.y + triggeringElementRect.height + 20 + 'px';
                                pupupInstance.popupDialogEl.style.left = ((triggeringElementRect.x + (triggeringElementRect.width / 2)) - (popupRect.width / 2)) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-mid-below-position', false, false);
                            } else if (roomToRightOfStartOfButton >= popupRect.width) {
                                //log('show 1.2');
                                pupupInstance.popupDialogEl.style.top = triggeringElementRect.y + triggeringElementRect.height + 20 + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-right-below-position', false, false);
                            } else if (roomToLeftOfEndOfButton >= popupRect.width) {
                                //log('show 1.3');
                                pupupInstance.popupDialogEl.style.top = triggeringElementRect.y + triggeringElementRect.height + 20 + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + triggeringElementRect.width) - popupRect.width + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-left-below-position', false, false);
                            } else if (popupRect.width <= window.innerWidth) {
                                //log('show 1.4');
                                pupupInstance.popupDialogEl.style.top = triggeringElementRect.y + triggeringElementRect.height + 20 + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - roomToLeftOfButton) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-winmid-below-position', false, false);
                            } else {
                                //log('show 1.5');
                                pupupInstance.popupDialogEl.style.top = triggeringElementRect.y + triggeringElementRect.height + 20 + 'px';
                                pupupInstance.popupDialogEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-popup-dialog-fullwidth-below-position', true, false);
                            }
                        } else if(roomAboveButton >= popupRect.height + 20) {
                            //log('show 2');
                            if (roomToLeftOfMidButton >= (popupRect.width / 2) && roomToRightOfMidButton >= (popupRect.width / 2)) {
                                //log('show 2.1');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y - popupRect.height - 20) + 'px';
                                pupupInstance.popupDialogEl.style.left = ((triggeringElementRect.x + (triggeringElementRect.width / 2)) - (popupRect.width / 2)) + 'px';
                                togglePopupClassName('live-editor-popup-dialog-mid-above-position', false, false);
                            } else if (roomToRightOfStartOfButton >= popupRect.width) {
                                //log('show 2.2');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y - popupRect.height - 20) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-right-above-position', false, false);
                            } else if (roomToLeftOfEndOfButton >= popupRect.width) {
                                //log('show 2.3');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y - popupRect.height - 20) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + triggeringElementRect.width - popupRect.width) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-left-above-position', false, false);
                            } else if (window.innerWidth >= popupRect.width) {
                                //log('show 2.4');;
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y - popupRect.height - 20) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - popupRect.width / 2) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-winmid-above-position', false, false);
                            } else {
                                //log('show 2.5');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y - popupRect.height - 20) + 'px';
                                pupupInstance.popupDialogEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-popup-dialog-fullwidth-above-position', true, false);
                            }
                        } else if (Math.min(roomBelowMidOfButton, roomAboveMidOfButton) >= popupRect.height / 2) {
                            //log('show 3');
                            if (roomToRightOfButton >= popupRect.width + 20) {
                                //log('show 3.1');
                                pupupInstance.popupDialogEl.style.top = midYOfTriggeringElement - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + 20) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-right-mid-position', false, false);
                            } else if (roomToLeftOfButton >= popupRect.width + 20) {
                                //log('show 3.2');
                                pupupInstance.popupDialogEl.style.top = midYOfTriggeringElement - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - popupRect.width - 20) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-left-mid-position', false, false);
                            } else {
                                //log('show 3.3');
                                pupupInstance.popupDialogEl.style.top = midYOfTriggeringElement - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-popup-dialog-fullwidth-mid-position', true, false);
                            }
                        } else if (roomBelowStartOfButton >= popupRect.height) {
                            //log('show 4');
                            if (roomToRightOfButton >= popupRect.width + 20) {
                                //log('show 4.1');
                                pupupInstance.popupDialogEl.style.top = triggeringElementRect.y + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + 20) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-right-belowtop-position', false, false);
                            } else if (roomToLeftOfButton >= popupRect.width + 20) {
                                //log('show 4.2');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - popupRect.width - 20) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-left-belowtop-position', false, false);
                            } else {
                                //log('show 4.3');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y) + 'px';
                                pupupInstance.popupDialogEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-popup-dialog-fullwidth-belowtop-position', true, false);
                            }
                        } else if (roomAboveEndOfButton >= popupRect.height) {
                            //log('show 5');
                            if (roomToRightOfButton >= popupRect.width + 20) {
                                //log('show 5.1');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y + triggeringElementRect.height - popupRect.height) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + 20) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-right-abovebottom-position', false, false);
                            } else if (roomToLeftOfButton >= popupRect.width + 20) {
                                //log('show 5.2');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y + triggeringElementRect.height - popupRect.height) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - popupRect.width - 20) + 'px';
        
                                togglePopupClassName('live-editor-popup-dialog-left-abovebottom-position', false, false);
                            } else {
                                //log('show 5.3');
                                pupupInstance.popupDialogEl.style.top = (triggeringElementRect.y + triggeringElementRect.height - popupRect.height) + 'px';
                                pupupInstance.popupDialogEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-popup-dialog-fullwidth-abovebottom-position', false, false);
                            }
                        } else if(popupRect.height + 20 < window.innerHeight) {
                            //log('show 6');
                            if (roomToRightOfButton >= popupRect.width + 20) {
                                //log('show 6.1');
                                pupupInstance.popupDialogEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + 20) + 'px';
                                togglePopupClassName('live-editor-popup-dialog-right-winmid-position', false, false);
        
                            } else if (roomToLeftOfButton >= popupRect.width + 20) {
                                //log('show 6.2');
        
                                pupupInstance.popupDialogEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - 20 - popupRect.width) + 'px';
                                togglePopupClassName('live-editor-popup-dialog-left-winmid-position', false, false);
                            } else if(popupRect.width <= window.innerWidth) {
                                //log('show 6.3');
        
                                pupupInstance.popupDialogEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - roomToLeftOfButton) + 'px';
                                togglePopupClassName('live-editor-popup-dialog-winmid-winmid-position', false, false);
                            } else {
                                //log('show 6.4');
        
                                pupupInstance.popupDialogEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = '0px';
                                togglePopupClassName('live-editor-popup-dialog-fullwidth-winmid-position', true, false);
                            }
                        } else {
                            //log('show 7');
                            if (roomToRightOfButton >= popupRect.width + 20) {
                                //log('show 7.1');
                                pupupInstance.popupDialogEl.style.top = '0px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + 20) + 'px';
                                togglePopupClassName('live-editor-popup-dialog-right-fullheight-position', false, false);
        
                            } else if (roomToLeftOfButton >= popupRect.width + 20) {
                                //log('show 7.2');
        
                                pupupInstance.popupDialogEl.style.top = '0px';
                                pupupInstance.popupDialogEl.style.left = (triggeringElementRect.x - 20 - popupRect.width) + 'px';
                                togglePopupClassName('live-editor-popup-dialog-left-fullheight-position', false, false);
                            } else if(popupRect.width <= window.innerWidth) {
                                //log('show 7.3');
        
                                pupupInstance.popupDialogEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                pupupInstance.popupDialogEl.style.left = (window.innerWidth / 2) - (popupRect.width / 2) + 'px';
                                togglePopupClassName('live-editor-popup-dialog-winmid-fullheight-position', false, true);
                            } else {
                                //log('show 7.4');
                                pupupInstance.popupDialogEl.style.top = '0px';
                                pupupInstance.popupDialogEl.style.left = '0px';
                                togglePopupClassName('live-editor-popup-dialog-fullwidth-fullheight-position', true, true);
                            }
                        }
                        //log('show 7', pupupInstance.popupDialogEl);

                        pupupInstance.popupDialogEl.style.visibility = '';
        
                        this.active = true;        

                        setTimeout(function() {
                            if(!Q.info.useTouchEvents) {
                                window.addEventListener('click', pupupInstance.hide);        
                            } else {
                                window.addEventListener('touchend', pupupInstance.hide);        
                            }
                        }, 0);
                    }

                    this.destroy = function() {
                        this.element.removeEventListener('mouseenter', onElementMouseEnterListener);
                        this.element.removeEventListener('mouseleave', onElementMouseLeaveListener);
                        delete pupupInstance;
                    }
        
                    function togglePopupClassName(classNameToApply, addXScrollClass, addYScrollClass) {
                        let classes = [
                            'live-editor-popup-dialog-mid-below-position',
                            'live-editor-popup-dialog-right-below-position',
                            'live-editor-popup-dialog-left-below-position',
                            'live-editor-popup-dialog-winmid-below-position',
                            'live-editor-popup-dialog-fullwidth-below-position',
                            'live-editor-popup-dialog-mid-above-position',
                            'live-editor-popup-dialog-right-above-position',
                            'live-editor-popup-dialog-left-above-position',
                            'live-editor-popup-dialog-winmid-above-position',
                            'live-editor-popup-dialog-fullwidth-above-position',
                            'live-editor-popup-dialog-right-mid-position',
                            'live-editor-popup-dialog-left-mid-position',
                            'live-editor-popup-dialog-fullwidth-mid-position',
                            'live-editor-popup-dialog-right-belowtop-position',
                            'live-editor-popup-dialog-left-belowtop-position',
                            'live-editor-popup-dialog-mid-belowtop-position',
                            'live-editor-popup-dialog-fullwidth-belowtop-position',
                            'live-editor-popup-dialog-right-abovebottom-position',
                            'live-editor-popup-dialog-left-abovebottom-position',
                            'live-editor-popup-dialog-fullwidth-abovebottom-position',
                            'live-editor-popup-dialog-right-winmid-position',
                            'live-editor-popup-dialog-left-winmid-position',
                            'live-editor-popup-dialog-winmid-winmid-position',
                            'live-editor-popup-dialog-fullwidth-winmid-position',
                            'live-editor-popup-dialog-right-fullheight-position',
                            'live-editor-popup-dialog-left-fullheight-position',
                            'live-editor-popup-dialog-winmid-fullheight-position',
                            'live-editor-popup-dialog-fullwidth-fullheight-position',
                            'live-editor-popup-dialog-x-scroll',
                            'live-editor-popup-dialog-y-scroll',
                        ];
                        for (let i in classes) {
                            if (classes[i] == classNameToApply || (classes[i] == 'live-editor-popup-dialog-x-scroll' && addXScrollClass) || (classes[i] == 'live-editor-popup-dialog-y-scroll' && addYScrollClass)) {
                                continue;
                            }
                            pupupInstance.popupDialogEl.classList.remove(classes[i]);
                        }
        
                        if (classNameToApply && classNameToApply != '' && !pupupInstance.popupDialogEl.classList.contains(classNameToApply)) {
                            pupupInstance.popupDialogEl.classList.add(classNameToApply);
                        }
        
                        if (addXScrollClass) {
                            pupupInstance.popupDialogEl.classList.add('live-editor-popup-dialog-x-scroll');
                        }
                        if (addYScrollClass) {
                            pupupInstance.popupDialogEl.classList.add('live-editor-popup-dialog-y-scroll');
                        }
                    }
        
                    this.popupDialogEl = document.createElement('DIV');
                    this.popupDialogEl.className = 'live-editor-popup-dialog';
                    if(options.className) {
                        this.popupDialogEl.classList.add(options.className);
                    }
                    this.closeButtonEl = document.createElement('DIV');
                    this.closeButtonEl.className = 'live-editor-close-sign';
                    this.popupDialogEl.appendChild(this.closeButtonEl);
        
                    this.closeButtonEl.addEventListener('click', function (e) {
                        pupupInstance.hide(e);
                    });

                    if(!Q.info.useTouchEvents) {
                        this.element.addEventListener('mouseenter', onElementMouseEnterListener);

                        this.element.addEventListener('mouseleave', onElementMouseLeaveListener);

                        this.popupDialogEl.addEventListener('mouseenter', function (e) {
                            removeHoverTimerIfExists();
                        })
                        this.popupDialogEl.addEventListener('mouseleave', function (e) {
                            pupupInstance.hoverTimeout = setTimeout(function () {
                                pupupInstance.hide();
                            }, 600)

                        });
                       
                    } else {
                        this.element.addEventListener('touchend', function (e) {
                            if(pupupInstance.active) {
                                pupupInstance.hide(e);
                            } else {
                                pupupInstance.show(e);
                            }
                            
                        });
                    }   
                    
                    function onElementMouseEnterListener(e) {
                        removeHoverTimerIfExists();
                        pupupInstance.show(e);
                    }

                    function onElementMouseLeaveListener(e) {
                        pupupInstance.hoverTimeout = setTimeout(function () {
                            pupupInstance.hide(e);
                        }, 600)
                    }

                    function removeHoverTimerIfExists() {
                        if (pupupInstance.hoverTimeout != null) {
                            clearTimeout(pupupInstance.hoverTimeout);
                            pupupInstance.hoverTimeout = null;
                        }
                    }
                }

                function CustomSelect(element, options) {
                    var selectInstance = this;
                    this.originalSelect = element;
                    this.customSelectDropDownEl = null;
                    this.customSelectListEl = null;
                    this.customSelectedEl = null;
                    this.selectContainerEl = null;
                    this.closeButtonEl = null;
                    this.optionsList = [];
                    //this.selectedIndex = -1;
                    this._value = null;
                    this.spaceForArrow = 0;
                    this.isShown = false;

                    Object.defineProperties(this, {
                        'value': {
                            'set': function(val) {
                                for (let i in this.optionsList) {
                                    if(this.optionsList[i].value == val) {
                                        this.optionsList[i].customOptionEl.click();
                                        this._value = val;
                                        break;
                                    }
                                }
                            },
                            'get': function() {
                                return this._value;
                            }
                        }
                    });

                    this._syncOptionsList = function () {
                        let originalSelect = selectInstance.originalSelect;
                        let optionsNumber = originalSelect.options.length;
                        log('syncOptionsList optionsNumber', originalSelect.options);
                        for(let e = selectInstance.optionsList.length - 1; e >= 0; e--) {
                            let option = selectInstance.optionsList[i];
                            let sourceIsRemoved = true;
                            for (let h = 0; h < optionsNumber; h++) {
                                if(option.originalOptionEl == originalSelect.options[h]) {
                                    sourceIsRemoved = false;
                                    break;
                                }
                            }
                            if(option.customOptionEl != null && option.customOptionEl.parentElement != null) {
                                option.customOptionEl.parentElement.removeChild(option.customOptionEl);
                            }
                            if(sourceIsRemoved) {
                                selectInstance.optionsList.splice(e, 1);
                            }
                        }

                        for (let j = 0; j < optionsNumber; j++) {
                            let optionAlreadyExists = false;
                            let orderChanged = false;
                            for(let l in selectInstance.optionsList) {
                                if(selectInstance.optionsList[l].originalOptionEl == originalSelect.options[j]) {
                                    optionAlreadyExists = selectInstance.optionsList[l];
                                    if(j != l) orderChanged = true;
                                }
                            }
                            log('syncOptionsList optionAlreadyExists', optionAlreadyExists);

                            if(optionAlreadyExists != false && !orderChanged) {
                                continue;
                            } else if (optionAlreadyExists != false && orderChanged) {
                                selectInstance.customSelectListEl.appendChild(optionAlreadyExists.customOptionEl);
                                for(let e = selectInstance.optionsList.length - 1; e >= 0; e--) {
                                    if(selectInstance.optionsList[e] == optionAlreadyExists) {
                                        selectInstance.optionsList.splice(j, 0, selectInstance.optionsList.splice(e, 1)[0]);
                                        break;
                                    }
                                }
                                
                            } else {
                                let optionElementCon = document.createElement("DIV");
                                optionElementCon.className = 'live-editor-custom-select-option';
                                optionElementCon.dataset.selectValue = originalSelect.options[j].value;
                                optionElementCon.addEventListener("click", function(e) {
                                    selectInstance.selectOption(e.currentTarget);
                                });
                                selectInstance.customSelectListEl.appendChild(optionElementCon);

                                let optionElementText = document.createElement("DIV");
                                optionElementText.className = 'live-editor-custom-select-option-text';
                                optionElementText.innerHTML = originalSelect.options[j].innerHTML;
                                optionElementCon.appendChild(optionElementText);

                                selectInstance.optionsList.push({
                                    originalOptionEl: originalSelect.options[j],
                                    customOptionEl: optionElementCon,
                                    value: originalSelect.options[j].value
                                });
                            }
                        }
                   
                        for (let i = 0; i < optionsNumber; i++) {
                            if (originalSelect.options[i].selected == true) {
                                for(let c in selectInstance.optionsList) {
                                    if (originalSelect.options[i].value == selectInstance.optionsList[c].value) {
                                        selectInstance.selectOption(selectInstance.optionsList[c].customOptionEl);
                                    }
                                }
                                break;
                            }
                        }
                        
                    };

                    Object.defineProperty(this, "syncOptionsList", {
                        set(customFunction) {
                            this.customSyncOptionsList = customFunction;
                        },
                        get() {
                            if (this.customSyncOptionsList) {
                                return function () {
                                    let originalSelect = selectInstance.originalSelect;
                                    let optionsNumber = originalSelect.options.length;
                                    this.customSyncOptionsList();

                                    for (let i = 0; i < optionsNumber; i++) {
                                        if (originalSelect.options[i].selected == true && (selectInstance.selectedOption == null || selectInstance.selectedOption.originalOptionEl != originalSelect.options[i])) {
                                            for(let c in selectInstance.optionsList) {
                                                if (originalSelect.options[i].value == selectInstance.optionsList[c].value) {
                                                    selectInstance.selectOption(selectInstance.optionsList[c].customOptionEl);
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                            } else {
                                return this._syncOptionsList;
                            }
                        }
                      });

                    this.selectOption = function (customOptionEl) {
                        log('select selectoption', customOptionEl, selectInstance.originalSelect.options.length)
                        /*when an item is clicked, update the original select box,
                        and the selected item:*/
                        let originalSelect = selectInstance.originalSelect;
                        let optionsNumber = originalSelect.options.length;
                        for (let i = 0; i < optionsNumber; i++) {
                            if (originalSelect.options[i].value == customOptionEl.dataset.selectValue) {
                                let optionInstance = null;
                                for(let c in selectInstance.optionsList) {
                                    if (originalSelect.options[i].value == selectInstance.optionsList[c].value) {
                                        optionInstance = selectInstance.optionsList[c];
                                    }
                                }
                                originalSelect.selectedIndex = i;
                                selectInstance.selectedOption = optionInstance;
                                originalSelect.dispatchEvent(new Event('change'));
                                selectInstance.customSelectedEl.innerHTML = originalSelect.options[i].innerHTML;
                                let currentlySelectedOptions = selectInstance.customSelectListEl.getElementsByClassName('live-editor-custom-select-same-as-selected');
                                let selectedOptionsNum = currentlySelectedOptions.length;
                                for (k = 0; k < selectedOptionsNum; k++) {
                                    currentlySelectedOptions[k].classList.remove('live-editor-custom-select-same-as-selected');
                                }
                                if (!customOptionEl.classList.contains('live-editor-custom-select-same-as-selected')) customOptionEl.classList.add('live-editor-custom-select-same-as-selected');
                                break;
                            }
                        }
                        selectInstance.hide();
                    }
                    this.hide = function (e) {
                        log('CustomSelect: hide')
                        if (e && (e.target == this.closeButtonEl || !selectInstance.customSelectDropDownEl.contains(e.target)) || e == null) {
                            if (selectInstance.customSelectDropDownEl.parentElement) selectInstance.customSelectDropDownEl.parentElement.removeChild(selectInstance.customSelectDropDownEl);
        
                            togglePopupClassName('', false, false);
        
                            window.removeEventListener('click', selectInstance.hide);
                            selectInstance.customSelectedEl.classList.remove("live-editor-custom-select-arrow-active");
                            selectInstance.isShown = false;
                        }
                    }
        
                    this.show = function (e) {        
                        selectInstance.customSelectDropDownEl.style.top = '';
                        selectInstance.customSelectDropDownEl.style.left = '';
                        selectInstance.customSelectDropDownEl.style.maxHeight = '';
                        selectInstance.customSelectDropDownEl.style.maxWidth = '';
                        togglePopupClassName('', false, false);
                       
                        let triggeringElementRect = selectInstance.customSelectedEl.getBoundingClientRect();
        
                        selectInstance.customSelectDropDownEl.style.position = 'fixed';
                        selectInstance.customSelectDropDownEl.style.visibility = 'hidden';
                        selectInstance.customSelectDropDownEl.style.top = triggeringElementRect.y + triggeringElementRect.height + selectInstance.spaceForArrow + 'px';
                        selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + (triggeringElementRect.width / 2)) + 'px';
                        selectInstance.customSelectDropDownEl.style.width = (triggeringElementRect.width) + 'px';
                        
                        document.body.appendChild(selectInstance.customSelectDropDownEl);
        
                        let popupRect = selectInstance.customSelectDropDownEl.getBoundingClientRect();
                        selectInstance.customSelectDropDownEl.style.left = ((triggeringElementRect.x + (triggeringElementRect.width / 2)) - (popupRect.width / 2)) + 'px';
        
                        //if ther is no room below (bottom) of button, show dialog above if there is enough room
        
                        let spaceForArrow = selectInstance.spaceForArrow;
                        let roomBelowButton = window.innerHeight - (triggeringElementRect.y + triggeringElementRect.height);
                        let roomBelowStartOfButton = window.innerHeight - triggeringElementRect.y;
                        let roomBelowMidOfButton = window.innerHeight - (triggeringElementRect.y + (triggeringElementRect.height / 2));
                        let roomAboveButton = triggeringElementRect.y;
                        let roomAboveEndOfButton = triggeringElementRect.y + triggeringElementRect.height;
                        let roomAboveMidOfButton = triggeringElementRect.y + (triggeringElementRect.height / 2);
                        let roomToLeftOfButton = triggeringElementRect.x;
                        let roomToRightOfStartOfButton = (window.innerWidth - triggeringElementRect.x);
                        let roomToLeftOfMidButton = triggeringElementRect.x + (triggeringElementRect.x / 2);
                        let roomToRightOfButton = (window.innerWidth - (triggeringElementRect.x + triggeringElementRect.width));
                        let roomToRightOfMidButton = (window.innerWidth - (triggeringElementRect.x + (triggeringElementRect.width / 2)));
                        let roomToLeftOfEndOfButton = triggeringElementRect.x + triggeringElementRect.width;
                        let midYOfTriggeringElement = triggeringElementRect.y + triggeringElementRect.height / 2;
                        let midXOfTriggeringElement = triggeringElementRect.x + triggeringElementRect.width / 2;
        
                        if (roomBelowButton >= popupRect.height + spaceForArrow) {
                            //log('show 1');
                            if (roomToLeftOfMidButton >= (popupRect.width / 2) && roomToRightOfMidButton >= (popupRect.width / 2)) {
                                //log('show 1.1');
                                selectInstance.customSelectDropDownEl.style.top = triggeringElementRect.y + triggeringElementRect.height + spaceForArrow + 'px';
                                selectInstance.customSelectDropDownEl.style.left = ((triggeringElementRect.x + (triggeringElementRect.width / 2)) - (popupRect.width / 2)) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-mid-below-position', false, false);
                            } else if (roomToRightOfStartOfButton >= popupRect.width) {
                                //log('show 1.2');
                                selectInstance.customSelectDropDownEl.style.top = triggeringElementRect.y + triggeringElementRect.height + spaceForArrow + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-right-below-position', false, false);
                            } else if (roomToLeftOfEndOfButton >= popupRect.width) {
                                //log('show 1.3');
                                selectInstance.customSelectDropDownEl.style.top = triggeringElementRect.y + triggeringElementRect.height + spaceForArrow + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + triggeringElementRect.width) - popupRect.width + 'px';
        
                                togglePopupClassName('live-editor-custom-select-left-below-position', false, false);
                            } else if (popupRect.width <= window.innerWidth) {
                                //log('show 1.4');
                                selectInstance.customSelectDropDownEl.style.top = triggeringElementRect.y + triggeringElementRect.height + spaceForArrow + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - roomToLeftOfButton) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-winmid-below-position', false, false);
                            } else {
                                //log('show 1.5');
                                selectInstance.customSelectDropDownEl.style.top = triggeringElementRect.y + triggeringElementRect.height + spaceForArrow + 'px';
                                selectInstance.customSelectDropDownEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-custom-select-fullwidth-below-position', true, false);
                            }
                        } else if(roomAboveButton >= popupRect.height + spaceForArrow) {
                            //log('show 2');
                            if (roomToLeftOfMidButton >= (popupRect.width / 2) && roomToRightOfMidButton >= (popupRect.width / 2)) {
                                //log('show 2.1');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y - popupRect.height - spaceForArrow) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = ((triggeringElementRect.x + (triggeringElementRect.width / 2)) - (popupRect.width / 2)) + 'px';
                                togglePopupClassName('live-editor-custom-select-mid-above-position', false, false);
                            } else if (roomToRightOfStartOfButton >= popupRect.width) {
                                //log('show 2.2');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y - popupRect.height - spaceForArrow) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-right-above-position', false, false);
                            } else if (roomToLeftOfEndOfButton >= popupRect.width) {
                                //log('show 2.3');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y - popupRect.height - spaceForArrow) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + triggeringElementRect.width - popupRect.width) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-left-above-position', false, false);
                            } else if (window.innerWidth >= popupRect.width) {
                                //log('show 2.4');;
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y - popupRect.height - spaceForArrow) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - popupRect.width / 2) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-winmid-above-position', false, false);
                            } else {
                                //log('show 2.5');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y - popupRect.height - spaceForArrow) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-custom-select-fullwidth-above-position', true, false);
                            }
                        } else if (Math.min(roomBelowMidOfButton, roomAboveMidOfButton) >= popupRect.height / 2) {
                            //log('show 3');
                            if (roomToRightOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 3.1');
                                selectInstance.customSelectDropDownEl.style.top = midYOfTriggeringElement - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + spaceForArrow) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-right-mid-position', false, false);
                            } else if (roomToLeftOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 3.2');
                                selectInstance.customSelectDropDownEl.style.top = midYOfTriggeringElement - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - popupRect.width - spaceForArrow) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-left-mid-position', false, false);
                            } else {
                                //log('show 3.3');
                                selectInstance.customSelectDropDownEl.style.top = midYOfTriggeringElement - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-custom-select-fullwidth-mid-position', true, false);
                            }
                        } else if (roomBelowStartOfButton >= popupRect.height) {
                            //log('show 4');
                            if (roomToRightOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 4.1');
                                selectInstance.customSelectDropDownEl.style.top = triggeringElementRect.y + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + spaceForArrow) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-right-belowtop-position', false, false);
                            } else if (roomToLeftOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 4.2');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - popupRect.width - spaceForArrow) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-left-belowtop-position', false, false);
                            } else {
                                //log('show 4.3');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-custom-select-fullwidth-belowtop-position', true, false);
                            }
                        } else if (roomAboveEndOfButton >= popupRect.height) {
                            //log('show 5');
                            if (roomToRightOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 5.1');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y + triggeringElementRect.height - popupRect.height) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + spaceForArrow) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-right-abovebottom-position', false, false);
                            } else if (roomToLeftOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 5.2');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y + triggeringElementRect.height - popupRect.height) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - popupRect.width - spaceForArrow) + 'px';
        
                                togglePopupClassName('live-editor-custom-select-left-abovebottom-position', false, false);
                            } else {
                                //log('show 5.3');
                                selectInstance.customSelectDropDownEl.style.top = (triggeringElementRect.y + triggeringElementRect.height - popupRect.height) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = '0px';
        
                                togglePopupClassName('live-editor-custom-select-fullwidth-abovebottom-position', false, false);
                            }
                        } else if(popupRect.height + spaceForArrow < window.innerHeight) {
                            //log('show 6');
                            if (roomToRightOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 6.1');
                                selectInstance.customSelectDropDownEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + spaceForArrow) + 'px';
                                togglePopupClassName('live-editor-custom-select-right-winmid-position', false, false);
        
                            } else if (roomToLeftOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 6.2');
        
                                selectInstance.customSelectDropDownEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - spaceForArrow - popupRect.width) + 'px';
                                togglePopupClassName('live-editor-custom-select-left-winmid-position', false, false);
                            } else if(popupRect.width <= window.innerWidth) {
                                //log('show 6.3');
        
                                selectInstance.customSelectDropDownEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - roomToLeftOfButton) + 'px';
                                togglePopupClassName('live-editor-custom-select-winmid-winmid-position', false, false);
                            } else {
                                //log('show 6.4');
        
                                selectInstance.customSelectDropDownEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = '0px';
                                togglePopupClassName('live-editor-custom-select-fullwidth-winmid-position', true, false);
                            }
                        } else {
                            //log('show 7');
                            if (roomToRightOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 7.1');
                                selectInstance.customSelectDropDownEl.style.top = '0px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x + triggeringElementRect.width + spaceForArrow) + 'px';
                                togglePopupClassName('live-editor-custom-select-right-fullheight-position', false, false);
        
                            } else if (roomToLeftOfButton >= popupRect.width + spaceForArrow) {
                                //log('show 7.2');
        
                                selectInstance.customSelectDropDownEl.style.top = '0px';
                                selectInstance.customSelectDropDownEl.style.left = (triggeringElementRect.x - spaceForArrow - popupRect.width) + 'px';
                                togglePopupClassName('live-editor-custom-select-left-fullheight-position', false, false);
                            } else if(popupRect.width <= window.innerWidth) {
                                //log('show 7.3');
        
                                selectInstance.customSelectDropDownEl.style.top = (window.innerHeight / 2) - (popupRect.height / 2) + 'px';
                                selectInstance.customSelectDropDownEl.style.left = (window.innerWidth / 2) - (popupRect.width / 2) + 'px';
                                togglePopupClassName('live-editor-custom-select-winmid-fullheight-position', false, true);
                            } else {
                                //log('show 7.4');
                                selectInstance.customSelectDropDownEl.style.top = '0px';
                                selectInstance.customSelectDropDownEl.style.left = '0px';
                                togglePopupClassName('live-editor-custom-select-fullwidth-fullheight-position', true, true);
                            }
                        }
        
                        selectInstance.customSelectDropDownEl.style.visibility = '';
        
                        setTimeout(function() {
                            window.addEventListener('click', selectInstance.hide);
                        }, 0);
        
                        if(!selectInstance.customSelectedEl.classList.contains("live-editor-custom-select-arrow-active")) {
                            selectInstance.customSelectedEl.classList.add("live-editor-custom-select-arrow-active");
                        }

                        selectInstance.isShown = true;
                    }
        
                    function togglePopupClassName(classNameToApply, addXScrollClass, addYScrollClass) {
                        let classes = [
                            'live-editor-custom-select-mid-below-position',
                            'live-editor-custom-select-right-below-position',
                            'live-editor-custom-select-left-below-position',
                            'live-editor-custom-select-winmid-below-position',
                            'live-editor-custom-select-fullwidth-below-position',
                            'live-editor-custom-select-mid-above-position',
                            'live-editor-custom-select-right-above-position',
                            'live-editor-custom-select-left-above-position',
                            'live-editor-custom-select-winmid-above-position',
                            'live-editor-custom-select-fullwidth-above-position',
                            'live-editor-custom-select-right-mid-position',
                            'live-editor-custom-select-left-mid-position',
                            'live-editor-custom-select-fullwidth-mid-position',
                            'live-editor-custom-select-right-belowtop-position',
                            'live-editor-custom-select-left-belowtop-position',
                            'live-editor-custom-select-mid-belowtop-position',
                            'live-editor-custom-select-fullwidth-belowtop-position',
                            'live-editor-custom-select-right-abovebottom-position',
                            'live-editor-custom-select-left-abovebottom-position',
                            'live-editor-custom-select-fullwidth-abovebottom-position',
                            'live-editor-custom-select-right-winmid-position',
                            'live-editor-custom-select-left-winmid-position',
                            'live-editor-custom-select-winmid-winmid-position',
                            'live-editor-custom-select-fullwidth-winmid-position',
                            'live-editor-custom-select-right-fullheight-position',
                            'live-editor-custom-select-left-fullheight-position',
                            'live-editor-custom-select-winmid-fullheight-position',
                            'live-editor-custom-select-fullwidth-fullheight-position',
                            'live-editor-custom-select-x-scroll',
                            'live-editor-custom-select-y-scroll',
                        ];
                        for (let i in classes) {
                            if (classes[i] == classNameToApply || (classes[i] == 'live-editor-custom-select-x-scroll' && addXScrollClass) || (classes[i] == 'live-editor-custom-select-y-scroll' && addYScrollClass)) {
                                continue;
                            }
                            selectInstance.customSelectDropDownEl.classList.remove(classes[i]);
                        }
        
                        if (classNameToApply && classNameToApply != '' && !selectInstance.customSelectDropDownEl.classList.contains(classNameToApply)) {
                            selectInstance.customSelectDropDownEl.classList.add(classNameToApply);
                        }
        
                        if (addXScrollClass) {
                            selectInstance.customSelectDropDownEl.classList.add('live-editor-custom-select-x-scroll');
                        }
                        if (addYScrollClass) {
                            selectInstance.customSelectDropDownEl.classList.add('live-editor-custom-select-y-scroll');
                        }
                    }
        
                    let selectParentDiv = selectInstance.selectContainerEl = document.createElement("DIV");
                    selectParentDiv.className = 'live-editor-custom-select';
                    if(!selectInstance.originalSelect.parentElement) {
                        console.warn('Select should have parent element.');
                        return;
                    }
                    selectInstance.originalSelect.parentElement.insertBefore(selectParentDiv, selectInstance.originalSelect);
                    selectParentDiv.appendChild(selectInstance.originalSelect);

                    /*for each element, create a new DIV that will act as the selected item:*/
                    let selectedOptionEl = selectInstance.customSelectedEl = document.createElement("DIV");
                    selectedOptionEl.setAttribute("class", "live-editor-custom-select-selected");
                    selectedOptionEl.innerHTML = selectInstance.originalSelect.selectedIndex != -1 ? selectInstance.originalSelect.options[selectInstance.originalSelect.selectedIndex].innerHTML : '';
                    selectParentDiv.appendChild(selectedOptionEl);

                    /*for each element, create a new DIV that will contain the option list:*/
                    let optionsListCon = selectInstance.customSelectDropDownEl = document.createElement("DIV");
                    optionsListCon.setAttribute("class", "live-editor-custom-select-items-con");
                    let optionsListEl = selectInstance.customSelectListEl = document.createElement("DIV");
                    optionsListEl.setAttribute("class", "live-editor-custom-select-items");
                    optionsListCon.appendChild(optionsListEl);
                    let selectControlsEl = selectInstance.customSelectControlsEl = document.createElement("DIV");
                    selectControlsEl.setAttribute("class", "live-editor-custom-select-controls");
                    optionsListCon.appendChild(selectControlsEl);


                    selectInstance.syncOptionsList();

                    selectedOptionEl.addEventListener("click", function (e) {
                        //e.stopPropagation();
                        if(!selectInstance.isShown) {
                            closeAllSelect(this);
                            selectInstance.show();
                        } else {
                            selectInstance.hide(e);
                        }
                    });

                    const config = {attributes: false, childList: true,characterData:false, subtree:true};
                    const callback = function(mutationList, observer) {
                        for (const mutation of mutationList) {
                            if (mutation.type === 'childList') {
                                selectInstance.syncOptionsList();
                            }
                        }
                    };

                    const observer = new MutationObserver(callback);
                    observer.observe(selectInstance.originalSelect, config);

                    function closeAllSelect(elmnt) {
                        return;
                        let existingSelectsLists = document.querySelectorAll('.live-editor-custom-select-items');
                        let existingOpenedSelectsNum = existingSelectsLists.length;
                        let i;
                        for (i = 0; i < existingOpenedSelectsNum; i++) {
                            if (existingSelectsLists[i] && existingSelectsLists[i].parentElement) existingSelectsLists[i].parentElement.removeChild(existingSelectsLists[i]);
                        }

                        let existingSelects = document.querySelectorAll('.live-editor-custom-select-selected');
                        let existingSelectsNum = existingSelects.length;
                        let a;
                        for (a = 0; a < existingSelectsNum; a++) {
                            existingSelects[a].classList.remove('live-editor-custom-select-arrow-active');
                        }
                    }
                }

                function generateId() {
                    return Date.now().toString(36) + Math.random().toString(36).replace(/\./g, "");
                }

                function createPopup() {
                    log('createPopup 00', scenesInterface)
                    var dialog=document.createElement('DIV');
                    dialog.className = 'live-editor-dialog-box live-editor-dialog_advanced_streaming';

                    var close=document.createElement('div');
                    close.className = 'live-editor-close-dialog-sign';
                    close.style.backgroundImage = 'url("' + Q.url("{{Q}}/img/close.png") + '"';
                    close.style.backgroundRepeat = 'no-repeat';
                    close.style.backgroundSize = 'cover';
                    close.style.animation = 'none';
                    dialog.appendChild(close);

                    var dialogInner = document.createElement('DIV');
                    dialogInner.className = 'live-editor-dialog-inner';
                    dialog.appendChild(dialogInner);

                    var dialogTitle = document.createElement('H3');
                    dialogTitle.innerHTML = Q.getObject("webrtc.streamingSettings.title", _controlsTool.text);
                    dialogTitle.className = 'live-editor-dialog-header Q_dialog_title';
                    dialogInner.appendChild(dialogTitle);

                    var boxContent = document.createElement('DIV');
                    boxContent.className = 'live-editor-dialog-body';
                    dialogInner.appendChild(boxContent);

                    var streamingControls = document.createElement('DIV');
                    streamingControls.className = 'live-editor-popup-streaming-controls';

                    var streamingToSectionEl = streamingToSection.createSection();
                    streamingControls.appendChild(streamingToSectionEl);

                    var scenesColumn = scenesInterface.createScenesCol();
                    streamingControls.appendChild(scenesColumn);

                    var sourcesColumn = document.createElement('DIV');
                    sourcesColumn.className = 'live-editor-popup-sources';
                    _sourcesColumnEl = sourcesColumn;
                    streamingControls.appendChild(sourcesColumn);

                    //_audioMixerColumnEl = globalMicAudioInterface.createControlsButtons();
                    //streamingControls.appendChild(optionsColumn);
                    //streamingControls.appendChild(_audioMixerColumnEl);

                    boxContent.appendChild(streamingControls);
                    
                    var previewBox = document.createElement('DIV');
                    previewBox.className = 'live-editor-popup-preview-and-chat';
                    boxContent.appendChild(previewBox);

                    var previewBoxBody = document.createElement('DIV');
                    previewBoxBody.className = 'live-editor-popup-preview-body';
                    previewBox.appendChild(previewBoxBody);

                    var previewBoxBodyInner = document.createElement('DIV');
                    previewBoxBodyInner.className = 'live-editor-popup-preview-body-inner';
                    previewBoxBody.appendChild(previewBoxBodyInner);

                    var sourceHoveringEl = _hoveringElement = document.createElement('DIV');
                    sourceHoveringEl.className = 'live-editor-canvas-preview-hovering';
                    previewBoxBodyInner.appendChild(sourceHoveringEl);                    

                    /*var sourceResizingEl = _resizingElement = document.createElement('DIV');
                    sourceResizingEl.className = 'live-editor-popup-preview-resizing';
                    previewBoxBodyInner.appendChild(sourceResizingEl);*/

                    var chatBoxCon = _chatBoxContainer = document.createElement('DIV');
                    chatBoxCon.className = 'live-editor-popup-chat-con';
                    previewBox.appendChild(chatBoxCon);


                   //let chatsInterface = textChatsInterface.createSection();
                   //chatBoxCon.appendChild(chatsInterface);

                    /*Q.activate(
                        Q.Tool.setUpElement(
                            _resizingElement,
                            "Q/resize",
                            {
                                move: true,
                                resize: true,
                                active: true,
                                //elementPosition: 'fixed',
                                showResizeHandles: true,
                                moveWithinArea: 'parent',
                                allowOverresizing: true,
                                negativeMoving: true,
                                onMoving: function () {

                                }
                            }
                        ),
                        {},
                        function () {
                            _resizingElementTool = this;
                            _resizingElement.style.display = 'none';
                        }
                    );*/

                    Q.activate(
                        Q.Tool.setUpElement(
                            dialog,
                            "Q/resize",
                            {
                                move: true,
                                elementPosition: 'fixed',
                                activateOnElement: dialogTitle,
                                keepInitialSize: true,
                                resize: false,
                                active: true,
                                moveWithinArea: 'window',
                            }
                        ),
                        {},
                        function () {

                        }
                    );

                    Q.activate(
                        Q.Tool.setUpElement(
                            dialog,
                            "Streams/fileManager",
                            {

                            }
                        ),
                        {},
                        function (toolEl) {
                            _fileManagerTool = Q.Tool.from(dialog, "Streams/fileManager");
                        }
                    )
                    
                    close.addEventListener('click', function () {
                        hide()
                    });

                    tool.advancedStreamingDialog = boxContent;

                    return {
                        dialogEl: dialog,
                        previewBoxEl: previewBoxBodyInner,
                        previewBoxParent: previewBoxBody
                    }
                }

                function createPopupHorizontalMobile() {
                    var dialog=document.createElement('DIV');
                    dialog.className = 'live-editor-dialog-box live-editor-dialog_advanced_streaming';

                    var close=document.createElement('div');
                    close.className = 'live-editor-close-dialog-sign live-editor-close-sign';
                    dialog.appendChild(close);

                    var dialogInner = document.createElement('DIV');
                    dialogInner.className = 'live-editor-dialog-inner';
                    dialog.appendChild(dialogInner);

                    var dialogTitle = document.createElement('H3');
                    dialogTitle.innerHTML = Q.getObject("webrtc.streamingSettings.title", _controlsTool.text);
                    dialogTitle.className = 'live-editor-dialog-header Q_dialog_title';
                    dialogInner.appendChild(dialogTitle);

                    var boxContent = document.createElement('DIV');
                    boxContent.className = 'live-editor-dialog-body';
                    dialogInner.appendChild(boxContent);

                    var streamingControls = document.createElement('DIV');
                    streamingControls.className = 'live-editor-popup-streaming-controls';

                    var scenesColumn = scenesInterface.createScenesCol();
                    streamingControls.appendChild(scenesColumn);

                    var sourcesColumn = document.createElement('DIV');
                    sourcesColumn.className = 'live-editor-popup-sources';
                    _sourcesColumnEl = sourcesColumn;
                    streamingControls.appendChild(sourcesColumn);

                    //_audioMixerColumnEl = globalMicAudioInterface.createControlsButtons();
                    //streamingControls.appendChild(optionsColumn);
                    //streamingControls.appendChild(_audioMixerColumnEl);

                    boxContent.appendChild(streamingControls);
                    
                    var previewBox = document.createElement('DIV');
                    previewBox.className = 'live-editor-popup-preview-and-chat';
                    boxContent.appendChild(previewBox);

                    var previewBoxBody = document.createElement('DIV');
                    previewBoxBody.className = 'live-editor-popup-preview-body';
                    previewBox.appendChild(previewBoxBody);

                    var previewBoxBodyInner = document.createElement('DIV');
                    previewBoxBodyInner.className = 'live-editor-popup-preview-body-inner';
                    previewBoxBody.appendChild(previewBoxBodyInner);

                    var sourceHoveringEl = _hoveringElement = document.createElement('DIV');
                    sourceHoveringEl.className = 'live-editor-canvas-preview-hovering';
                    previewBoxBodyInner.appendChild(sourceHoveringEl);

                    var streamingToSectionEl = streamingToSection.createSection();
                    previewBoxBody.appendChild(streamingToSectionEl);

                    /*var sourceResizingEl = _resizingElement = document.createElement('DIV');
                    sourceResizingEl.className = 'live-editor-popup-preview-resizing';
                    previewBoxBodyInner.appendChild(sourceResizingEl);*/

                    var chatBoxCon = _chatBoxContainer = document.createElement('DIV');
                    chatBoxCon.className = 'live-editor-popup-chat-con';
                    previewBox.appendChild(chatBoxCon);


                   //let chatsInterface = textChatsInterface.createSection();
                   //chatBoxCon.appendChild(chatsInterface);

                    /*Q.activate(
                        Q.Tool.setUpElement(
                            _resizingElement,
                            "Q/resize",
                            {
                                move: true,
                                resize: true,
                                active: true,
                                //elementPosition: 'fixed',
                                showResizeHandles: true,
                                moveWithinArea: 'parent',
                                allowOverresizing: true,
                                negativeMoving: true,
                                onMoving: function () {

                                }
                            }
                        ),
                        {},
                        function () {
                            _resizingElementTool = this;
                            _resizingElement.style.display = 'none';
                        }
                    );*/

                    Q.activate(
                        Q.Tool.setUpElement(
                            dialog,
                            "Q/resize",
                            {
                                move: true,
                                elementPosition: 'fixed',
                                activateOnElement: dialogTitle,
                                keepInitialSize: true,
                                resize: false,
                                active: true,
                                moveWithinArea: 'window',
                            }
                        ),
                        {},
                        function () {

                        }
                    );

                    Q.activate(
                        Q.Tool.setUpElement(
                            dialog,
                            "Streams/fileManager",
                            {

                            }
                        ),
                        {},
                        function (toolEl) {
                            _fileManagerTool = Q.Tool.from(dialog, "Streams/fileManager");
                        }
                    )

                    var controlsRect = _controlsTool.controlBar.getBoundingClientRect();
                    var dialogWidth = 996;
                    dialog.style.width = dialogWidth + 'px';
                    dialog.style.height = (dialogWidth / 1.4) + 'px';
                    log('dialogWidth', dialogWidth);
                    if(Q.info.isMobile) {
                        //dialog.style.left = (window.innerWidth / 2) - (dialogWidth / 2) + 'px';
                        //dialog.style.bottom = (controlsRect.height + 10) + 'px';
                    } else {
                        //dialog.style.left = (window.innerWidth / 2) - (dialogWidth / 2) + 'px';
                        //dialog.style.top = '100px';
                    }


                    close.addEventListener('click', function () {
                        hide()
                    });

                    tool.advancedStreamingDialog = boxContent;

                    return {
                        dialogEl: dialog,
                        previewBoxEl: previewBoxBodyInner,
                        previewBoxParent: previewBoxBody
                    }
                }

                function hide() {
                    if(activeDialog == null) return;
                    
                    if(activeDialog.dialogEl && activeDialog.dialogEl.parentElement) {
                        activeDialog.dialogEl.parentElement.removeChild(activeDialog.dialogEl);
                    }

                    isHidden = true;
                    var streamingCanvas = document.querySelector('.live-editor-video-stream-canvas');
                    if (streamingCanvas != null) {
                        streamingCanvas.style.position = 'absolute';
                        streamingCanvas.style.top = '-999999999px';
                        streamingCanvas.style.left = '0';
                        document.body.appendChild(streamingCanvas);
                    }

                    if (!tool.livestreamingRtmpSenderTool.rtmpSender.isStreaming()) {
                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.stop();
                    }
                    
                    document.documentElement.classList.remove('Streams_webrtc_live');
                }

                function showHorizontalRequired() {
                    var existingHorizontalRequired = document.querySelector('.Q_webrtc_orientHorizontally');
                    if(existingHorizontalRequired) return;
                    
                    var horizontalRequiredCon = document.createElement('DIV')
                    horizontalRequiredCon.className = 'Q_webrtc_orientHorizontally Q_orientHorizontally Q_floatAboveDocument';
                    horizontalRequiredCon.style.zIndex = '9999999999999999999999999999999999999999';
                    document.body.appendChild(horizontalRequiredCon);
                    horizontalRequiredCon.addEventListener('touchend', function () {
                        window.removeEventListener('resize', verticalToHorizontalOrientationChange);
                        if(typeof screen != 'undefined' && screen.orientation != null) {
                            screen.orientation.removeEventListener("change", verticalToHorizontalOrientationChange);
                        }
                        isOpening = false;
                        hideHorizontalRequired();
                    });
                }

                function hideHorizontalRequired() {
                    var horizontalRequiredCon = document.querySelector('.Q_webrtc_orientHorizontally');
                    if(horizontalRequiredCon && horizontalRequiredCon.parentNode != null) horizontalRequiredCon.parentNode.removeChild(horizontalRequiredCon) ;
                }

                function verticalToHorizontalOrientationChange() {
                    setTimeout(function() {
                        show(true);
                    }, 1600)
                    hideHorizontalRequired();
                    log('show vertical: remove handler')
                    window.removeEventListener('resize', verticalToHorizontalOrientationChange);
                    if(typeof screen != 'undefined' && screen.orientation != null) {
                        screen.orientation.removeEventListener("change", verticalToHorizontalOrientationChange);
                    }
                }

                function show(skipCheck) {
                    if(!skipCheck && (activeDialog && activeDialog.dialogEl && document.body.contains(activeDialog.dialogEl) || isOpening)) return;
                    var dialogWidth = 996;
                    var dialog, previewBox;
                    if(Q.info.isMobile){
                        if(window.innerWidth > window.innerHeight) {
                            log('show horizontal')
                            if(mobileHorizontaldialogEl == null) {
                                mobileHorizontaldialogEl = createPopupHorizontalMobile();
                            }

                            dialog = mobileHorizontaldialogEl.dialogEl;
                            previewBox = mobileHorizontaldialogEl.previewBoxEl;
                            activeDialog = mobileHorizontaldialogEl;
                            isOpening = false;
                            //_webrtcUserInterface.roomsMediaContainer().appendChild(dialog);
                            document.body.appendChild(dialog);
                            if(tool.livestreamStream) tool.livestreamingEditor.textChatsInterface.createSection();
                            function horizontalToVerticaOrientationChange() {
                                setTimeout(function () {
                                    log('show', activeDialog, activeDialog.dialogEl, document.body.contains(activeDialog.dialogEl))
                                    log('show', activeDialog && activeDialog.dialogEl && document.body.contains(activeDialog.dialogEl))
                                    if(activeDialog && activeDialog.dialogEl && document.body.contains(activeDialog.dialogEl) === true) {
                                        log('show 3')

                                        if(window.innerWidth < window.innerHeight) {
                                            log('show 4')
                                            hide();
                                            show(true);
                                        }
                                    }
                                }, 1600)
                                window.removeEventListener('resize', horizontalToVerticaOrientationChange);

                            }
                            window.addEventListener('resize', horizontalToVerticaOrientationChange);

                        } else {
                            log('show vertical')

                            isOpening = true;
                            showHorizontalRequired();

                            window.addEventListener('resize', verticalToHorizontalOrientationChange);
                            if(typeof screen != 'undefined' && screen.orientation != null) {
                                screen.orientation.addEventListener("change", verticalToHorizontalOrientationChange);
                            }
                        }

                        if(mobileHorizontaldialogEl == null) return;
                    } else {
                        if(desktopDialogEl == null) {
                            desktopDialogEl = createPopup();
                        }

                        dialog = desktopDialogEl.dialogEl;
                        previewBox = desktopDialogEl.previewBoxEl;
                        activeDialog = desktopDialogEl;
                        if(desktopDialogEl == null) return;
                        //_webrtcUserInterface.roomsMediaContainer().appendChild(dialog);
                        document.body.appendChild(dialog);
                        if(tool.livestreamStream) tool.livestreamingEditor.textChatsInterface.createSection();

                        dialog.style.width = dialogWidth + 'px';
                        dialog.style.height = (dialogWidth / 1.4) + 'px';
                        log('dialogWidth', dialogWidth);
                    }

                    var dialogRect = Q.info.isMobile ? mobileHorizontaldialogEl.dialogEl.getBoundingClientRect() : desktopDialogEl.dialogEl.getBoundingClientRect();

                    if(dialog) {
                        tool.livestreamingCanvasComposerTool.canvasComposer.videoComposer.compositeVideosAndDraw();

                        isHidden = false;

                        var controlsRect = _controlsTool.controlBar.getBoundingClientRect();
                        if(Q.info.isMobile) {

                            dialog.style.position = 'fixed';
                            dialog.style.width = '100%';
                            dialog.style.height = '100%';
                            dialog.style.maxWidth = 'none';
                            dialog.style.top = '0';
                            dialog.style.left = '0';
                            //dialog.style.left = (window.innerWidth / 2) - (dialogWidth / 2) + 'px';
                            //dialog.style.bottom = (controlsRect.height + 10) + 'px';
                        } else {
                            var winWidth = window.innerWidth;
                            var winHeight= window.innerHeight;
                            if(winWidth >= dialogWidth) {
                                dialog.style.left = (winWidth / 2) - (dialogWidth / 2) + 'px';
                            } else {
                                dialog.style.left = '0px';
                                dialog.style.width = "100%";
                            }

                            if(winHeight >= dialogRect.height) {
                                dialog.style.top = (winHeight / 2) - (dialogRect.height / 2) + 'px';
                            } else {
                                dialog.style.top = '0px';
                                dialog.style.height = "100%";
                            }

                            //dialog.style.bottom = (controlsRect.height + 10) + 'px';

                        }

                        var streamingCanvas = _streamingCanvas = document.querySelector('.live-editor-video-stream-canvas');
                        if(streamingCanvas != null) {
                            streamingCanvas.style.position = '';
                            streamingCanvas.style.top = '';
                            streamingCanvas.style.left = '';
                            previewBox.appendChild(streamingCanvas);
                        }

                        scenesInterface.syncList();

                        if(!_hoveringElementToolInstance) {
                            _hoveringElementToolInstance = scenesInterface.initHoveringTool();
                        }
                      
                        document.documentElement.classList.add('Streams_webrtc_live');
                    }

                    if(!tool.livestreamStream) {
                        tool.getOrCreateLivestreamStream();
                    }
                }

                return {
                    hide: hide,
                    show: show,
                    toggle: function () {
                        if(isHidden) {
                            this.show();
                        } else this.hide();
                    },

                    scenesInterface: scenesInterface,
                    textChatsInterface: textChatsInterface
                }
            },
            getOrCreateLivestreamStream: function() {
                var tool = this;
                return new Promise(function (resolve, reject) {
                    if (tool.livestreamStream != null) {
                        resolve();
                    } else {
                        let webrtcStream = tool.webrtcUserInterface.roomStream();

                        Q.req("Streams/livestream", ["livestream"], function (err, response) {
                            var msg = Q.firstErrorMessage(err, response && response.errors);

                            if (msg) {
                                Q.alert(msg);
                                return reject(msg);
                            }

                            let livestreamStreamData = response.slots.livestream.livestreamStream;
                            let publicChatStreamData = response.slots.livestream.publicChatStream;

                            Q.Streams.get(livestreamStreamData.fields.publisherId, livestreamStreamData.fields.name, function () {
                                if (!this || !this.fields) {
                                    console.error('Error while getting stream');
                                    return;
                                }

                                tool.livestreamStream = this;
                                Q.Streams.get(publicChatStreamData.fields.publisherId, publicChatStreamData.fields.name, function () {
                                    if (!this || !this.fields) {
                                        console.error('Error while getting stream');
                                        return;
                                    }

                                    tool.publicChatStream = this;
                                    tool.livestreamingEditor.textChatsInterface.createSection();

                                    resolve();

                                });
                            });

                        }, {
                            method: 'post',
                            fields: {
                                publisherId: webrtcStream.fields.publisherId,
                                streamName: webrtcStream.fields.name
                            }
                        });
                    }
                });
            },
            get: function () {
                var tool = this;
                let webrtcStream = tool.webrtcUserInterface.roomStream();

                return new Promise(function(resolve, reject) {
                    if (tool.livestreamingEditor != null) {
                        resolve(tool.livestreamingEditor);
                    } else {
                        Q.Streams.related(webrtcStream.fields.publisherId, webrtcStream.fields.name, "Streams/webrtc/livestream", true, function (err) {
                            if (err) {
                                console.error(err)
                                return;
                            }
                            if(Object.keys(this.relatedStreams).length) {
                                for (var key in this.relatedStreams) {
                                    if (this.relatedStreams.hasOwnProperty(key)) {
                                        tool.livestreamStream = this.relatedStreams[key];
                                        break;
                                    }
                                }
                            }

                            Q.activate(
                                Q.Tool.setUpElement(
                                    "div",
                                    "Streams/webrtc/livestreaming/canvasComposer",
                                    {
                                        webrtcUserInterface: tool.state.webrtcUserInterface,
                                    }
                                ),
                                {},
                                function (rtmpSenderTool, rtmpSenderTool2) {
                                    log('rtmpSenderTool', rtmpSenderTool, rtmpSenderTool2, this)
    
                                    tool.livestreamingCanvasComposerTool = this;
    
                                    Q.activate(
                                        Q.Tool.setUpElement(
                                            "div",
                                            "Streams/webrtc/livestreaming/rtmpSender",
                                            {
                                                canvasComposerTool: tool.livestreamingCanvasComposerTool,
                                                webrtcUserInterface: tool.state.webrtcUserInterface,
                                            }
                                        ),
                                        {},
                                        function () {
                                            tool.livestreamingRtmpSenderTool = this;
                                            Q.addStylesheet('{{Streams}}/css/tools/livestreamingEditor.css?ts=' + performance.now(), function () {
                                                tool.livestreamingEditor = tool.create();
                                                resolve(tool.livestreamingEditor);
                                            });
                                        }
                                    );
                                }
                            );
                        });

                        
                    }
                  });
                
            },
            refresh: function() {
                var tool = this;
            }
        }

    );

})(window.jQuery, window);