/**
 * Autogenerated base class for the Metrics model.
 * 
 * Don't change this file, since it can be overwritten.
 * Instead, change the Metrics.js file.
 *
 * @module Metrics
 */
var Q = require('Q');
var Db = Q.require('Db');

/**
 * Base class for the Metrics model
 * @namespace Base
 * @class Metrics
 * @static
 */
module.exports = function () {
	
	/**
	 * The list of model classes
	 * @property tableClasses
	 * @type array
	 */
	this.tableClasses = [
		"Metrics_Domain",
		"Metrics_HostnameSession",
		"Metrics_Publisher",
		"Metrics_Session",
		"Metrics_Share",
		"Metrics_Visit"
	];
	
	/**
	 * This method uses Db.connect() to establish a connection to database using information stored in the configuration.
	 * If the connection to Db object has already been made, it returns this Db object.
	 * @method db
	 * @return {Db} The database connection
	 */
	this.db = function () {
		return Db.connect('Metrics');
	};
	
	/**
	 * The connection name for the class
	 * @method connectionName
	 * @return {string} The name of the connection
	 */
	this.connectionName = function() {
		return 'Metrics';
	};

	/**
	 * Link to Metrics.Domain model
	 * @property Domain
	 * @type Metrics.Domain
	 */
	this.Domain = Q.require('Metrics/Domain');
	/**
	 * Link to Metrics.HostnameSession model
	 * @property HostnameSession
	 * @type Metrics.HostnameSession
	 */
	this.HostnameSession = Q.require('Metrics/HostnameSession');
	/**
	 * Link to Metrics.Publisher model
	 * @property Publisher
	 * @type Metrics.Publisher
	 */
	this.Publisher = Q.require('Metrics/Publisher');
	/**
	 * Link to Metrics.Session model
	 * @property Session
	 * @type Metrics.Session
	 */
	this.Session = Q.require('Metrics/Session');
	/**
	 * Link to Metrics.Share model
	 * @property Share
	 * @type Metrics.Share
	 */
	this.Share = Q.require('Metrics/Share');
	/**
	 * Link to Metrics.Visit model
	 * @property Visit
	 * @type Metrics.Visit
	 */
	this.Visit = Q.require('Metrics/Visit');
	
	return this;
	
};